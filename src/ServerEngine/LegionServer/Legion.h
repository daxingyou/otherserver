// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Legion.jce'
// **********************************************************************

#ifndef __LEGION_H_
#define __LEGION_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "DalMoDef.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum enLegionDataRetCode
    {
        en_DataRet_OK,
        en_DataRet_NotExist,
        en_DataRet_SysError,
        en_DataRet_Dunplicated,
    };
    inline string etos(const enLegionDataRetCode & e)
    {
        switch(e)
        {
            case en_DataRet_OK: return "en_DataRet_OK";
            case en_DataRet_NotExist: return "en_DataRet_NotExist";
            case en_DataRet_SysError: return "en_DataRet_SysError";
            case en_DataRet_Dunplicated: return "en_DataRet_Dunplicated";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, enLegionDataRetCode & e)
    {
        if(s == "en_DataRet_OK")  { e=en_DataRet_OK; return 0;}
        if(s == "en_DataRet_NotExist")  { e=en_DataRet_NotExist; return 0;}
        if(s == "en_DataRet_SysError")  { e=en_DataRet_SysError; return 0;}
        if(s == "en_DataRet_Dunplicated")  { e=en_DataRet_Dunplicated; return 0;}

        return -1;
    }

    struct LegionList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionList";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        LegionList()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(legionList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(legionList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(legionList,"legionList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(legionList, false);
            return _os;
        }
    public:
        vector<std::string> legionList;
    };
    inline bool operator==(const LegionList&l, const LegionList&r)
    {
        return l.legionList == r.legionList;
    }
    inline bool operator!=(const LegionList&l, const LegionList&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class LegionPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~LegionPrxCallback(){}
        virtual void callback_getLegionList(taf::Int32 ret,  const ServerEngine::LegionList& legionList)
        { throw std::runtime_error("callback_getLegionList() overloading incorrect."); }
        virtual void callback_getLegionList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getLegionList_exception() overloading incorrect."); }

        virtual void callback_newLegion(taf::Int32 ret)
        { throw std::runtime_error("callback_newLegion() overloading incorrect."); }
        virtual void callback_newLegion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_newLegion_exception() overloading incorrect."); }

        virtual void callback_getLegion(taf::Int32 ret,  const std::string& strValue)
        { throw std::runtime_error("callback_getLegion() overloading incorrect."); }
        virtual void callback_getLegion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getLegion_exception() overloading incorrect."); }

        virtual void callback_updateLegion(taf::Int32 ret)
        { throw std::runtime_error("callback_updateLegion() overloading incorrect."); }
        virtual void callback_updateLegion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_updateLegion_exception() overloading incorrect."); }

        virtual void callback_delLegion(taf::Int32 ret)
        { throw std::runtime_error("callback_delLegion() overloading incorrect."); }
        virtual void callback_delLegion_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_delLegion_exception() overloading incorrect."); }

        virtual void callback_setGlobalData(taf::Int32 ret)
        { throw std::runtime_error("callback_setGlobalData() overloading incorrect."); }
        virtual void callback_setGlobalData_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setGlobalData_exception() overloading incorrect."); }

        virtual void callback_getGlobalData(taf::Int32 ret,  const std::string& strValue)
        { throw std::runtime_error("callback_getGlobalData() overloading incorrect."); }
        virtual void callback_getGlobalData_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getGlobalData_exception() overloading incorrect."); }

        virtual void callback_delGlobalData(taf::Int32 ret)
        { throw std::runtime_error("callback_delGlobalData() overloading incorrect."); }
        virtual void callback_delGlobalData_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_delGlobalData_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<LegionPrxCallback> LegionPrxCallbackPtr;

    /* proxy for client */
    class LegionProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 getLegionList(ServerEngine::LegionList &legionList,const map<string, string> &context = TAF_CONTEXT());
        void async_getLegionList(LegionPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 newLegion(const std::string & strLegionName,const std::string & data,const map<string, string> &context = TAF_CONTEXT());
        void async_newLegion(LegionPrxCallbackPtr callback,const std::string & strLegionName,const std::string & data,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getLegion(const std::string & strKey,std::string &strValue,const map<string, string> &context = TAF_CONTEXT());
        void async_getLegion(LegionPrxCallbackPtr callback,const std::string & strKey,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 updateLegion(const std::string & strKey,const std::string & strValue,const map<string, string> &context = TAF_CONTEXT());
        void async_updateLegion(LegionPrxCallbackPtr callback,const std::string & strKey,const std::string & strValue,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 delLegion(const std::string & strKey,const map<string, string> &context = TAF_CONTEXT());
        void async_delLegion(LegionPrxCallbackPtr callback,const std::string & strKey,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 setGlobalData(const std::string & strKey,const std::string & strValue,const map<string, string> &context = TAF_CONTEXT());
        void async_setGlobalData(LegionPrxCallbackPtr callback,const std::string & strKey,const std::string & strValue,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getGlobalData(const std::string & strKey,std::string &strValue,const map<string, string> &context = TAF_CONTEXT());
        void async_getGlobalData(LegionPrxCallbackPtr callback,const std::string & strKey,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 delGlobalData(const std::string & strKey,const map<string, string> &context = TAF_CONTEXT());
        void async_delGlobalData(LegionPrxCallbackPtr callback,const std::string & strKey,const map<string, string> &context = TAF_CONTEXT());

        LegionProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<LegionProxy> LegionPrx;

    /* servant for server */
    class Legion : public taf::Servant
    {
    public:
        virtual ~Legion(){}
        virtual taf::Int32 getLegionList(ServerEngine::LegionList &legionList,taf::JceCurrentPtr current) = 0;
        static void async_response_getLegionList(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::LegionList &legionList);

        virtual taf::Int32 newLegion(const std::string & strLegionName,const std::string & data,taf::JceCurrentPtr current) = 0;
        static void async_response_newLegion(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getLegion(const std::string & strKey,std::string &strValue,taf::JceCurrentPtr current) = 0;
        static void async_response_getLegion(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &strValue);

        virtual taf::Int32 updateLegion(const std::string & strKey,const std::string & strValue,taf::JceCurrentPtr current) = 0;
        static void async_response_updateLegion(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 delLegion(const std::string & strKey,taf::JceCurrentPtr current) = 0;
        static void async_response_delLegion(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 setGlobalData(const std::string & strKey,const std::string & strValue,taf::JceCurrentPtr current) = 0;
        static void async_response_setGlobalData(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getGlobalData(const std::string & strKey,std::string &strValue,taf::JceCurrentPtr current) = 0;
        static void async_response_getGlobalData(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &strValue);

        virtual taf::Int32 delGlobalData(const std::string & strKey,taf::JceCurrentPtr current) = 0;
        static void async_response_delGlobalData(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define ServerEngine_LegionList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.legionList,b.legionList);



#endif

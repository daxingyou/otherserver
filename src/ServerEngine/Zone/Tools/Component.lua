dofile("xml.lua")function parseXml(fileName)	local f = io.open(fileName)	if nil == f then		print("open file:"..fileName.." fail");		return nil;	end		local content = f:read("*all");	f:close()	local result = collect(content);	return result;endfunction createCppHeader()	local msg = "#include \"MiniApr.h\"\n\n"	msg = msg.."using namespace MINIAPR;\nusing namespace std;\n"	return msgendfunction createInitSubCode(componentTb)	local declareCode = ""	local defineCode = ""		local compDefine = ""	local objDefine = ""	local tableDefine = ""		local headFunDefineText = "typedef IComponent* (*COMPONENT_CREATEFUN)(Int32);\n";	headFunDefineText = headFunDefineText.."typedef IObject* (*OBJECT_CREATEFUN)();\n"	headFunDefineText = headFunDefineText.."static std::map<std::string, COMPONENT_CREATEFUN> s_mapComponentCreateFun;\n"	headFunDefineText = headFunDefineText.."static std::map<std::string, OBJECT_CREATEFUN> s_mapObjectCreateFun;\n\n"		local componentInitFun = "void initComponentCreateFun()\n{\n";	componentInitFun = componentInitFun.."\tstatic bool s_bInitComponentFun = false;\n"	componentInitFun = componentInitFun.."\tif(!s_bInitComponentFun) \n\t\ts_bInitComponentFun = true;\n\telse\n \t\treturn;\n"		local objectInitFun = "void initObjCreateFun()\n{\n";	objectInitFun = objectInitFun.."\tstatic bool s_bInitObjectFun = false;\n"	objectInitFun = objectInitFun.."\tif(!s_bInitObjectFun)\n\t\ts_bInitObjectFun = true;\n\telse\n\t\treturn;\n"		for i = 1, componentTb.n do		if type(componentTb[i]) == "table" and componentTb[i].label == "component"  then			componentInitFun = componentInitFun.."\t".."s_mapComponentCreateFun[\""..componentTb[i].args["name"].."\"] = &"..componentTb[i].args["createFun"]..";\n";						declareCode = declareCode.."extern \"C\" IComponent* "..componentTb[i].args["createFun"].."(Int32 nVersion);\n"			compDefine = compDefine.."#define COMPNAME_"..(componentTb[i].args["name"]).." \""..(componentTb[i].args["name"]).."\"\n"			for subindex = 1, componentTb[i].n do				if type(componentTb[i][subindex]) == "table" and componentTb[i][subindex].label == "table" then					tableDefine = tableDefine.."#define TABLENAME_"..(componentTb[i][subindex].args["name"]).." \""..(componentTb[i][subindex].args["name"]).."\"\n"				end			end				elseif type(componentTb[i]) == "table" and componentTb[i].label == "object" then			objectInitFun = objectInitFun.."\t".."s_mapObjectCreateFun[\""..componentTb[i].args["name"].."\"] = &"..componentTb[i].args["createFun"]..";\n";						declareCode = declareCode.."extern \"C\" IObject* "..componentTb[i].args["createFun"].."();\n"			objDefine = objDefine.."#define OBJNAME_"..(componentTb[i].args["name"]).." \""..(componentTb[i].args["name"]).."\"\n"		elseif type(componentTb[i]) == "table" and componentTb[i].label == "table" then			tableDefine = tableDefine.."#define TABLENAME_"..(componentTb[i].args["name"]).." \""..(componentTb[i].args["name"]).."\"\n"		end		end		defineCode = compDefine.."\n"..objDefine.."\n"..tableDefine.."\n"	local result = headFunDefineText..componentInitFun.."}\n\n"..objectInitFun.."}\n";		return defineCode, declareCode, resultendfunction createSubCode(componentTb)	local defineCode, declareCode, initCode = createInitSubCode(componentTb);		local componentCode = "\nextern \"C\" IComponent* createComponentStatic(const std::string& strComponentName, Int32 nVersion)\n{\n\n"	componentCode = componentCode.."\tinitComponentCreateFun();\n"	componentCode = componentCode.."\tstd::map<std::string, COMPONENT_CREATEFUN>::iterator it = s_mapComponentCreateFun.find(strComponentName);\n"	componentCode = componentCode.."\tif(it == s_mapComponentCreateFun.end() )\n\t{\n"	componentCode = componentCode.."\t\treturn NULL;\n\t}\n"	componentCode = componentCode.."\treturn (it->second)(nVersion);\n}\n"			local objectCode = "extern \"C\" IObject* createObjectStatic(const std::string& strObjectName)\n{\n";	objectCode = objectCode.."\tinitObjCreateFun();\n"	objectCode = objectCode.."\tstd::map<std::string, OBJECT_CREATEFUN>::iterator it = s_mapObjectCreateFun.find(strObjectName);\n"	objectCode = objectCode.."\tif(it == s_mapObjectCreateFun.end() )\n\t{\n"	objectCode = objectCode.."\t\treturn NULL;\n\t}\n"	objectCode = objectCode.."\treturn (it->second)();\n}\n"		return defineCode, declareCode.."\n"..initCode..componentCode.."\n"..objectCode;endfunction checkFileSame(content, fileName)	local f = io.open(fileName, "rb");	if f == nil then		return false;	end		local tmpData = f:read("*all");	f:close();		if tmpData == content then		return true;	end		return false;endfunction makeHeadFileContent(body)	local data = "#ifndef __COMPONENT_CONST_DEFINE_H__\n"	data = data.."#define __COMPONENT_CONST_DEFINE_H__\n\n"	data = data..body	data = data.."\n#endif\n"		return dataendfunction mainParse()	print("ready parse file:"..arg[1])	local xmlTb = parseXml(arg[1]);	local cppContent = createCppHeader();	local headFileContent = ""	print(xmlTb.n)	for i = 1, xmlTb.n do		if type(xmlTb[i]) == "table" and xmlTb[i].label == "components" then			local headBody, cppbody = createSubCode(xmlTb[i]);			headFileContent = headFileContent..headBody			cppContent = cppContent..cppbody		end	end		local f = io.open(arg[2], "wb");	f:write(cppContent)	f:flush()	f:close()	headFileContent = makeHeadFileContent(headFileContent)	if checkFileSame(headFileContent, arg[3]) == false then		local fHead = io.open(arg[3], "wb");		fHead:write(headFileContent)		fHead:flush()		fHead:close()	endendmainParse()
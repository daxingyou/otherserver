// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServerExt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameServerExt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GSProto {

namespace {

const ::google::protobuf::Descriptor* Cmd_Sc_QueryGodAnimalLevelStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Sc_QueryGodAnimalLevelStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Cs_QueryGodAnimalInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Cs_QueryGodAnimalInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Sc_QueryGodAnimalInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Sc_QueryGodAnimalInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Cs_ExeGodAnimalInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Cs_ExeGodAnimalInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Sc_ExeGodAnimalInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Sc_ExeGodAnimalInherit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Cs_QueryGodAnimalDetai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Cs_QueryGodAnimalDetai_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Sc_QueryGodAnimalDetai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Sc_QueryGodAnimalDetai_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GODANIMAL_DETAIL_BYID_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GODANIMAL_DETAIL_BYID_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_GODANIMAL_DETAIL_BYID_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_GODANIMAL_DETAIL_BYID_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Cs_GodAnimalTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Cs_GodAnimalTrain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Sc_GodAnimalUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Sc_GodAnimalUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Cs_QueryGodAnimalLevelStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Cs_QueryGodAnimalLevelStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cmd_Sc_GoldAnimalList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cmd_Sc_GoldAnimalList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_NORMALSHOP_QUERY_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_NORMALSHOP_QUERY_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_NORMALSHOP_BUY_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_NORMALSHOP_BUY_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_LEGION_CAMPBATTLE_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_LEGION_CAMPBATTLE_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_INFO_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_INFO_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegionUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegionUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_INFO_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_INFO_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_REPORT_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_LEGION_CAMPBATTLE_REPORT_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSLegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSLegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSLegionMemDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSLegionMemDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_JOIN_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_LEGION_CAMPBATTLE_JOIN_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_JOIN_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_LEGION_CAMPBATTLE_JOIN_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_ENTER_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_LEGION_CAMPBATTLE_ENTER_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_BATTLE_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_LEGION_CAMPBATTLE_BATTLE_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* LastFightLogItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastFightLogItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSLegionBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSLegionBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CUR_FIGHT_CONDITION_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CUR_FIGHT_CONDITION_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CUR_FIGHT_CONDITION_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CUR_FIGHT_CONDITION_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameServerCMD_Ext_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enCampState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameServerExt_2eproto() {
  protobuf_AddDesc_GameServerExt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameServerExt.proto");
  GOOGLE_CHECK(file != NULL);
  Cmd_Sc_QueryGodAnimalLevelStep_descriptor_ = file->message_type(0);
  static const int Cmd_Sc_QueryGodAnimalLevelStep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, dwobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, btouchmaxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, curinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, nextinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, szconsumeitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, ilevelstepsilvercost_),
  };
  Cmd_Sc_QueryGodAnimalLevelStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Sc_QueryGodAnimalLevelStep_descriptor_,
      Cmd_Sc_QueryGodAnimalLevelStep::default_instance_,
      Cmd_Sc_QueryGodAnimalLevelStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalLevelStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Sc_QueryGodAnimalLevelStep));
  Cmd_Cs_QueryGodAnimalInherit_descriptor_ = file->message_type(1);
  static const int Cmd_Cs_QueryGodAnimalInherit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalInherit, dwaccepobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalInherit, dwpasserobjectid_),
  };
  Cmd_Cs_QueryGodAnimalInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Cs_QueryGodAnimalInherit_descriptor_,
      Cmd_Cs_QueryGodAnimalInherit::default_instance_,
      Cmd_Cs_QueryGodAnimalInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Cs_QueryGodAnimalInherit));
  Cmd_Sc_QueryGodAnimalInherit_descriptor_ = file->message_type(2);
  static const int Cmd_Sc_QueryGodAnimalInherit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalInherit, acceptpredetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalInherit, passerdetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalInherit, acceptpostdetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalInherit, iinheritsilvercost_),
  };
  Cmd_Sc_QueryGodAnimalInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Sc_QueryGodAnimalInherit_descriptor_,
      Cmd_Sc_QueryGodAnimalInherit::default_instance_,
      Cmd_Sc_QueryGodAnimalInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Sc_QueryGodAnimalInherit));
  Cmd_Cs_ExeGodAnimalInherit_descriptor_ = file->message_type(3);
  static const int Cmd_Cs_ExeGodAnimalInherit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_ExeGodAnimalInherit, dwpasserobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_ExeGodAnimalInherit, dwaccepobjectid_),
  };
  Cmd_Cs_ExeGodAnimalInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Cs_ExeGodAnimalInherit_descriptor_,
      Cmd_Cs_ExeGodAnimalInherit::default_instance_,
      Cmd_Cs_ExeGodAnimalInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_ExeGodAnimalInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_ExeGodAnimalInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Cs_ExeGodAnimalInherit));
  Cmd_Sc_ExeGodAnimalInherit_descriptor_ = file->message_type(4);
  static const int Cmd_Sc_ExeGodAnimalInherit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_ExeGodAnimalInherit, passerdetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_ExeGodAnimalInherit, acceptdetail_),
  };
  Cmd_Sc_ExeGodAnimalInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Sc_ExeGodAnimalInherit_descriptor_,
      Cmd_Sc_ExeGodAnimalInherit::default_instance_,
      Cmd_Sc_ExeGodAnimalInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_ExeGodAnimalInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_ExeGodAnimalInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Sc_ExeGodAnimalInherit));
  Cmd_Cs_QueryGodAnimalDetai_descriptor_ = file->message_type(5);
  static const int Cmd_Cs_QueryGodAnimalDetai_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalDetai, dwgodanimalobjectid_),
  };
  Cmd_Cs_QueryGodAnimalDetai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Cs_QueryGodAnimalDetai_descriptor_,
      Cmd_Cs_QueryGodAnimalDetai::default_instance_,
      Cmd_Cs_QueryGodAnimalDetai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalDetai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalDetai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Cs_QueryGodAnimalDetai));
  Cmd_Sc_QueryGodAnimalDetai_descriptor_ = file->message_type(6);
  static const int Cmd_Sc_QueryGodAnimalDetai_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalDetai, detail_),
  };
  Cmd_Sc_QueryGodAnimalDetai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Sc_QueryGodAnimalDetai_descriptor_,
      Cmd_Sc_QueryGodAnimalDetai::default_instance_,
      Cmd_Sc_QueryGodAnimalDetai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalDetai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_QueryGodAnimalDetai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Sc_QueryGodAnimalDetai));
  CMD_GODANIMAL_DETAIL_BYID_CS_descriptor_ = file->message_type(7);
  static const int CMD_GODANIMAL_DETAIL_BYID_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_CS, igodanimalid_),
  };
  CMD_GODANIMAL_DETAIL_BYID_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GODANIMAL_DETAIL_BYID_CS_descriptor_,
      CMD_GODANIMAL_DETAIL_BYID_CS::default_instance_,
      CMD_GODANIMAL_DETAIL_BYID_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GODANIMAL_DETAIL_BYID_CS));
  CMD_GODANIMAL_DETAIL_BYID_SC_descriptor_ = file->message_type(8);
  static const int CMD_GODANIMAL_DETAIL_BYID_SC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_SC, igodanimalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_SC, detail_),
  };
  CMD_GODANIMAL_DETAIL_BYID_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_GODANIMAL_DETAIL_BYID_SC_descriptor_,
      CMD_GODANIMAL_DETAIL_BYID_SC::default_instance_,
      CMD_GODANIMAL_DETAIL_BYID_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_GODANIMAL_DETAIL_BYID_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_GODANIMAL_DETAIL_BYID_SC));
  Cmd_Cs_GodAnimalTrain_descriptor_ = file->message_type(9);
  static const int Cmd_Cs_GodAnimalTrain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_GodAnimalTrain, dwobjectid_),
  };
  Cmd_Cs_GodAnimalTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Cs_GodAnimalTrain_descriptor_,
      Cmd_Cs_GodAnimalTrain::default_instance_,
      Cmd_Cs_GodAnimalTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_GodAnimalTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_GodAnimalTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Cs_GodAnimalTrain));
  Cmd_Sc_GodAnimalUpdate_descriptor_ = file->message_type(10);
  static const int Cmd_Sc_GodAnimalUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GodAnimalUpdate, updateinfo_),
  };
  Cmd_Sc_GodAnimalUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Sc_GodAnimalUpdate_descriptor_,
      Cmd_Sc_GodAnimalUpdate::default_instance_,
      Cmd_Sc_GodAnimalUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GodAnimalUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GodAnimalUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Sc_GodAnimalUpdate));
  Cmd_Cs_QueryGodAnimalLevelStep_descriptor_ = file->message_type(11);
  static const int Cmd_Cs_QueryGodAnimalLevelStep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalLevelStep, dwobjectid_),
  };
  Cmd_Cs_QueryGodAnimalLevelStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Cs_QueryGodAnimalLevelStep_descriptor_,
      Cmd_Cs_QueryGodAnimalLevelStep::default_instance_,
      Cmd_Cs_QueryGodAnimalLevelStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalLevelStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Cs_QueryGodAnimalLevelStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Cs_QueryGodAnimalLevelStep));
  Cmd_Sc_GoldAnimalList_descriptor_ = file->message_type(12);
  static const int Cmd_Sc_GoldAnimalList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GoldAnimalList, dwactiveobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GoldAnimalList, szgodanimallist_),
  };
  Cmd_Sc_GoldAnimalList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cmd_Sc_GoldAnimalList_descriptor_,
      Cmd_Sc_GoldAnimalList::default_instance_,
      Cmd_Sc_GoldAnimalList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GoldAnimalList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cmd_Sc_GoldAnimalList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cmd_Sc_GoldAnimalList));
  CMD_NORMALSHOP_QUERY_SC_descriptor_ = file->message_type(13);
  static const int CMD_NORMALSHOP_QUERY_SC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_QUERY_SC, goodslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_QUERY_SC, untilnextrefreshseconds_),
  };
  CMD_NORMALSHOP_QUERY_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_NORMALSHOP_QUERY_SC_descriptor_,
      CMD_NORMALSHOP_QUERY_SC::default_instance_,
      CMD_NORMALSHOP_QUERY_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_QUERY_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_QUERY_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_NORMALSHOP_QUERY_SC));
  CMD_NORMALSHOP_BUY_CS_descriptor_ = file->message_type(14);
  static const int CMD_NORMALSHOP_BUY_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_BUY_CS, index_),
  };
  CMD_NORMALSHOP_BUY_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_NORMALSHOP_BUY_CS_descriptor_,
      CMD_NORMALSHOP_BUY_CS::default_instance_,
      CMD_NORMALSHOP_BUY_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_BUY_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_NORMALSHOP_BUY_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_NORMALSHOP_BUY_CS));
  CampUnit_descriptor_ = file->message_type(15);
  static const int CampUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampUnit, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampUnit, strowername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampUnit, bcanreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampUnit, bcanbattle_),
  };
  CampUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampUnit_descriptor_,
      CampUnit::default_instance_,
      CampUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampUnit));
  CMD_QUERY_LEGION_CAMPBATTLE_SC_descriptor_ = file->message_type(16);
  static const int CMD_QUERY_LEGION_CAMPBATTLE_SC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_LEGION_CAMPBATTLE_SC, szcamplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_LEGION_CAMPBATTLE_SC, istatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_LEGION_CAMPBATTLE_SC, iremaidsecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_LEGION_CAMPBATTLE_SC, ihavereportid_),
  };
  CMD_QUERY_LEGION_CAMPBATTLE_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_LEGION_CAMPBATTLE_SC_descriptor_,
      CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance_,
      CMD_QUERY_LEGION_CAMPBATTLE_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_LEGION_CAMPBATTLE_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_LEGION_CAMPBATTLE_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_LEGION_CAMPBATTLE_SC));
  CMD_QUERY_CAMPBATTLE_INFO_CS_descriptor_ = file->message_type(17);
  static const int CMD_QUERY_CAMPBATTLE_INFO_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_CS, iid_),
  };
  CMD_QUERY_CAMPBATTLE_INFO_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_INFO_CS_descriptor_,
      CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance_,
      CMD_QUERY_CAMPBATTLE_INFO_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_INFO_CS));
  LegionUnit_descriptor_ = file->message_type(18);
  static const int LegionUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegionUnit, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegionUnit, ihavecampcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegionUnit, iaddpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegionUnit, ilegionicon_),
  };
  LegionUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegionUnit_descriptor_,
      LegionUnit::default_instance_,
      LegionUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegionUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegionUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegionUnit));
  CMD_QUERY_CAMPBATTLE_INFO_SC_descriptor_ = file->message_type(19);
  static const int CMD_QUERY_CAMPBATTLE_INFO_SC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, guardlegion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, szattacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, icangetsilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, ireportcost_),
  };
  CMD_QUERY_CAMPBATTLE_INFO_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_INFO_SC_descriptor_,
      CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance_,
      CMD_QUERY_CAMPBATTLE_INFO_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_INFO_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_INFO_SC));
  CMD_LEGION_CAMPBATTLE_REPORT_CS_descriptor_ = file->message_type(20);
  static const int CMD_LEGION_CAMPBATTLE_REPORT_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_REPORT_CS, iid_),
  };
  CMD_LEGION_CAMPBATTLE_REPORT_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_LEGION_CAMPBATTLE_REPORT_CS_descriptor_,
      CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance_,
      CMD_LEGION_CAMPBATTLE_REPORT_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_REPORT_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_REPORT_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_LEGION_CAMPBATTLE_REPORT_CS));
  VSUnit_descriptor_ = file->message_type(21);
  static const int VSUnit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSUnit, strlegionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSUnit, istarcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSUnit, ilegionicon_),
  };
  VSUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VSUnit_descriptor_,
      VSUnit::default_instance_,
      VSUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VSUnit));
  VSLegion_descriptor_ = file->message_type(22);
  static const int VSLegion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegion, guardunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegion, attunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegion, icampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegion, ibattleid_),
  };
  VSLegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VSLegion_descriptor_,
      VSLegion::default_instance_,
      VSLegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VSLegion));
  VSLegionMemDetail_descriptor_ = file->message_type(23);
  static const int VSLegionMemDetail_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, iheadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, ilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, ifightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, bicanfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, biicanfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, biiicanfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, bisnpc_),
  };
  VSLegionMemDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VSLegionMemDetail_descriptor_,
      VSLegionMemDetail::default_instance_,
      VSLegionMemDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionMemDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VSLegionMemDetail));
  CMD_LEGION_CAMPBATTLE_JOIN_CS_descriptor_ = file->message_type(24);
  static const int CMD_LEGION_CAMPBATTLE_JOIN_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_CS, iid_),
  };
  CMD_LEGION_CAMPBATTLE_JOIN_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_LEGION_CAMPBATTLE_JOIN_CS_descriptor_,
      CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance_,
      CMD_LEGION_CAMPBATTLE_JOIN_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_LEGION_CAMPBATTLE_JOIN_CS));
  CMD_LEGION_CAMPBATTLE_JOIN_SC_descriptor_ = file->message_type(25);
  static const int CMD_LEGION_CAMPBATTLE_JOIN_SC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, bisguard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, szvslegionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, selfvsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, szmemberlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, iremaindsecond_),
  };
  CMD_LEGION_CAMPBATTLE_JOIN_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_LEGION_CAMPBATTLE_JOIN_SC_descriptor_,
      CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance_,
      CMD_LEGION_CAMPBATTLE_JOIN_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_JOIN_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_LEGION_CAMPBATTLE_JOIN_SC));
  CMD_LEGION_CAMPBATTLE_ENTER_CS_descriptor_ = file->message_type(26);
  static const int CMD_LEGION_CAMPBATTLE_ENTER_CS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_ENTER_CS, icampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_ENTER_CS, strvslegionname_),
  };
  CMD_LEGION_CAMPBATTLE_ENTER_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_LEGION_CAMPBATTLE_ENTER_CS_descriptor_,
      CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance_,
      CMD_LEGION_CAMPBATTLE_ENTER_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_ENTER_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_ENTER_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_LEGION_CAMPBATTLE_ENTER_CS));
  CMD_LEGION_CAMPBATTLE_BATTLE_CS_descriptor_ = file->message_type(27);
  static const int CMD_LEGION_CAMPBATTLE_BATTLE_CS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_BATTLE_CS, icampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_BATTLE_CS, ibattleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_BATTLE_CS, strmemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_BATTLE_CS, istar_),
  };
  CMD_LEGION_CAMPBATTLE_BATTLE_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_LEGION_CAMPBATTLE_BATTLE_CS_descriptor_,
      CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance_,
      CMD_LEGION_CAMPBATTLE_BATTLE_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_BATTLE_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_LEGION_CAMPBATTLE_BATTLE_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_LEGION_CAMPBATTLE_BATTLE_CS));
  LastFightLogItem_descriptor_ = file->message_type(28);
  static const int LastFightLogItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastFightLogItem, icampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastFightLogItem, bisguard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastFightLogItem, biswin_),
  };
  LastFightLogItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastFightLogItem_descriptor_,
      LastFightLogItem::default_instance_,
      LastFightLogItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastFightLogItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastFightLogItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastFightLogItem));
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_descriptor_ = file->message_type(29);
  static const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC, szfightloglist_),
  };
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_descriptor_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC));
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_descriptor_ = file->message_type(30);
  static const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS, icampid_),
  };
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_descriptor_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS));
  VSLegionBase_descriptor_ = file->message_type(31);
  static const int VSLegionBase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionBase, szvslegionlist_),
  };
  VSLegionBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VSLegionBase_descriptor_,
      VSLegionBase::default_instance_,
      VSLegionBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSLegionBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VSLegionBase));
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_descriptor_ = file->message_type(32);
  static const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC, strlegionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC, vslegionmsg_),
  };
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_descriptor_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC));
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_descriptor_ = file->message_type(33);
  static const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS, icampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS, strattlegionname_),
  };
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_descriptor_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS));
  FightRecord_descriptor_ = file->message_type(34);
  static const int FightRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRecord, strselfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRecord, strenemylegionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRecord, strenemyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRecord, igetstarcount_),
  };
  FightRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRecord_descriptor_,
      FightRecord::default_instance_,
      FightRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRecord));
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_descriptor_ = file->message_type(35);
  static const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC, vslegion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC, selffightrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC, enemyfightrecod_),
  };
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_descriptor_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance_,
      CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC));
  CMD_QUERY_CUR_FIGHT_CONDITION_CS_descriptor_ = file->message_type(36);
  static const int CMD_QUERY_CUR_FIGHT_CONDITION_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_CONDITION_CS, icampid_),
  };
  CMD_QUERY_CUR_FIGHT_CONDITION_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CUR_FIGHT_CONDITION_CS_descriptor_,
      CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance_,
      CMD_QUERY_CUR_FIGHT_CONDITION_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_CONDITION_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_CONDITION_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CUR_FIGHT_CONDITION_CS));
  CMD_QUERY_CUR_FIGHT_CONDITION_SC_descriptor_ = file->message_type(37);
  static const int CMD_QUERY_CUR_FIGHT_CONDITION_SC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_CONDITION_SC, szvslegionlist_),
  };
  CMD_QUERY_CUR_FIGHT_CONDITION_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CUR_FIGHT_CONDITION_SC_descriptor_,
      CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance_,
      CMD_QUERY_CUR_FIGHT_CONDITION_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_CONDITION_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_CONDITION_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CUR_FIGHT_CONDITION_SC));
  CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_descriptor_ = file->message_type(38);
  static const int CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS, icampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS, strattlegionname_),
  };
  CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_descriptor_,
      CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance_,
      CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS));
  GameServerCMD_Ext_descriptor_ = file->enum_type(0);
  enCampState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameServerExt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Sc_QueryGodAnimalLevelStep_descriptor_, &Cmd_Sc_QueryGodAnimalLevelStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Cs_QueryGodAnimalInherit_descriptor_, &Cmd_Cs_QueryGodAnimalInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Sc_QueryGodAnimalInherit_descriptor_, &Cmd_Sc_QueryGodAnimalInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Cs_ExeGodAnimalInherit_descriptor_, &Cmd_Cs_ExeGodAnimalInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Sc_ExeGodAnimalInherit_descriptor_, &Cmd_Sc_ExeGodAnimalInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Cs_QueryGodAnimalDetai_descriptor_, &Cmd_Cs_QueryGodAnimalDetai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Sc_QueryGodAnimalDetai_descriptor_, &Cmd_Sc_QueryGodAnimalDetai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GODANIMAL_DETAIL_BYID_CS_descriptor_, &CMD_GODANIMAL_DETAIL_BYID_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_GODANIMAL_DETAIL_BYID_SC_descriptor_, &CMD_GODANIMAL_DETAIL_BYID_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Cs_GodAnimalTrain_descriptor_, &Cmd_Cs_GodAnimalTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Sc_GodAnimalUpdate_descriptor_, &Cmd_Sc_GodAnimalUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Cs_QueryGodAnimalLevelStep_descriptor_, &Cmd_Cs_QueryGodAnimalLevelStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cmd_Sc_GoldAnimalList_descriptor_, &Cmd_Sc_GoldAnimalList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_NORMALSHOP_QUERY_SC_descriptor_, &CMD_NORMALSHOP_QUERY_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_NORMALSHOP_BUY_CS_descriptor_, &CMD_NORMALSHOP_BUY_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampUnit_descriptor_, &CampUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_LEGION_CAMPBATTLE_SC_descriptor_, &CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_INFO_CS_descriptor_, &CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegionUnit_descriptor_, &LegionUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_INFO_SC_descriptor_, &CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_LEGION_CAMPBATTLE_REPORT_CS_descriptor_, &CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VSUnit_descriptor_, &VSUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VSLegion_descriptor_, &VSLegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VSLegionMemDetail_descriptor_, &VSLegionMemDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_LEGION_CAMPBATTLE_JOIN_CS_descriptor_, &CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_LEGION_CAMPBATTLE_JOIN_SC_descriptor_, &CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_LEGION_CAMPBATTLE_ENTER_CS_descriptor_, &CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_LEGION_CAMPBATTLE_BATTLE_CS_descriptor_, &CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastFightLogItem_descriptor_, &LastFightLogItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_descriptor_, &CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_descriptor_, &CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VSLegionBase_descriptor_, &VSLegionBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_descriptor_, &CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_descriptor_, &CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRecord_descriptor_, &FightRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_descriptor_, &CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CUR_FIGHT_CONDITION_CS_descriptor_, &CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CUR_FIGHT_CONDITION_SC_descriptor_, &CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_descriptor_, &CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameServerExt_2eproto() {
  delete Cmd_Sc_QueryGodAnimalLevelStep::default_instance_;
  delete Cmd_Sc_QueryGodAnimalLevelStep_reflection_;
  delete Cmd_Cs_QueryGodAnimalInherit::default_instance_;
  delete Cmd_Cs_QueryGodAnimalInherit_reflection_;
  delete Cmd_Sc_QueryGodAnimalInherit::default_instance_;
  delete Cmd_Sc_QueryGodAnimalInherit_reflection_;
  delete Cmd_Cs_ExeGodAnimalInherit::default_instance_;
  delete Cmd_Cs_ExeGodAnimalInherit_reflection_;
  delete Cmd_Sc_ExeGodAnimalInherit::default_instance_;
  delete Cmd_Sc_ExeGodAnimalInherit_reflection_;
  delete Cmd_Cs_QueryGodAnimalDetai::default_instance_;
  delete Cmd_Cs_QueryGodAnimalDetai_reflection_;
  delete Cmd_Sc_QueryGodAnimalDetai::default_instance_;
  delete Cmd_Sc_QueryGodAnimalDetai_reflection_;
  delete CMD_GODANIMAL_DETAIL_BYID_CS::default_instance_;
  delete CMD_GODANIMAL_DETAIL_BYID_CS_reflection_;
  delete CMD_GODANIMAL_DETAIL_BYID_SC::default_instance_;
  delete CMD_GODANIMAL_DETAIL_BYID_SC_reflection_;
  delete Cmd_Cs_GodAnimalTrain::default_instance_;
  delete Cmd_Cs_GodAnimalTrain_reflection_;
  delete Cmd_Sc_GodAnimalUpdate::default_instance_;
  delete Cmd_Sc_GodAnimalUpdate_reflection_;
  delete Cmd_Cs_QueryGodAnimalLevelStep::default_instance_;
  delete Cmd_Cs_QueryGodAnimalLevelStep_reflection_;
  delete Cmd_Sc_GoldAnimalList::default_instance_;
  delete Cmd_Sc_GoldAnimalList_reflection_;
  delete CMD_NORMALSHOP_QUERY_SC::default_instance_;
  delete CMD_NORMALSHOP_QUERY_SC_reflection_;
  delete CMD_NORMALSHOP_BUY_CS::default_instance_;
  delete CMD_NORMALSHOP_BUY_CS_reflection_;
  delete CampUnit::default_instance_;
  delete CampUnit_reflection_;
  delete CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance_;
  delete CMD_QUERY_LEGION_CAMPBATTLE_SC_reflection_;
  delete CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_INFO_CS_reflection_;
  delete LegionUnit::default_instance_;
  delete LegionUnit_reflection_;
  delete CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_INFO_SC_reflection_;
  delete CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance_;
  delete CMD_LEGION_CAMPBATTLE_REPORT_CS_reflection_;
  delete VSUnit::default_instance_;
  delete VSUnit_reflection_;
  delete VSLegion::default_instance_;
  delete VSLegion_reflection_;
  delete VSLegionMemDetail::default_instance_;
  delete VSLegionMemDetail_reflection_;
  delete CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance_;
  delete CMD_LEGION_CAMPBATTLE_JOIN_CS_reflection_;
  delete CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance_;
  delete CMD_LEGION_CAMPBATTLE_JOIN_SC_reflection_;
  delete CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance_;
  delete CMD_LEGION_CAMPBATTLE_ENTER_CS_reflection_;
  delete CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance_;
  delete CMD_LEGION_CAMPBATTLE_BATTLE_CS_reflection_;
  delete LastFightLogItem::default_instance_;
  delete LastFightLogItem_reflection_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_reflection_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_reflection_;
  delete VSLegionBase::default_instance_;
  delete VSLegionBase_reflection_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_reflection_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_reflection_;
  delete FightRecord::default_instance_;
  delete FightRecord_reflection_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance_;
  delete CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_reflection_;
  delete CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance_;
  delete CMD_QUERY_CUR_FIGHT_CONDITION_CS_reflection_;
  delete CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance_;
  delete CMD_QUERY_CUR_FIGHT_CONDITION_SC_reflection_;
  delete CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance_;
  delete CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_reflection_;
}

void protobuf_AddDesc_GameServerExt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::GSProto::protobuf_AddDesc_GameServer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023GameServerExt.proto\022\007GSProto\032\020GameServ"
    "er.proto\"\373\001\n\036Cmd_Sc_QueryGodAnimalLevelS"
    "tep\022\022\n\ndwObjectID\030\001 \002(\r\022\023\n\013bTouchMaxLv\030\002"
    " \002(\010\0221\n\007curInfo\030\003 \002(\0132 .GSProto.GoldAnim"
    "alLevelStepInfo\0222\n\010nextInfo\030\004 \001(\0132 .GSPr"
    "oto.GoldAnimalLevelStepInfo\022+\n\rszConsume"
    "Item\030\005 \003(\0132\024.GSProto.ConsumeItem\022\034\n\024iLev"
    "elStepSilverCost\030\006 \002(\005\"Q\n\034Cmd_Cs_QueryGo"
    "dAnimalInherit\022\027\n\017dwAccepObjectID\030\001 \002(\r\022"
    "\030\n\020dwPasserObjectID\030\002 \001(\r\"\324\001\n\034Cmd_Sc_Que"
    "ryGodAnimalInherit\0222\n\017acceptPreDetail\030\001 "
    "\002(\0132\031.GSProto.GoldAnimalDetail\022/\n\014passer"
    "Detail\030\002 \001(\0132\031.GSProto.GoldAnimalDetail\022"
    "3\n\020acceptPostDetail\030\003 \001(\0132\031.GSProto.Gold"
    "AnimalDetail\022\032\n\022iInheritSilverCost\030\004 \001(\005"
    "\"O\n\032Cmd_Cs_ExeGodAnimalInherit\022\030\n\020dwPass"
    "erObjectID\030\001 \002(\r\022\027\n\017dwAccepObjectID\030\002 \002("
    "\r\"~\n\032Cmd_Sc_ExeGodAnimalInherit\022/\n\014passe"
    "rDetail\030\001 \002(\0132\031.GSProto.GoldAnimalDetail"
    "\022/\n\014acceptDetail\030\002 \002(\0132\031.GSProto.GoldAni"
    "malDetail\"9\n\032Cmd_Cs_QueryGodAnimalDetai\022"
    "\033\n\023dwGodAnimalObjectID\030\001 \002(\r\"G\n\032Cmd_Sc_Q"
    "ueryGodAnimalDetai\022)\n\006detail\030\001 \002(\0132\031.GSP"
    "roto.GoldAnimalDetail\"4\n\034CMD_GODANIMAL_D"
    "ETAIL_BYID_CS\022\024\n\014iGodAnimalID\030\001 \002(\005\"_\n\034C"
    "MD_GODANIMAL_DETAIL_BYID_SC\022\024\n\014iGodAnima"
    "lID\030\001 \002(\005\022)\n\006detail\030\002 \002(\0132\031.GSProto.Gold"
    "AnimalDetail\"+\n\025Cmd_Cs_GodAnimalTrain\022\022\n"
    "\ndwObjectID\030\001 \002(\r\"I\n\026Cmd_Sc_GodAnimalUpd"
    "ate\022/\n\nupdateInfo\030\001 \002(\0132\033.GSProto.GoldAn"
    "imalRoleBase\"4\n\036Cmd_Cs_QueryGodAnimalLev"
    "elStep\022\022\n\ndwObjectID\030\001 \002(\r\"g\n\025Cmd_Sc_Gol"
    "dAnimalList\022\030\n\020dwActiveObjectID\030\001 \002(\r\0224\n"
    "\017szGodAnimalList\030\002 \003(\0132\033.GSProto.GoldAni"
    "malRoleBase\"g\n\027CMD_NORMALSHOP_QUERY_SC\022+"
    "\n\tgoodsList\030\001 \003(\0132\030.GSProto.HonerGoodDet"
    "ail\022\037\n\027untilNextRefreshSeconds\030\002 \002(\005\"&\n\025"
    "CMD_NORMALSHOP_BUY_CS\022\r\n\005index\030\001 \002(\005\"T\n\010"
    "CampUnit\022\013\n\003iId\030\001 \002(\005\022\023\n\013strOwerName\030\002 \002"
    "(\t\022\022\n\nbCanReport\030\003 \001(\010\022\022\n\nbCanBattle\030\004 \001"
    "(\010\"\206\001\n\036CMD_QUERY_LEGION_CAMPBATTLE_SC\022%\n"
    "\nszCampList\030\001 \003(\0132\021.GSProto.CampUnit\022\017\n\007"
    "istatus\030\002 \002(\005\022\025\n\riRemaidSecond\030\003 \001(\005\022\025\n\r"
    "iHaveReportId\030\004 \001(\005\"+\n\034CMD_QUERY_CAMPBAT"
    "TLE_INFO_CS\022\013\n\003iId\030\001 \002(\005\"_\n\nLegionUnit\022\017"
    "\n\007strName\030\001 \002(\t\022\026\n\016iHaveCampCount\030\002 \002(\005\022"
    "\023\n\013iAddPercent\030\003 \002(\005\022\023\n\013iLegionIcon\030\004 \002("
    "\005\"\254\001\n\034CMD_QUERY_CAMPBATTLE_INFO_SC\022(\n\013gu"
    "ardLegion\030\001 \002(\0132\023.GSProto.LegionUnit\022)\n\014"
    "szAttackList\030\002 \003(\0132\023.GSProto.LegionUnit\022"
    "\013\n\003iId\030\003 \002(\005\022\025\n\riCanGetSilver\030\004 \002(\005\022\023\n\013i"
    "ReportCost\030\005 \002(\005\".\n\037CMD_LEGION_CAMPBATTL"
    "E_REPORT_CS\022\013\n\003iId\030\001 \002(\005\"H\n\006VSUnit\022\025\n\rst"
    "rLegionName\030\001 \002(\t\022\022\n\niStarCount\030\002 \002(\005\022\023\n"
    "\013iLegionIcon\030\003 \002(\005\"t\n\010VSLegion\022\"\n\tguardU"
    "nit\030\001 \002(\0132\017.GSProto.VSUnit\022 \n\007attUnit\030\002 "
    "\002(\0132\017.GSProto.VSUnit\022\017\n\007iCampId\030\003 \001(\005\022\021\n"
    "\tiBattleId\030\004 \001(\005\"\251\001\n\021VSLegionMemDetail\022\017"
    "\n\007iHeadId\030\001 \002(\005\022\016\n\006iLevel\030\002 \002(\005\022\017\n\007strNa"
    "me\030\003 \002(\t\022\023\n\013iFightValue\030\004 \002(\005\022\022\n\nbICanFi"
    "ght\030\005 \002(\010\022\023\n\013bIICanFight\030\006 \002(\010\022\024\n\014bIIICa"
    "nFight\030\007 \002(\010\022\016\n\006bIsNpc\030\010 \002(\010\",\n\035CMD_LEGI"
    "ON_CAMPBATTLE_JOIN_CS\022\013\n\003iId\030\001 \002(\005\"\315\001\n\035C"
    "MD_LEGION_CAMPBATTLE_JOIN_SC\022\020\n\010bIsGuard"
    "\030\001 \002(\010\022)\n\016szVSLegionList\030\002 \003(\0132\021.GSProto"
    ".VSLegion\022%\n\nselfVsInfo\030\003 \001(\0132\021.GSProto."
    "VSLegion\0220\n\014szMemberList\030\004 \003(\0132\032.GSProto"
    ".VSLegionMemDetail\022\026\n\016iRemaindSecond\030\005 \001"
    "(\005\"J\n\036CMD_LEGION_CAMPBATTLE_ENTER_CS\022\017\n\007"
    "iCampId\030\001 \002(\005\022\027\n\017strVSLegionName\030\002 \002(\t\"h"
    "\n\037CMD_LEGION_CAMPBATTLE_BATTLE_CS\022\017\n\007iCa"
    "mpId\030\001 \002(\005\022\021\n\tiBattleId\030\002 \002(\005\022\022\n\nstrMemN"
    "ame\030\003 \002(\t\022\r\n\005iStar\030\004 \002(\005\"E\n\020LastFightLog"
    "Item\022\017\n\007iCampId\030\001 \002(\005\022\020\n\010bIsGuard\030\002 \002(\010\022"
    "\016\n\006bIsWin\030\003 \002(\010\"Z\n%CMD_QUERY_CAMPBATTLE_"
    "LASTFIGHT_LOG_SC\0221\n\016szFightLogList\030\001 \003(\013"
    "2\031.GSProto.LastFightLogItem\">\n+CMD_QUERY"
    "_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS\022\017\n\007iC"
    "ampId\030\001 \002(\005\"9\n\014VSLegionBase\022)\n\016szVSLegio"
    "nList\030\001 \003(\0132\021.GSProto.VSLegion\"p\n+CMD_QU"
    "ERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC\022\025\n"
    "\rstrLegionName\030\001 \002(\t\022*\n\013vsLegionMsg\030\002 \002("
    "\0132\025.GSProto.VSLegionBase\"Y\n,CMD_QUERY_CA"
    "MPBATTLE_LASTFIGHT_DETAIL_LOG_CS\022\017\n\007iCam"
    "pId\030\001 \002(\005\022\030\n\020strAttLegionName\030\002 \002(\t\"k\n\013F"
    "ightRecord\022\023\n\013strSelfName\030\001 \002(\t\022\032\n\022stren"
    "emyLegionName\030\002 \002(\t\022\024\n\014strenemyName\030\003 \002("
    "\t\022\025\n\riGetStarCount\030\004 \002(\005\"\261\001\n,CMD_QUERY_C"
    "AMPBATTLE_LASTFIGHT_DETAIL_LOG_SC\022#\n\010vsL"
    "egion\030\001 \002(\0132\021.GSProto.VSLegion\022-\n\017selfFi"
    "ghtRecord\030\002 \003(\0132\024.GSProto.FightRecord\022-\n"
    "\017enemyFightRecod\030\003 \003(\0132\024.GSProto.FightRe"
    "cord\"3\n CMD_QUERY_CUR_FIGHT_CONDITION_CS"
    "\022\017\n\007iCampId\030\001 \002(\005\"M\n CMD_QUERY_CUR_FIGHT"
    "_CONDITION_SC\022)\n\016szVSLegionList\030\001 \003(\0132\021."
    "GSProto.VSLegion\"N\n!CMD_QUERY_CUR_FIGHT_"
    "LEGION_LOG_CS\022\017\n\007iCampId\030\001 \002(\005\022\030\n\020strAtt"
    "LegionName\030\002 \002(\t*\216\004\n\021GameServerCMD_Ext\022\032"
    "\n\024CMD_NORMALSHOP_QUERY\020\241\234\001\022\034\n\026CMD_NORMAL"
    "SHOP_REFRESH\020\242\234\001\022\030\n\022CMD_NORMALSHOP_BUY\020\243"
    "\234\001\022!\n\033CMD_QUERY_LEGION_CAMPBATTLE\020\375\216\001\022\"\n"
    "\034CMD_LEGION_CAMPBATTLE_REPORT\020\376\216\001\022 \n\032CMD"
    "_LEGION_CAMPBATTLE_JOIN\020\377\216\001\022!\n\033CMD_LEGIO"
    "N_CAMPBATTLE_ENTER\020\200\217\001\022\"\n\034CMD_LEGION_CAM"
    "PBATTLE_BATTLE\020\201\217\001\022(\n\"CMD_QUERY_CAMPBATT"
    "LE_LASTFIGHT_LOG\020\202\217\001\022#\n\035CMD_QUERY_CUR_FI"
    "GHT_CONDITION\020\203\217\001\022\037\n\031CMD_QUERY_CAMPBATTL"
    "E_INFO\020\204\217\001\022.\n(CMD_QUERY_CAMPBATTLE_LASTF"
    "IGHT_SIMPLELOG\020\205\217\001\022/\n)CMD_QUERY_CAMPBATT"
    "LE_LASTFIGHT_DETAIL_LOG\020\206\217\001\022$\n\036CMD_QUERY"
    "_CUR_FIGHT_LEGION_LOG\020\207\217\001*\215\001\n\013enCampStat"
    "e\022\017\n\013enStateNULL\020\000\022\026\n\022enStateBeforReport"
    "\020\001\022\023\n\017enStateInReport\020\002\022\023\n\017enStateInBatt"
    "le\020\003\022\026\n\022enStateAfterBattle\020\004\022\023\n\017enStateN"
    "oBattle\020\005", 4569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameServerExt.proto", &protobuf_RegisterTypes);
  Cmd_Sc_QueryGodAnimalLevelStep::default_instance_ = new Cmd_Sc_QueryGodAnimalLevelStep();
  Cmd_Cs_QueryGodAnimalInherit::default_instance_ = new Cmd_Cs_QueryGodAnimalInherit();
  Cmd_Sc_QueryGodAnimalInherit::default_instance_ = new Cmd_Sc_QueryGodAnimalInherit();
  Cmd_Cs_ExeGodAnimalInherit::default_instance_ = new Cmd_Cs_ExeGodAnimalInherit();
  Cmd_Sc_ExeGodAnimalInherit::default_instance_ = new Cmd_Sc_ExeGodAnimalInherit();
  Cmd_Cs_QueryGodAnimalDetai::default_instance_ = new Cmd_Cs_QueryGodAnimalDetai();
  Cmd_Sc_QueryGodAnimalDetai::default_instance_ = new Cmd_Sc_QueryGodAnimalDetai();
  CMD_GODANIMAL_DETAIL_BYID_CS::default_instance_ = new CMD_GODANIMAL_DETAIL_BYID_CS();
  CMD_GODANIMAL_DETAIL_BYID_SC::default_instance_ = new CMD_GODANIMAL_DETAIL_BYID_SC();
  Cmd_Cs_GodAnimalTrain::default_instance_ = new Cmd_Cs_GodAnimalTrain();
  Cmd_Sc_GodAnimalUpdate::default_instance_ = new Cmd_Sc_GodAnimalUpdate();
  Cmd_Cs_QueryGodAnimalLevelStep::default_instance_ = new Cmd_Cs_QueryGodAnimalLevelStep();
  Cmd_Sc_GoldAnimalList::default_instance_ = new Cmd_Sc_GoldAnimalList();
  CMD_NORMALSHOP_QUERY_SC::default_instance_ = new CMD_NORMALSHOP_QUERY_SC();
  CMD_NORMALSHOP_BUY_CS::default_instance_ = new CMD_NORMALSHOP_BUY_CS();
  CampUnit::default_instance_ = new CampUnit();
  CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance_ = new CMD_QUERY_LEGION_CAMPBATTLE_SC();
  CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance_ = new CMD_QUERY_CAMPBATTLE_INFO_CS();
  LegionUnit::default_instance_ = new LegionUnit();
  CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance_ = new CMD_QUERY_CAMPBATTLE_INFO_SC();
  CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance_ = new CMD_LEGION_CAMPBATTLE_REPORT_CS();
  VSUnit::default_instance_ = new VSUnit();
  VSLegion::default_instance_ = new VSLegion();
  VSLegionMemDetail::default_instance_ = new VSLegionMemDetail();
  CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance_ = new CMD_LEGION_CAMPBATTLE_JOIN_CS();
  CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance_ = new CMD_LEGION_CAMPBATTLE_JOIN_SC();
  CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance_ = new CMD_LEGION_CAMPBATTLE_ENTER_CS();
  CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance_ = new CMD_LEGION_CAMPBATTLE_BATTLE_CS();
  LastFightLogItem::default_instance_ = new LastFightLogItem();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance_ = new CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance_ = new CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS();
  VSLegionBase::default_instance_ = new VSLegionBase();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance_ = new CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance_ = new CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS();
  FightRecord::default_instance_ = new FightRecord();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance_ = new CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC();
  CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance_ = new CMD_QUERY_CUR_FIGHT_CONDITION_CS();
  CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance_ = new CMD_QUERY_CUR_FIGHT_CONDITION_SC();
  CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance_ = new CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS();
  Cmd_Sc_QueryGodAnimalLevelStep::default_instance_->InitAsDefaultInstance();
  Cmd_Cs_QueryGodAnimalInherit::default_instance_->InitAsDefaultInstance();
  Cmd_Sc_QueryGodAnimalInherit::default_instance_->InitAsDefaultInstance();
  Cmd_Cs_ExeGodAnimalInherit::default_instance_->InitAsDefaultInstance();
  Cmd_Sc_ExeGodAnimalInherit::default_instance_->InitAsDefaultInstance();
  Cmd_Cs_QueryGodAnimalDetai::default_instance_->InitAsDefaultInstance();
  Cmd_Sc_QueryGodAnimalDetai::default_instance_->InitAsDefaultInstance();
  CMD_GODANIMAL_DETAIL_BYID_CS::default_instance_->InitAsDefaultInstance();
  CMD_GODANIMAL_DETAIL_BYID_SC::default_instance_->InitAsDefaultInstance();
  Cmd_Cs_GodAnimalTrain::default_instance_->InitAsDefaultInstance();
  Cmd_Sc_GodAnimalUpdate::default_instance_->InitAsDefaultInstance();
  Cmd_Cs_QueryGodAnimalLevelStep::default_instance_->InitAsDefaultInstance();
  Cmd_Sc_GoldAnimalList::default_instance_->InitAsDefaultInstance();
  CMD_NORMALSHOP_QUERY_SC::default_instance_->InitAsDefaultInstance();
  CMD_NORMALSHOP_BUY_CS::default_instance_->InitAsDefaultInstance();
  CampUnit::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance_->InitAsDefaultInstance();
  LegionUnit::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance_->InitAsDefaultInstance();
  CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance_->InitAsDefaultInstance();
  VSUnit::default_instance_->InitAsDefaultInstance();
  VSLegion::default_instance_->InitAsDefaultInstance();
  VSLegionMemDetail::default_instance_->InitAsDefaultInstance();
  CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance_->InitAsDefaultInstance();
  CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance_->InitAsDefaultInstance();
  CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance_->InitAsDefaultInstance();
  CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance_->InitAsDefaultInstance();
  LastFightLogItem::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance_->InitAsDefaultInstance();
  VSLegionBase::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance_->InitAsDefaultInstance();
  FightRecord::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance_->InitAsDefaultInstance();
  CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameServerExt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameServerExt_2eproto {
  StaticDescriptorInitializer_GameServerExt_2eproto() {
    protobuf_AddDesc_GameServerExt_2eproto();
  }
} static_descriptor_initializer_GameServerExt_2eproto_;
const ::google::protobuf::EnumDescriptor* GameServerCMD_Ext_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerCMD_Ext_descriptor_;
}
bool GameServerCMD_Ext_IsValid(int value) {
  switch(value) {
    case 18301:
    case 18302:
    case 18303:
    case 18304:
    case 18305:
    case 18306:
    case 18307:
    case 18308:
    case 18309:
    case 18310:
    case 18311:
    case 20001:
    case 20002:
    case 20003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enCampState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enCampState_descriptor_;
}
bool enCampState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Sc_QueryGodAnimalLevelStep::kDwObjectIDFieldNumber;
const int Cmd_Sc_QueryGodAnimalLevelStep::kBTouchMaxLvFieldNumber;
const int Cmd_Sc_QueryGodAnimalLevelStep::kCurInfoFieldNumber;
const int Cmd_Sc_QueryGodAnimalLevelStep::kNextInfoFieldNumber;
const int Cmd_Sc_QueryGodAnimalLevelStep::kSzConsumeItemFieldNumber;
const int Cmd_Sc_QueryGodAnimalLevelStep::kILevelStepSilverCostFieldNumber;
#endif  // !_MSC_VER

Cmd_Sc_QueryGodAnimalLevelStep::Cmd_Sc_QueryGodAnimalLevelStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Sc_QueryGodAnimalLevelStep::InitAsDefaultInstance() {
  curinfo_ = const_cast< ::GSProto::GoldAnimalLevelStepInfo*>(&::GSProto::GoldAnimalLevelStepInfo::default_instance());
  nextinfo_ = const_cast< ::GSProto::GoldAnimalLevelStepInfo*>(&::GSProto::GoldAnimalLevelStepInfo::default_instance());
}

Cmd_Sc_QueryGodAnimalLevelStep::Cmd_Sc_QueryGodAnimalLevelStep(const Cmd_Sc_QueryGodAnimalLevelStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Sc_QueryGodAnimalLevelStep::SharedCtor() {
  _cached_size_ = 0;
  dwobjectid_ = 0u;
  btouchmaxlv_ = false;
  curinfo_ = NULL;
  nextinfo_ = NULL;
  ilevelstepsilvercost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Sc_QueryGodAnimalLevelStep::~Cmd_Sc_QueryGodAnimalLevelStep() {
  SharedDtor();
}

void Cmd_Sc_QueryGodAnimalLevelStep::SharedDtor() {
  if (this != default_instance_) {
    delete curinfo_;
    delete nextinfo_;
  }
}

void Cmd_Sc_QueryGodAnimalLevelStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Sc_QueryGodAnimalLevelStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Sc_QueryGodAnimalLevelStep_descriptor_;
}

const Cmd_Sc_QueryGodAnimalLevelStep& Cmd_Sc_QueryGodAnimalLevelStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Sc_QueryGodAnimalLevelStep* Cmd_Sc_QueryGodAnimalLevelStep::default_instance_ = NULL;

Cmd_Sc_QueryGodAnimalLevelStep* Cmd_Sc_QueryGodAnimalLevelStep::New() const {
  return new Cmd_Sc_QueryGodAnimalLevelStep;
}

void Cmd_Sc_QueryGodAnimalLevelStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwobjectid_ = 0u;
    btouchmaxlv_ = false;
    if (has_curinfo()) {
      if (curinfo_ != NULL) curinfo_->::GSProto::GoldAnimalLevelStepInfo::Clear();
    }
    if (has_nextinfo()) {
      if (nextinfo_ != NULL) nextinfo_->::GSProto::GoldAnimalLevelStepInfo::Clear();
    }
    ilevelstepsilvercost_ = 0;
  }
  szconsumeitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Sc_QueryGodAnimalLevelStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwobjectid_)));
          set_has_dwobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bTouchMaxLv;
        break;
      }

      // required bool bTouchMaxLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bTouchMaxLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btouchmaxlv_)));
          set_has_btouchmaxlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_curInfo;
        break;
      }

      // required .GSProto.GoldAnimalLevelStepInfo curInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nextInfo;
        break;
      }

      // optional .GSProto.GoldAnimalLevelStepInfo nextInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_szConsumeItem;
        break;
      }

      // repeated .GSProto.ConsumeItem szConsumeItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szConsumeItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szconsumeitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_szConsumeItem;
        if (input->ExpectTag(48)) goto parse_iLevelStepSilverCost;
        break;
      }

      // required int32 iLevelStepSilverCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLevelStepSilverCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilevelstepsilvercost_)));
          set_has_ilevelstepsilvercost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Sc_QueryGodAnimalLevelStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwObjectID = 1;
  if (has_dwobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwobjectid(), output);
  }

  // required bool bTouchMaxLv = 2;
  if (has_btouchmaxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->btouchmaxlv(), output);
  }

  // required .GSProto.GoldAnimalLevelStepInfo curInfo = 3;
  if (has_curinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->curinfo(), output);
  }

  // optional .GSProto.GoldAnimalLevelStepInfo nextInfo = 4;
  if (has_nextinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nextinfo(), output);
  }

  // repeated .GSProto.ConsumeItem szConsumeItem = 5;
  for (int i = 0; i < this->szconsumeitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->szconsumeitem(i), output);
  }

  // required int32 iLevelStepSilverCost = 6;
  if (has_ilevelstepsilvercost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ilevelstepsilvercost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Sc_QueryGodAnimalLevelStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwObjectID = 1;
  if (has_dwobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwobjectid(), target);
  }

  // required bool bTouchMaxLv = 2;
  if (has_btouchmaxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->btouchmaxlv(), target);
  }

  // required .GSProto.GoldAnimalLevelStepInfo curInfo = 3;
  if (has_curinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->curinfo(), target);
  }

  // optional .GSProto.GoldAnimalLevelStepInfo nextInfo = 4;
  if (has_nextinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nextinfo(), target);
  }

  // repeated .GSProto.ConsumeItem szConsumeItem = 5;
  for (int i = 0; i < this->szconsumeitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->szconsumeitem(i), target);
  }

  // required int32 iLevelStepSilverCost = 6;
  if (has_ilevelstepsilvercost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ilevelstepsilvercost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Sc_QueryGodAnimalLevelStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwObjectID = 1;
    if (has_dwobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwobjectid());
    }

    // required bool bTouchMaxLv = 2;
    if (has_btouchmaxlv()) {
      total_size += 1 + 1;
    }

    // required .GSProto.GoldAnimalLevelStepInfo curInfo = 3;
    if (has_curinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curinfo());
    }

    // optional .GSProto.GoldAnimalLevelStepInfo nextInfo = 4;
    if (has_nextinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextinfo());
    }

    // required int32 iLevelStepSilverCost = 6;
    if (has_ilevelstepsilvercost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilevelstepsilvercost());
    }

  }
  // repeated .GSProto.ConsumeItem szConsumeItem = 5;
  total_size += 1 * this->szconsumeitem_size();
  for (int i = 0; i < this->szconsumeitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szconsumeitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Sc_QueryGodAnimalLevelStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Sc_QueryGodAnimalLevelStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Sc_QueryGodAnimalLevelStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Sc_QueryGodAnimalLevelStep::MergeFrom(const Cmd_Sc_QueryGodAnimalLevelStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  szconsumeitem_.MergeFrom(from.szconsumeitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwobjectid()) {
      set_dwobjectid(from.dwobjectid());
    }
    if (from.has_btouchmaxlv()) {
      set_btouchmaxlv(from.btouchmaxlv());
    }
    if (from.has_curinfo()) {
      mutable_curinfo()->::GSProto::GoldAnimalLevelStepInfo::MergeFrom(from.curinfo());
    }
    if (from.has_nextinfo()) {
      mutable_nextinfo()->::GSProto::GoldAnimalLevelStepInfo::MergeFrom(from.nextinfo());
    }
    if (from.has_ilevelstepsilvercost()) {
      set_ilevelstepsilvercost(from.ilevelstepsilvercost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Sc_QueryGodAnimalLevelStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Sc_QueryGodAnimalLevelStep::CopyFrom(const Cmd_Sc_QueryGodAnimalLevelStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Sc_QueryGodAnimalLevelStep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (has_curinfo()) {
    if (!this->curinfo().IsInitialized()) return false;
  }
  if (has_nextinfo()) {
    if (!this->nextinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < szconsumeitem_size(); i++) {
    if (!this->szconsumeitem(i).IsInitialized()) return false;
  }
  return true;
}

void Cmd_Sc_QueryGodAnimalLevelStep::Swap(Cmd_Sc_QueryGodAnimalLevelStep* other) {
  if (other != this) {
    std::swap(dwobjectid_, other->dwobjectid_);
    std::swap(btouchmaxlv_, other->btouchmaxlv_);
    std::swap(curinfo_, other->curinfo_);
    std::swap(nextinfo_, other->nextinfo_);
    szconsumeitem_.Swap(&other->szconsumeitem_);
    std::swap(ilevelstepsilvercost_, other->ilevelstepsilvercost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Sc_QueryGodAnimalLevelStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Sc_QueryGodAnimalLevelStep_descriptor_;
  metadata.reflection = Cmd_Sc_QueryGodAnimalLevelStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Cs_QueryGodAnimalInherit::kDwAccepObjectIDFieldNumber;
const int Cmd_Cs_QueryGodAnimalInherit::kDwPasserObjectIDFieldNumber;
#endif  // !_MSC_VER

Cmd_Cs_QueryGodAnimalInherit::Cmd_Cs_QueryGodAnimalInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Cs_QueryGodAnimalInherit::InitAsDefaultInstance() {
}

Cmd_Cs_QueryGodAnimalInherit::Cmd_Cs_QueryGodAnimalInherit(const Cmd_Cs_QueryGodAnimalInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Cs_QueryGodAnimalInherit::SharedCtor() {
  _cached_size_ = 0;
  dwaccepobjectid_ = 0u;
  dwpasserobjectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Cs_QueryGodAnimalInherit::~Cmd_Cs_QueryGodAnimalInherit() {
  SharedDtor();
}

void Cmd_Cs_QueryGodAnimalInherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cmd_Cs_QueryGodAnimalInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Cs_QueryGodAnimalInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Cs_QueryGodAnimalInherit_descriptor_;
}

const Cmd_Cs_QueryGodAnimalInherit& Cmd_Cs_QueryGodAnimalInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Cs_QueryGodAnimalInherit* Cmd_Cs_QueryGodAnimalInherit::default_instance_ = NULL;

Cmd_Cs_QueryGodAnimalInherit* Cmd_Cs_QueryGodAnimalInherit::New() const {
  return new Cmd_Cs_QueryGodAnimalInherit;
}

void Cmd_Cs_QueryGodAnimalInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwaccepobjectid_ = 0u;
    dwpasserobjectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Cs_QueryGodAnimalInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwAccepObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwaccepobjectid_)));
          set_has_dwaccepobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwPasserObjectID;
        break;
      }

      // optional uint32 dwPasserObjectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPasserObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwpasserobjectid_)));
          set_has_dwpasserobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Cs_QueryGodAnimalInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwAccepObjectID = 1;
  if (has_dwaccepobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwaccepobjectid(), output);
  }

  // optional uint32 dwPasserObjectID = 2;
  if (has_dwpasserobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dwpasserobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Cs_QueryGodAnimalInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwAccepObjectID = 1;
  if (has_dwaccepobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwaccepobjectid(), target);
  }

  // optional uint32 dwPasserObjectID = 2;
  if (has_dwpasserobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dwpasserobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Cs_QueryGodAnimalInherit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwAccepObjectID = 1;
    if (has_dwaccepobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwaccepobjectid());
    }

    // optional uint32 dwPasserObjectID = 2;
    if (has_dwpasserobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwpasserobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Cs_QueryGodAnimalInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Cs_QueryGodAnimalInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Cs_QueryGodAnimalInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Cs_QueryGodAnimalInherit::MergeFrom(const Cmd_Cs_QueryGodAnimalInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwaccepobjectid()) {
      set_dwaccepobjectid(from.dwaccepobjectid());
    }
    if (from.has_dwpasserobjectid()) {
      set_dwpasserobjectid(from.dwpasserobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Cs_QueryGodAnimalInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Cs_QueryGodAnimalInherit::CopyFrom(const Cmd_Cs_QueryGodAnimalInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Cs_QueryGodAnimalInherit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cmd_Cs_QueryGodAnimalInherit::Swap(Cmd_Cs_QueryGodAnimalInherit* other) {
  if (other != this) {
    std::swap(dwaccepobjectid_, other->dwaccepobjectid_);
    std::swap(dwpasserobjectid_, other->dwpasserobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Cs_QueryGodAnimalInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Cs_QueryGodAnimalInherit_descriptor_;
  metadata.reflection = Cmd_Cs_QueryGodAnimalInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Sc_QueryGodAnimalInherit::kAcceptPreDetailFieldNumber;
const int Cmd_Sc_QueryGodAnimalInherit::kPasserDetailFieldNumber;
const int Cmd_Sc_QueryGodAnimalInherit::kAcceptPostDetailFieldNumber;
const int Cmd_Sc_QueryGodAnimalInherit::kIInheritSilverCostFieldNumber;
#endif  // !_MSC_VER

Cmd_Sc_QueryGodAnimalInherit::Cmd_Sc_QueryGodAnimalInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Sc_QueryGodAnimalInherit::InitAsDefaultInstance() {
  acceptpredetail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
  passerdetail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
  acceptpostdetail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
}

Cmd_Sc_QueryGodAnimalInherit::Cmd_Sc_QueryGodAnimalInherit(const Cmd_Sc_QueryGodAnimalInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Sc_QueryGodAnimalInherit::SharedCtor() {
  _cached_size_ = 0;
  acceptpredetail_ = NULL;
  passerdetail_ = NULL;
  acceptpostdetail_ = NULL;
  iinheritsilvercost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Sc_QueryGodAnimalInherit::~Cmd_Sc_QueryGodAnimalInherit() {
  SharedDtor();
}

void Cmd_Sc_QueryGodAnimalInherit::SharedDtor() {
  if (this != default_instance_) {
    delete acceptpredetail_;
    delete passerdetail_;
    delete acceptpostdetail_;
  }
}

void Cmd_Sc_QueryGodAnimalInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Sc_QueryGodAnimalInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Sc_QueryGodAnimalInherit_descriptor_;
}

const Cmd_Sc_QueryGodAnimalInherit& Cmd_Sc_QueryGodAnimalInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Sc_QueryGodAnimalInherit* Cmd_Sc_QueryGodAnimalInherit::default_instance_ = NULL;

Cmd_Sc_QueryGodAnimalInherit* Cmd_Sc_QueryGodAnimalInherit::New() const {
  return new Cmd_Sc_QueryGodAnimalInherit;
}

void Cmd_Sc_QueryGodAnimalInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acceptpredetail()) {
      if (acceptpredetail_ != NULL) acceptpredetail_->::GSProto::GoldAnimalDetail::Clear();
    }
    if (has_passerdetail()) {
      if (passerdetail_ != NULL) passerdetail_->::GSProto::GoldAnimalDetail::Clear();
    }
    if (has_acceptpostdetail()) {
      if (acceptpostdetail_ != NULL) acceptpostdetail_->::GSProto::GoldAnimalDetail::Clear();
    }
    iinheritsilvercost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Sc_QueryGodAnimalInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.GoldAnimalDetail acceptPreDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptpredetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passerDetail;
        break;
      }

      // optional .GSProto.GoldAnimalDetail passerDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passerDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passerdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acceptPostDetail;
        break;
      }

      // optional .GSProto.GoldAnimalDetail acceptPostDetail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptPostDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptpostdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iInheritSilverCost;
        break;
      }

      // optional int32 iInheritSilverCost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iInheritSilverCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iinheritsilvercost_)));
          set_has_iinheritsilvercost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Sc_QueryGodAnimalInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.GoldAnimalDetail acceptPreDetail = 1;
  if (has_acceptpredetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acceptpredetail(), output);
  }

  // optional .GSProto.GoldAnimalDetail passerDetail = 2;
  if (has_passerdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->passerdetail(), output);
  }

  // optional .GSProto.GoldAnimalDetail acceptPostDetail = 3;
  if (has_acceptpostdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->acceptpostdetail(), output);
  }

  // optional int32 iInheritSilverCost = 4;
  if (has_iinheritsilvercost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iinheritsilvercost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Sc_QueryGodAnimalInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.GoldAnimalDetail acceptPreDetail = 1;
  if (has_acceptpredetail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acceptpredetail(), target);
  }

  // optional .GSProto.GoldAnimalDetail passerDetail = 2;
  if (has_passerdetail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->passerdetail(), target);
  }

  // optional .GSProto.GoldAnimalDetail acceptPostDetail = 3;
  if (has_acceptpostdetail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->acceptpostdetail(), target);
  }

  // optional int32 iInheritSilverCost = 4;
  if (has_iinheritsilvercost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iinheritsilvercost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Sc_QueryGodAnimalInherit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.GoldAnimalDetail acceptPreDetail = 1;
    if (has_acceptpredetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceptpredetail());
    }

    // optional .GSProto.GoldAnimalDetail passerDetail = 2;
    if (has_passerdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passerdetail());
    }

    // optional .GSProto.GoldAnimalDetail acceptPostDetail = 3;
    if (has_acceptpostdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceptpostdetail());
    }

    // optional int32 iInheritSilverCost = 4;
    if (has_iinheritsilvercost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iinheritsilvercost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Sc_QueryGodAnimalInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Sc_QueryGodAnimalInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Sc_QueryGodAnimalInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Sc_QueryGodAnimalInherit::MergeFrom(const Cmd_Sc_QueryGodAnimalInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acceptpredetail()) {
      mutable_acceptpredetail()->::GSProto::GoldAnimalDetail::MergeFrom(from.acceptpredetail());
    }
    if (from.has_passerdetail()) {
      mutable_passerdetail()->::GSProto::GoldAnimalDetail::MergeFrom(from.passerdetail());
    }
    if (from.has_acceptpostdetail()) {
      mutable_acceptpostdetail()->::GSProto::GoldAnimalDetail::MergeFrom(from.acceptpostdetail());
    }
    if (from.has_iinheritsilvercost()) {
      set_iinheritsilvercost(from.iinheritsilvercost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Sc_QueryGodAnimalInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Sc_QueryGodAnimalInherit::CopyFrom(const Cmd_Sc_QueryGodAnimalInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Sc_QueryGodAnimalInherit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acceptpredetail()) {
    if (!this->acceptpredetail().IsInitialized()) return false;
  }
  if (has_passerdetail()) {
    if (!this->passerdetail().IsInitialized()) return false;
  }
  if (has_acceptpostdetail()) {
    if (!this->acceptpostdetail().IsInitialized()) return false;
  }
  return true;
}

void Cmd_Sc_QueryGodAnimalInherit::Swap(Cmd_Sc_QueryGodAnimalInherit* other) {
  if (other != this) {
    std::swap(acceptpredetail_, other->acceptpredetail_);
    std::swap(passerdetail_, other->passerdetail_);
    std::swap(acceptpostdetail_, other->acceptpostdetail_);
    std::swap(iinheritsilvercost_, other->iinheritsilvercost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Sc_QueryGodAnimalInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Sc_QueryGodAnimalInherit_descriptor_;
  metadata.reflection = Cmd_Sc_QueryGodAnimalInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Cs_ExeGodAnimalInherit::kDwPasserObjectIDFieldNumber;
const int Cmd_Cs_ExeGodAnimalInherit::kDwAccepObjectIDFieldNumber;
#endif  // !_MSC_VER

Cmd_Cs_ExeGodAnimalInherit::Cmd_Cs_ExeGodAnimalInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Cs_ExeGodAnimalInherit::InitAsDefaultInstance() {
}

Cmd_Cs_ExeGodAnimalInherit::Cmd_Cs_ExeGodAnimalInherit(const Cmd_Cs_ExeGodAnimalInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Cs_ExeGodAnimalInherit::SharedCtor() {
  _cached_size_ = 0;
  dwpasserobjectid_ = 0u;
  dwaccepobjectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Cs_ExeGodAnimalInherit::~Cmd_Cs_ExeGodAnimalInherit() {
  SharedDtor();
}

void Cmd_Cs_ExeGodAnimalInherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cmd_Cs_ExeGodAnimalInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Cs_ExeGodAnimalInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Cs_ExeGodAnimalInherit_descriptor_;
}

const Cmd_Cs_ExeGodAnimalInherit& Cmd_Cs_ExeGodAnimalInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Cs_ExeGodAnimalInherit* Cmd_Cs_ExeGodAnimalInherit::default_instance_ = NULL;

Cmd_Cs_ExeGodAnimalInherit* Cmd_Cs_ExeGodAnimalInherit::New() const {
  return new Cmd_Cs_ExeGodAnimalInherit;
}

void Cmd_Cs_ExeGodAnimalInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwpasserobjectid_ = 0u;
    dwaccepobjectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Cs_ExeGodAnimalInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwPasserObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwpasserobjectid_)));
          set_has_dwpasserobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwAccepObjectID;
        break;
      }

      // required uint32 dwAccepObjectID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwAccepObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwaccepobjectid_)));
          set_has_dwaccepobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Cs_ExeGodAnimalInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwPasserObjectID = 1;
  if (has_dwpasserobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwpasserobjectid(), output);
  }

  // required uint32 dwAccepObjectID = 2;
  if (has_dwaccepobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dwaccepobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Cs_ExeGodAnimalInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwPasserObjectID = 1;
  if (has_dwpasserobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwpasserobjectid(), target);
  }

  // required uint32 dwAccepObjectID = 2;
  if (has_dwaccepobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dwaccepobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Cs_ExeGodAnimalInherit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwPasserObjectID = 1;
    if (has_dwpasserobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwpasserobjectid());
    }

    // required uint32 dwAccepObjectID = 2;
    if (has_dwaccepobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwaccepobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Cs_ExeGodAnimalInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Cs_ExeGodAnimalInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Cs_ExeGodAnimalInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Cs_ExeGodAnimalInherit::MergeFrom(const Cmd_Cs_ExeGodAnimalInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwpasserobjectid()) {
      set_dwpasserobjectid(from.dwpasserobjectid());
    }
    if (from.has_dwaccepobjectid()) {
      set_dwaccepobjectid(from.dwaccepobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Cs_ExeGodAnimalInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Cs_ExeGodAnimalInherit::CopyFrom(const Cmd_Cs_ExeGodAnimalInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Cs_ExeGodAnimalInherit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Cmd_Cs_ExeGodAnimalInherit::Swap(Cmd_Cs_ExeGodAnimalInherit* other) {
  if (other != this) {
    std::swap(dwpasserobjectid_, other->dwpasserobjectid_);
    std::swap(dwaccepobjectid_, other->dwaccepobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Cs_ExeGodAnimalInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Cs_ExeGodAnimalInherit_descriptor_;
  metadata.reflection = Cmd_Cs_ExeGodAnimalInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Sc_ExeGodAnimalInherit::kPasserDetailFieldNumber;
const int Cmd_Sc_ExeGodAnimalInherit::kAcceptDetailFieldNumber;
#endif  // !_MSC_VER

Cmd_Sc_ExeGodAnimalInherit::Cmd_Sc_ExeGodAnimalInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Sc_ExeGodAnimalInherit::InitAsDefaultInstance() {
  passerdetail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
  acceptdetail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
}

Cmd_Sc_ExeGodAnimalInherit::Cmd_Sc_ExeGodAnimalInherit(const Cmd_Sc_ExeGodAnimalInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Sc_ExeGodAnimalInherit::SharedCtor() {
  _cached_size_ = 0;
  passerdetail_ = NULL;
  acceptdetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Sc_ExeGodAnimalInherit::~Cmd_Sc_ExeGodAnimalInherit() {
  SharedDtor();
}

void Cmd_Sc_ExeGodAnimalInherit::SharedDtor() {
  if (this != default_instance_) {
    delete passerdetail_;
    delete acceptdetail_;
  }
}

void Cmd_Sc_ExeGodAnimalInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Sc_ExeGodAnimalInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Sc_ExeGodAnimalInherit_descriptor_;
}

const Cmd_Sc_ExeGodAnimalInherit& Cmd_Sc_ExeGodAnimalInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Sc_ExeGodAnimalInherit* Cmd_Sc_ExeGodAnimalInherit::default_instance_ = NULL;

Cmd_Sc_ExeGodAnimalInherit* Cmd_Sc_ExeGodAnimalInherit::New() const {
  return new Cmd_Sc_ExeGodAnimalInherit;
}

void Cmd_Sc_ExeGodAnimalInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_passerdetail()) {
      if (passerdetail_ != NULL) passerdetail_->::GSProto::GoldAnimalDetail::Clear();
    }
    if (has_acceptdetail()) {
      if (acceptdetail_ != NULL) acceptdetail_->::GSProto::GoldAnimalDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Sc_ExeGodAnimalInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.GoldAnimalDetail passerDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passerdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acceptDetail;
        break;
      }

      // required .GSProto.GoldAnimalDetail acceptDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceptdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Sc_ExeGodAnimalInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.GoldAnimalDetail passerDetail = 1;
  if (has_passerdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->passerdetail(), output);
  }

  // required .GSProto.GoldAnimalDetail acceptDetail = 2;
  if (has_acceptdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acceptdetail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Sc_ExeGodAnimalInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.GoldAnimalDetail passerDetail = 1;
  if (has_passerdetail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->passerdetail(), target);
  }

  // required .GSProto.GoldAnimalDetail acceptDetail = 2;
  if (has_acceptdetail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acceptdetail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Sc_ExeGodAnimalInherit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.GoldAnimalDetail passerDetail = 1;
    if (has_passerdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passerdetail());
    }

    // required .GSProto.GoldAnimalDetail acceptDetail = 2;
    if (has_acceptdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceptdetail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Sc_ExeGodAnimalInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Sc_ExeGodAnimalInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Sc_ExeGodAnimalInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Sc_ExeGodAnimalInherit::MergeFrom(const Cmd_Sc_ExeGodAnimalInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passerdetail()) {
      mutable_passerdetail()->::GSProto::GoldAnimalDetail::MergeFrom(from.passerdetail());
    }
    if (from.has_acceptdetail()) {
      mutable_acceptdetail()->::GSProto::GoldAnimalDetail::MergeFrom(from.acceptdetail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Sc_ExeGodAnimalInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Sc_ExeGodAnimalInherit::CopyFrom(const Cmd_Sc_ExeGodAnimalInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Sc_ExeGodAnimalInherit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_passerdetail()) {
    if (!this->passerdetail().IsInitialized()) return false;
  }
  if (has_acceptdetail()) {
    if (!this->acceptdetail().IsInitialized()) return false;
  }
  return true;
}

void Cmd_Sc_ExeGodAnimalInherit::Swap(Cmd_Sc_ExeGodAnimalInherit* other) {
  if (other != this) {
    std::swap(passerdetail_, other->passerdetail_);
    std::swap(acceptdetail_, other->acceptdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Sc_ExeGodAnimalInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Sc_ExeGodAnimalInherit_descriptor_;
  metadata.reflection = Cmd_Sc_ExeGodAnimalInherit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Cs_QueryGodAnimalDetai::kDwGodAnimalObjectIDFieldNumber;
#endif  // !_MSC_VER

Cmd_Cs_QueryGodAnimalDetai::Cmd_Cs_QueryGodAnimalDetai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Cs_QueryGodAnimalDetai::InitAsDefaultInstance() {
}

Cmd_Cs_QueryGodAnimalDetai::Cmd_Cs_QueryGodAnimalDetai(const Cmd_Cs_QueryGodAnimalDetai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Cs_QueryGodAnimalDetai::SharedCtor() {
  _cached_size_ = 0;
  dwgodanimalobjectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Cs_QueryGodAnimalDetai::~Cmd_Cs_QueryGodAnimalDetai() {
  SharedDtor();
}

void Cmd_Cs_QueryGodAnimalDetai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cmd_Cs_QueryGodAnimalDetai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Cs_QueryGodAnimalDetai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Cs_QueryGodAnimalDetai_descriptor_;
}

const Cmd_Cs_QueryGodAnimalDetai& Cmd_Cs_QueryGodAnimalDetai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Cs_QueryGodAnimalDetai* Cmd_Cs_QueryGodAnimalDetai::default_instance_ = NULL;

Cmd_Cs_QueryGodAnimalDetai* Cmd_Cs_QueryGodAnimalDetai::New() const {
  return new Cmd_Cs_QueryGodAnimalDetai;
}

void Cmd_Cs_QueryGodAnimalDetai::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwgodanimalobjectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Cs_QueryGodAnimalDetai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwGodAnimalObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwgodanimalobjectid_)));
          set_has_dwgodanimalobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Cs_QueryGodAnimalDetai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwGodAnimalObjectID = 1;
  if (has_dwgodanimalobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwgodanimalobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Cs_QueryGodAnimalDetai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwGodAnimalObjectID = 1;
  if (has_dwgodanimalobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwgodanimalobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Cs_QueryGodAnimalDetai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwGodAnimalObjectID = 1;
    if (has_dwgodanimalobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwgodanimalobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Cs_QueryGodAnimalDetai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Cs_QueryGodAnimalDetai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Cs_QueryGodAnimalDetai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Cs_QueryGodAnimalDetai::MergeFrom(const Cmd_Cs_QueryGodAnimalDetai& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwgodanimalobjectid()) {
      set_dwgodanimalobjectid(from.dwgodanimalobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Cs_QueryGodAnimalDetai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Cs_QueryGodAnimalDetai::CopyFrom(const Cmd_Cs_QueryGodAnimalDetai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Cs_QueryGodAnimalDetai::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cmd_Cs_QueryGodAnimalDetai::Swap(Cmd_Cs_QueryGodAnimalDetai* other) {
  if (other != this) {
    std::swap(dwgodanimalobjectid_, other->dwgodanimalobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Cs_QueryGodAnimalDetai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Cs_QueryGodAnimalDetai_descriptor_;
  metadata.reflection = Cmd_Cs_QueryGodAnimalDetai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Sc_QueryGodAnimalDetai::kDetailFieldNumber;
#endif  // !_MSC_VER

Cmd_Sc_QueryGodAnimalDetai::Cmd_Sc_QueryGodAnimalDetai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Sc_QueryGodAnimalDetai::InitAsDefaultInstance() {
  detail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
}

Cmd_Sc_QueryGodAnimalDetai::Cmd_Sc_QueryGodAnimalDetai(const Cmd_Sc_QueryGodAnimalDetai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Sc_QueryGodAnimalDetai::SharedCtor() {
  _cached_size_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Sc_QueryGodAnimalDetai::~Cmd_Sc_QueryGodAnimalDetai() {
  SharedDtor();
}

void Cmd_Sc_QueryGodAnimalDetai::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Cmd_Sc_QueryGodAnimalDetai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Sc_QueryGodAnimalDetai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Sc_QueryGodAnimalDetai_descriptor_;
}

const Cmd_Sc_QueryGodAnimalDetai& Cmd_Sc_QueryGodAnimalDetai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Sc_QueryGodAnimalDetai* Cmd_Sc_QueryGodAnimalDetai::default_instance_ = NULL;

Cmd_Sc_QueryGodAnimalDetai* Cmd_Sc_QueryGodAnimalDetai::New() const {
  return new Cmd_Sc_QueryGodAnimalDetai;
}

void Cmd_Sc_QueryGodAnimalDetai::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_detail()) {
      if (detail_ != NULL) detail_->::GSProto::GoldAnimalDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Sc_QueryGodAnimalDetai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.GoldAnimalDetail detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Sc_QueryGodAnimalDetai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.GoldAnimalDetail detail = 1;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Sc_QueryGodAnimalDetai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.GoldAnimalDetail detail = 1;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Sc_QueryGodAnimalDetai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.GoldAnimalDetail detail = 1;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Sc_QueryGodAnimalDetai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Sc_QueryGodAnimalDetai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Sc_QueryGodAnimalDetai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Sc_QueryGodAnimalDetai::MergeFrom(const Cmd_Sc_QueryGodAnimalDetai& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detail()) {
      mutable_detail()->::GSProto::GoldAnimalDetail::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Sc_QueryGodAnimalDetai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Sc_QueryGodAnimalDetai::CopyFrom(const Cmd_Sc_QueryGodAnimalDetai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Sc_QueryGodAnimalDetai::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void Cmd_Sc_QueryGodAnimalDetai::Swap(Cmd_Sc_QueryGodAnimalDetai* other) {
  if (other != this) {
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Sc_QueryGodAnimalDetai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Sc_QueryGodAnimalDetai_descriptor_;
  metadata.reflection = Cmd_Sc_QueryGodAnimalDetai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GODANIMAL_DETAIL_BYID_CS::kIGodAnimalIDFieldNumber;
#endif  // !_MSC_VER

CMD_GODANIMAL_DETAIL_BYID_CS::CMD_GODANIMAL_DETAIL_BYID_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GODANIMAL_DETAIL_BYID_CS::InitAsDefaultInstance() {
}

CMD_GODANIMAL_DETAIL_BYID_CS::CMD_GODANIMAL_DETAIL_BYID_CS(const CMD_GODANIMAL_DETAIL_BYID_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GODANIMAL_DETAIL_BYID_CS::SharedCtor() {
  _cached_size_ = 0;
  igodanimalid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GODANIMAL_DETAIL_BYID_CS::~CMD_GODANIMAL_DETAIL_BYID_CS() {
  SharedDtor();
}

void CMD_GODANIMAL_DETAIL_BYID_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_GODANIMAL_DETAIL_BYID_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GODANIMAL_DETAIL_BYID_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GODANIMAL_DETAIL_BYID_CS_descriptor_;
}

const CMD_GODANIMAL_DETAIL_BYID_CS& CMD_GODANIMAL_DETAIL_BYID_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_GODANIMAL_DETAIL_BYID_CS* CMD_GODANIMAL_DETAIL_BYID_CS::default_instance_ = NULL;

CMD_GODANIMAL_DETAIL_BYID_CS* CMD_GODANIMAL_DETAIL_BYID_CS::New() const {
  return new CMD_GODANIMAL_DETAIL_BYID_CS;
}

void CMD_GODANIMAL_DETAIL_BYID_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    igodanimalid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GODANIMAL_DETAIL_BYID_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iGodAnimalID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igodanimalid_)));
          set_has_igodanimalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GODANIMAL_DETAIL_BYID_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iGodAnimalID = 1;
  if (has_igodanimalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->igodanimalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GODANIMAL_DETAIL_BYID_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iGodAnimalID = 1;
  if (has_igodanimalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->igodanimalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GODANIMAL_DETAIL_BYID_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iGodAnimalID = 1;
    if (has_igodanimalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igodanimalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GODANIMAL_DETAIL_BYID_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GODANIMAL_DETAIL_BYID_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GODANIMAL_DETAIL_BYID_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GODANIMAL_DETAIL_BYID_CS::MergeFrom(const CMD_GODANIMAL_DETAIL_BYID_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_igodanimalid()) {
      set_igodanimalid(from.igodanimalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GODANIMAL_DETAIL_BYID_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GODANIMAL_DETAIL_BYID_CS::CopyFrom(const CMD_GODANIMAL_DETAIL_BYID_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GODANIMAL_DETAIL_BYID_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_GODANIMAL_DETAIL_BYID_CS::Swap(CMD_GODANIMAL_DETAIL_BYID_CS* other) {
  if (other != this) {
    std::swap(igodanimalid_, other->igodanimalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GODANIMAL_DETAIL_BYID_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GODANIMAL_DETAIL_BYID_CS_descriptor_;
  metadata.reflection = CMD_GODANIMAL_DETAIL_BYID_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_GODANIMAL_DETAIL_BYID_SC::kIGodAnimalIDFieldNumber;
const int CMD_GODANIMAL_DETAIL_BYID_SC::kDetailFieldNumber;
#endif  // !_MSC_VER

CMD_GODANIMAL_DETAIL_BYID_SC::CMD_GODANIMAL_DETAIL_BYID_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_GODANIMAL_DETAIL_BYID_SC::InitAsDefaultInstance() {
  detail_ = const_cast< ::GSProto::GoldAnimalDetail*>(&::GSProto::GoldAnimalDetail::default_instance());
}

CMD_GODANIMAL_DETAIL_BYID_SC::CMD_GODANIMAL_DETAIL_BYID_SC(const CMD_GODANIMAL_DETAIL_BYID_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_GODANIMAL_DETAIL_BYID_SC::SharedCtor() {
  _cached_size_ = 0;
  igodanimalid_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_GODANIMAL_DETAIL_BYID_SC::~CMD_GODANIMAL_DETAIL_BYID_SC() {
  SharedDtor();
}

void CMD_GODANIMAL_DETAIL_BYID_SC::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void CMD_GODANIMAL_DETAIL_BYID_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_GODANIMAL_DETAIL_BYID_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_GODANIMAL_DETAIL_BYID_SC_descriptor_;
}

const CMD_GODANIMAL_DETAIL_BYID_SC& CMD_GODANIMAL_DETAIL_BYID_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_GODANIMAL_DETAIL_BYID_SC* CMD_GODANIMAL_DETAIL_BYID_SC::default_instance_ = NULL;

CMD_GODANIMAL_DETAIL_BYID_SC* CMD_GODANIMAL_DETAIL_BYID_SC::New() const {
  return new CMD_GODANIMAL_DETAIL_BYID_SC;
}

void CMD_GODANIMAL_DETAIL_BYID_SC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    igodanimalid_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::GSProto::GoldAnimalDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_GODANIMAL_DETAIL_BYID_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iGodAnimalID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igodanimalid_)));
          set_has_igodanimalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // required .GSProto.GoldAnimalDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_GODANIMAL_DETAIL_BYID_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iGodAnimalID = 1;
  if (has_igodanimalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->igodanimalid(), output);
  }

  // required .GSProto.GoldAnimalDetail detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_GODANIMAL_DETAIL_BYID_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iGodAnimalID = 1;
  if (has_igodanimalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->igodanimalid(), target);
  }

  // required .GSProto.GoldAnimalDetail detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_GODANIMAL_DETAIL_BYID_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iGodAnimalID = 1;
    if (has_igodanimalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igodanimalid());
    }

    // required .GSProto.GoldAnimalDetail detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_GODANIMAL_DETAIL_BYID_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_GODANIMAL_DETAIL_BYID_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_GODANIMAL_DETAIL_BYID_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_GODANIMAL_DETAIL_BYID_SC::MergeFrom(const CMD_GODANIMAL_DETAIL_BYID_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_igodanimalid()) {
      set_igodanimalid(from.igodanimalid());
    }
    if (from.has_detail()) {
      mutable_detail()->::GSProto::GoldAnimalDetail::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_GODANIMAL_DETAIL_BYID_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_GODANIMAL_DETAIL_BYID_SC::CopyFrom(const CMD_GODANIMAL_DETAIL_BYID_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_GODANIMAL_DETAIL_BYID_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void CMD_GODANIMAL_DETAIL_BYID_SC::Swap(CMD_GODANIMAL_DETAIL_BYID_SC* other) {
  if (other != this) {
    std::swap(igodanimalid_, other->igodanimalid_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_GODANIMAL_DETAIL_BYID_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_GODANIMAL_DETAIL_BYID_SC_descriptor_;
  metadata.reflection = CMD_GODANIMAL_DETAIL_BYID_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Cs_GodAnimalTrain::kDwObjectIDFieldNumber;
#endif  // !_MSC_VER

Cmd_Cs_GodAnimalTrain::Cmd_Cs_GodAnimalTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Cs_GodAnimalTrain::InitAsDefaultInstance() {
}

Cmd_Cs_GodAnimalTrain::Cmd_Cs_GodAnimalTrain(const Cmd_Cs_GodAnimalTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Cs_GodAnimalTrain::SharedCtor() {
  _cached_size_ = 0;
  dwobjectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Cs_GodAnimalTrain::~Cmd_Cs_GodAnimalTrain() {
  SharedDtor();
}

void Cmd_Cs_GodAnimalTrain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cmd_Cs_GodAnimalTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Cs_GodAnimalTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Cs_GodAnimalTrain_descriptor_;
}

const Cmd_Cs_GodAnimalTrain& Cmd_Cs_GodAnimalTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Cs_GodAnimalTrain* Cmd_Cs_GodAnimalTrain::default_instance_ = NULL;

Cmd_Cs_GodAnimalTrain* Cmd_Cs_GodAnimalTrain::New() const {
  return new Cmd_Cs_GodAnimalTrain;
}

void Cmd_Cs_GodAnimalTrain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwobjectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Cs_GodAnimalTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwobjectid_)));
          set_has_dwobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Cs_GodAnimalTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwObjectID = 1;
  if (has_dwobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Cs_GodAnimalTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwObjectID = 1;
  if (has_dwobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Cs_GodAnimalTrain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwObjectID = 1;
    if (has_dwobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Cs_GodAnimalTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Cs_GodAnimalTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Cs_GodAnimalTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Cs_GodAnimalTrain::MergeFrom(const Cmd_Cs_GodAnimalTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwobjectid()) {
      set_dwobjectid(from.dwobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Cs_GodAnimalTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Cs_GodAnimalTrain::CopyFrom(const Cmd_Cs_GodAnimalTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Cs_GodAnimalTrain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cmd_Cs_GodAnimalTrain::Swap(Cmd_Cs_GodAnimalTrain* other) {
  if (other != this) {
    std::swap(dwobjectid_, other->dwobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Cs_GodAnimalTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Cs_GodAnimalTrain_descriptor_;
  metadata.reflection = Cmd_Cs_GodAnimalTrain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Sc_GodAnimalUpdate::kUpdateInfoFieldNumber;
#endif  // !_MSC_VER

Cmd_Sc_GodAnimalUpdate::Cmd_Sc_GodAnimalUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Sc_GodAnimalUpdate::InitAsDefaultInstance() {
  updateinfo_ = const_cast< ::GSProto::GoldAnimalRoleBase*>(&::GSProto::GoldAnimalRoleBase::default_instance());
}

Cmd_Sc_GodAnimalUpdate::Cmd_Sc_GodAnimalUpdate(const Cmd_Sc_GodAnimalUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Sc_GodAnimalUpdate::SharedCtor() {
  _cached_size_ = 0;
  updateinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Sc_GodAnimalUpdate::~Cmd_Sc_GodAnimalUpdate() {
  SharedDtor();
}

void Cmd_Sc_GodAnimalUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete updateinfo_;
  }
}

void Cmd_Sc_GodAnimalUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Sc_GodAnimalUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Sc_GodAnimalUpdate_descriptor_;
}

const Cmd_Sc_GodAnimalUpdate& Cmd_Sc_GodAnimalUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Sc_GodAnimalUpdate* Cmd_Sc_GodAnimalUpdate::default_instance_ = NULL;

Cmd_Sc_GodAnimalUpdate* Cmd_Sc_GodAnimalUpdate::New() const {
  return new Cmd_Sc_GodAnimalUpdate;
}

void Cmd_Sc_GodAnimalUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updateinfo()) {
      if (updateinfo_ != NULL) updateinfo_->::GSProto::GoldAnimalRoleBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Sc_GodAnimalUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.GoldAnimalRoleBase updateInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Sc_GodAnimalUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.GoldAnimalRoleBase updateInfo = 1;
  if (has_updateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updateinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Sc_GodAnimalUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.GoldAnimalRoleBase updateInfo = 1;
  if (has_updateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updateinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Sc_GodAnimalUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.GoldAnimalRoleBase updateInfo = 1;
    if (has_updateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updateinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Sc_GodAnimalUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Sc_GodAnimalUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Sc_GodAnimalUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Sc_GodAnimalUpdate::MergeFrom(const Cmd_Sc_GodAnimalUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updateinfo()) {
      mutable_updateinfo()->::GSProto::GoldAnimalRoleBase::MergeFrom(from.updateinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Sc_GodAnimalUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Sc_GodAnimalUpdate::CopyFrom(const Cmd_Sc_GodAnimalUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Sc_GodAnimalUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_updateinfo()) {
    if (!this->updateinfo().IsInitialized()) return false;
  }
  return true;
}

void Cmd_Sc_GodAnimalUpdate::Swap(Cmd_Sc_GodAnimalUpdate* other) {
  if (other != this) {
    std::swap(updateinfo_, other->updateinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Sc_GodAnimalUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Sc_GodAnimalUpdate_descriptor_;
  metadata.reflection = Cmd_Sc_GodAnimalUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Cs_QueryGodAnimalLevelStep::kDwObjectIDFieldNumber;
#endif  // !_MSC_VER

Cmd_Cs_QueryGodAnimalLevelStep::Cmd_Cs_QueryGodAnimalLevelStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Cs_QueryGodAnimalLevelStep::InitAsDefaultInstance() {
}

Cmd_Cs_QueryGodAnimalLevelStep::Cmd_Cs_QueryGodAnimalLevelStep(const Cmd_Cs_QueryGodAnimalLevelStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Cs_QueryGodAnimalLevelStep::SharedCtor() {
  _cached_size_ = 0;
  dwobjectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Cs_QueryGodAnimalLevelStep::~Cmd_Cs_QueryGodAnimalLevelStep() {
  SharedDtor();
}

void Cmd_Cs_QueryGodAnimalLevelStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cmd_Cs_QueryGodAnimalLevelStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Cs_QueryGodAnimalLevelStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Cs_QueryGodAnimalLevelStep_descriptor_;
}

const Cmd_Cs_QueryGodAnimalLevelStep& Cmd_Cs_QueryGodAnimalLevelStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Cs_QueryGodAnimalLevelStep* Cmd_Cs_QueryGodAnimalLevelStep::default_instance_ = NULL;

Cmd_Cs_QueryGodAnimalLevelStep* Cmd_Cs_QueryGodAnimalLevelStep::New() const {
  return new Cmd_Cs_QueryGodAnimalLevelStep;
}

void Cmd_Cs_QueryGodAnimalLevelStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwobjectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Cs_QueryGodAnimalLevelStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwobjectid_)));
          set_has_dwobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Cs_QueryGodAnimalLevelStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwObjectID = 1;
  if (has_dwobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwobjectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Cs_QueryGodAnimalLevelStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwObjectID = 1;
  if (has_dwobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwobjectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Cs_QueryGodAnimalLevelStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwObjectID = 1;
    if (has_dwobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwobjectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Cs_QueryGodAnimalLevelStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Cs_QueryGodAnimalLevelStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Cs_QueryGodAnimalLevelStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Cs_QueryGodAnimalLevelStep::MergeFrom(const Cmd_Cs_QueryGodAnimalLevelStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwobjectid()) {
      set_dwobjectid(from.dwobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Cs_QueryGodAnimalLevelStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Cs_QueryGodAnimalLevelStep::CopyFrom(const Cmd_Cs_QueryGodAnimalLevelStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Cs_QueryGodAnimalLevelStep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cmd_Cs_QueryGodAnimalLevelStep::Swap(Cmd_Cs_QueryGodAnimalLevelStep* other) {
  if (other != this) {
    std::swap(dwobjectid_, other->dwobjectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Cs_QueryGodAnimalLevelStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Cs_QueryGodAnimalLevelStep_descriptor_;
  metadata.reflection = Cmd_Cs_QueryGodAnimalLevelStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cmd_Sc_GoldAnimalList::kDwActiveObjectIDFieldNumber;
const int Cmd_Sc_GoldAnimalList::kSzGodAnimalListFieldNumber;
#endif  // !_MSC_VER

Cmd_Sc_GoldAnimalList::Cmd_Sc_GoldAnimalList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cmd_Sc_GoldAnimalList::InitAsDefaultInstance() {
}

Cmd_Sc_GoldAnimalList::Cmd_Sc_GoldAnimalList(const Cmd_Sc_GoldAnimalList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cmd_Sc_GoldAnimalList::SharedCtor() {
  _cached_size_ = 0;
  dwactiveobjectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cmd_Sc_GoldAnimalList::~Cmd_Sc_GoldAnimalList() {
  SharedDtor();
}

void Cmd_Sc_GoldAnimalList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cmd_Sc_GoldAnimalList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cmd_Sc_GoldAnimalList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_Sc_GoldAnimalList_descriptor_;
}

const Cmd_Sc_GoldAnimalList& Cmd_Sc_GoldAnimalList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

Cmd_Sc_GoldAnimalList* Cmd_Sc_GoldAnimalList::default_instance_ = NULL;

Cmd_Sc_GoldAnimalList* Cmd_Sc_GoldAnimalList::New() const {
  return new Cmd_Sc_GoldAnimalList;
}

void Cmd_Sc_GoldAnimalList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwactiveobjectid_ = 0u;
  }
  szgodanimallist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cmd_Sc_GoldAnimalList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dwActiveObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwactiveobjectid_)));
          set_has_dwactiveobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szGodAnimalList;
        break;
      }

      // repeated .GSProto.GoldAnimalRoleBase szGodAnimalList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szGodAnimalList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szgodanimallist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szGodAnimalList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cmd_Sc_GoldAnimalList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dwActiveObjectID = 1;
  if (has_dwactiveobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwactiveobjectid(), output);
  }

  // repeated .GSProto.GoldAnimalRoleBase szGodAnimalList = 2;
  for (int i = 0; i < this->szgodanimallist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->szgodanimallist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cmd_Sc_GoldAnimalList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dwActiveObjectID = 1;
  if (has_dwactiveobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwactiveobjectid(), target);
  }

  // repeated .GSProto.GoldAnimalRoleBase szGodAnimalList = 2;
  for (int i = 0; i < this->szgodanimallist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->szgodanimallist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cmd_Sc_GoldAnimalList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dwActiveObjectID = 1;
    if (has_dwactiveobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwactiveobjectid());
    }

  }
  // repeated .GSProto.GoldAnimalRoleBase szGodAnimalList = 2;
  total_size += 1 * this->szgodanimallist_size();
  for (int i = 0; i < this->szgodanimallist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szgodanimallist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cmd_Sc_GoldAnimalList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cmd_Sc_GoldAnimalList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cmd_Sc_GoldAnimalList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cmd_Sc_GoldAnimalList::MergeFrom(const Cmd_Sc_GoldAnimalList& from) {
  GOOGLE_CHECK_NE(&from, this);
  szgodanimallist_.MergeFrom(from.szgodanimallist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwactiveobjectid()) {
      set_dwactiveobjectid(from.dwactiveobjectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cmd_Sc_GoldAnimalList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cmd_Sc_GoldAnimalList::CopyFrom(const Cmd_Sc_GoldAnimalList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cmd_Sc_GoldAnimalList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < szgodanimallist_size(); i++) {
    if (!this->szgodanimallist(i).IsInitialized()) return false;
  }
  return true;
}

void Cmd_Sc_GoldAnimalList::Swap(Cmd_Sc_GoldAnimalList* other) {
  if (other != this) {
    std::swap(dwactiveobjectid_, other->dwactiveobjectid_);
    szgodanimallist_.Swap(&other->szgodanimallist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cmd_Sc_GoldAnimalList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cmd_Sc_GoldAnimalList_descriptor_;
  metadata.reflection = Cmd_Sc_GoldAnimalList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_NORMALSHOP_QUERY_SC::kGoodsListFieldNumber;
const int CMD_NORMALSHOP_QUERY_SC::kUntilNextRefreshSecondsFieldNumber;
#endif  // !_MSC_VER

CMD_NORMALSHOP_QUERY_SC::CMD_NORMALSHOP_QUERY_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_NORMALSHOP_QUERY_SC::InitAsDefaultInstance() {
}

CMD_NORMALSHOP_QUERY_SC::CMD_NORMALSHOP_QUERY_SC(const CMD_NORMALSHOP_QUERY_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_NORMALSHOP_QUERY_SC::SharedCtor() {
  _cached_size_ = 0;
  untilnextrefreshseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_NORMALSHOP_QUERY_SC::~CMD_NORMALSHOP_QUERY_SC() {
  SharedDtor();
}

void CMD_NORMALSHOP_QUERY_SC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_NORMALSHOP_QUERY_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_NORMALSHOP_QUERY_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_NORMALSHOP_QUERY_SC_descriptor_;
}

const CMD_NORMALSHOP_QUERY_SC& CMD_NORMALSHOP_QUERY_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_NORMALSHOP_QUERY_SC* CMD_NORMALSHOP_QUERY_SC::default_instance_ = NULL;

CMD_NORMALSHOP_QUERY_SC* CMD_NORMALSHOP_QUERY_SC::New() const {
  return new CMD_NORMALSHOP_QUERY_SC;
}

void CMD_NORMALSHOP_QUERY_SC::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    untilnextrefreshseconds_ = 0;
  }
  goodslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_NORMALSHOP_QUERY_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GSProto.HonerGoodDetail goodsList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goodsList;
        if (input->ExpectTag(16)) goto parse_untilNextRefreshSeconds;
        break;
      }

      // required int32 untilNextRefreshSeconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_untilNextRefreshSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &untilnextrefreshseconds_)));
          set_has_untilnextrefreshseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_NORMALSHOP_QUERY_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GSProto.HonerGoodDetail goodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goodslist(i), output);
  }

  // required int32 untilNextRefreshSeconds = 2;
  if (has_untilnextrefreshseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->untilnextrefreshseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_NORMALSHOP_QUERY_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GSProto.HonerGoodDetail goodsList = 1;
  for (int i = 0; i < this->goodslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goodslist(i), target);
  }

  // required int32 untilNextRefreshSeconds = 2;
  if (has_untilnextrefreshseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->untilnextrefreshseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_NORMALSHOP_QUERY_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 untilNextRefreshSeconds = 2;
    if (has_untilnextrefreshseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->untilnextrefreshseconds());
    }

  }
  // repeated .GSProto.HonerGoodDetail goodsList = 1;
  total_size += 1 * this->goodslist_size();
  for (int i = 0; i < this->goodslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_NORMALSHOP_QUERY_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_NORMALSHOP_QUERY_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_NORMALSHOP_QUERY_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_NORMALSHOP_QUERY_SC::MergeFrom(const CMD_NORMALSHOP_QUERY_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodslist_.MergeFrom(from.goodslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_untilnextrefreshseconds()) {
      set_untilnextrefreshseconds(from.untilnextrefreshseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_NORMALSHOP_QUERY_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_NORMALSHOP_QUERY_SC::CopyFrom(const CMD_NORMALSHOP_QUERY_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_NORMALSHOP_QUERY_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < goodslist_size(); i++) {
    if (!this->goodslist(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_NORMALSHOP_QUERY_SC::Swap(CMD_NORMALSHOP_QUERY_SC* other) {
  if (other != this) {
    goodslist_.Swap(&other->goodslist_);
    std::swap(untilnextrefreshseconds_, other->untilnextrefreshseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_NORMALSHOP_QUERY_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_NORMALSHOP_QUERY_SC_descriptor_;
  metadata.reflection = CMD_NORMALSHOP_QUERY_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_NORMALSHOP_BUY_CS::kIndexFieldNumber;
#endif  // !_MSC_VER

CMD_NORMALSHOP_BUY_CS::CMD_NORMALSHOP_BUY_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_NORMALSHOP_BUY_CS::InitAsDefaultInstance() {
}

CMD_NORMALSHOP_BUY_CS::CMD_NORMALSHOP_BUY_CS(const CMD_NORMALSHOP_BUY_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_NORMALSHOP_BUY_CS::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_NORMALSHOP_BUY_CS::~CMD_NORMALSHOP_BUY_CS() {
  SharedDtor();
}

void CMD_NORMALSHOP_BUY_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_NORMALSHOP_BUY_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_NORMALSHOP_BUY_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_NORMALSHOP_BUY_CS_descriptor_;
}

const CMD_NORMALSHOP_BUY_CS& CMD_NORMALSHOP_BUY_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_NORMALSHOP_BUY_CS* CMD_NORMALSHOP_BUY_CS::default_instance_ = NULL;

CMD_NORMALSHOP_BUY_CS* CMD_NORMALSHOP_BUY_CS::New() const {
  return new CMD_NORMALSHOP_BUY_CS;
}

void CMD_NORMALSHOP_BUY_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_NORMALSHOP_BUY_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_NORMALSHOP_BUY_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_NORMALSHOP_BUY_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_NORMALSHOP_BUY_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_NORMALSHOP_BUY_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_NORMALSHOP_BUY_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_NORMALSHOP_BUY_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_NORMALSHOP_BUY_CS::MergeFrom(const CMD_NORMALSHOP_BUY_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_NORMALSHOP_BUY_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_NORMALSHOP_BUY_CS::CopyFrom(const CMD_NORMALSHOP_BUY_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_NORMALSHOP_BUY_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_NORMALSHOP_BUY_CS::Swap(CMD_NORMALSHOP_BUY_CS* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_NORMALSHOP_BUY_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_NORMALSHOP_BUY_CS_descriptor_;
  metadata.reflection = CMD_NORMALSHOP_BUY_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampUnit::kIIdFieldNumber;
const int CampUnit::kStrOwerNameFieldNumber;
const int CampUnit::kBCanReportFieldNumber;
const int CampUnit::kBCanBattleFieldNumber;
#endif  // !_MSC_VER

CampUnit::CampUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampUnit::InitAsDefaultInstance() {
}

CampUnit::CampUnit(const CampUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampUnit::SharedCtor() {
  _cached_size_ = 0;
  iid_ = 0;
  strowername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bcanreport_ = false;
  bcanbattle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampUnit::~CampUnit() {
  SharedDtor();
}

void CampUnit::SharedDtor() {
  if (strowername_ != &::google::protobuf::internal::kEmptyString) {
    delete strowername_;
  }
  if (this != default_instance_) {
  }
}

void CampUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampUnit_descriptor_;
}

const CampUnit& CampUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CampUnit* CampUnit::default_instance_ = NULL;

CampUnit* CampUnit::New() const {
  return new CampUnit;
}

void CampUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iid_ = 0;
    if (has_strowername()) {
      if (strowername_ != &::google::protobuf::internal::kEmptyString) {
        strowername_->clear();
      }
    }
    bcanreport_ = false;
    bcanbattle_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strOwerName;
        break;
      }

      // required string strOwerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOwerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strowername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strowername().data(), this->strowername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bCanReport;
        break;
      }

      // optional bool bCanReport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bCanReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcanreport_)));
          set_has_bcanreport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bCanBattle;
        break;
      }

      // optional bool bCanBattle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bCanBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcanbattle_)));
          set_has_bcanbattle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iId = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iid(), output);
  }

  // required string strOwerName = 2;
  if (has_strowername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strowername().data(), this->strowername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strowername(), output);
  }

  // optional bool bCanReport = 3;
  if (has_bcanreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bcanreport(), output);
  }

  // optional bool bCanBattle = 4;
  if (has_bcanbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bcanbattle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iId = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iid(), target);
  }

  // required string strOwerName = 2;
  if (has_strowername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strowername().data(), this->strowername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strowername(), target);
  }

  // optional bool bCanReport = 3;
  if (has_bcanreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bcanreport(), target);
  }

  // optional bool bCanBattle = 4;
  if (has_bcanbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bcanbattle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iId = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

    // required string strOwerName = 2;
    if (has_strowername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strowername());
    }

    // optional bool bCanReport = 3;
    if (has_bcanreport()) {
      total_size += 1 + 1;
    }

    // optional bool bCanBattle = 4;
    if (has_bcanbattle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampUnit::MergeFrom(const CampUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_strowername()) {
      set_strowername(from.strowername());
    }
    if (from.has_bcanreport()) {
      set_bcanreport(from.bcanreport());
    }
    if (from.has_bcanbattle()) {
      set_bcanbattle(from.bcanbattle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampUnit::CopyFrom(const CampUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CampUnit::Swap(CampUnit* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(strowername_, other->strowername_);
    std::swap(bcanreport_, other->bcanreport_);
    std::swap(bcanbattle_, other->bcanbattle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampUnit_descriptor_;
  metadata.reflection = CampUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_LEGION_CAMPBATTLE_SC::kSzCampListFieldNumber;
const int CMD_QUERY_LEGION_CAMPBATTLE_SC::kIstatusFieldNumber;
const int CMD_QUERY_LEGION_CAMPBATTLE_SC::kIRemaidSecondFieldNumber;
const int CMD_QUERY_LEGION_CAMPBATTLE_SC::kIHaveReportIdFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_LEGION_CAMPBATTLE_SC::CMD_QUERY_LEGION_CAMPBATTLE_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::InitAsDefaultInstance() {
}

CMD_QUERY_LEGION_CAMPBATTLE_SC::CMD_QUERY_LEGION_CAMPBATTLE_SC(const CMD_QUERY_LEGION_CAMPBATTLE_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::SharedCtor() {
  _cached_size_ = 0;
  istatus_ = 0;
  iremaidsecond_ = 0;
  ihavereportid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_LEGION_CAMPBATTLE_SC::~CMD_QUERY_LEGION_CAMPBATTLE_SC() {
  SharedDtor();
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_LEGION_CAMPBATTLE_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_LEGION_CAMPBATTLE_SC_descriptor_;
}

const CMD_QUERY_LEGION_CAMPBATTLE_SC& CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_LEGION_CAMPBATTLE_SC* CMD_QUERY_LEGION_CAMPBATTLE_SC::default_instance_ = NULL;

CMD_QUERY_LEGION_CAMPBATTLE_SC* CMD_QUERY_LEGION_CAMPBATTLE_SC::New() const {
  return new CMD_QUERY_LEGION_CAMPBATTLE_SC;
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    istatus_ = 0;
    iremaidsecond_ = 0;
    ihavereportid_ = 0;
  }
  szcamplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_LEGION_CAMPBATTLE_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GSProto.CampUnit szCampList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szCampList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szcamplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_szCampList;
        if (input->ExpectTag(16)) goto parse_istatus;
        break;
      }

      // required int32 istatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_istatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istatus_)));
          set_has_istatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRemaidSecond;
        break;
      }

      // optional int32 iRemaidSecond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRemaidSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iremaidsecond_)));
          set_has_iremaidsecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iHaveReportId;
        break;
      }

      // optional int32 iHaveReportId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iHaveReportId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ihavereportid_)));
          set_has_ihavereportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GSProto.CampUnit szCampList = 1;
  for (int i = 0; i < this->szcamplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->szcamplist(i), output);
  }

  // required int32 istatus = 2;
  if (has_istatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->istatus(), output);
  }

  // optional int32 iRemaidSecond = 3;
  if (has_iremaidsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iremaidsecond(), output);
  }

  // optional int32 iHaveReportId = 4;
  if (has_ihavereportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ihavereportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_LEGION_CAMPBATTLE_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GSProto.CampUnit szCampList = 1;
  for (int i = 0; i < this->szcamplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->szcamplist(i), target);
  }

  // required int32 istatus = 2;
  if (has_istatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->istatus(), target);
  }

  // optional int32 iRemaidSecond = 3;
  if (has_iremaidsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iremaidsecond(), target);
  }

  // optional int32 iHaveReportId = 4;
  if (has_ihavereportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ihavereportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_LEGION_CAMPBATTLE_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 istatus = 2;
    if (has_istatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istatus());
    }

    // optional int32 iRemaidSecond = 3;
    if (has_iremaidsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iremaidsecond());
    }

    // optional int32 iHaveReportId = 4;
    if (has_ihavereportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ihavereportid());
    }

  }
  // repeated .GSProto.CampUnit szCampList = 1;
  total_size += 1 * this->szcamplist_size();
  for (int i = 0; i < this->szcamplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szcamplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_LEGION_CAMPBATTLE_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_LEGION_CAMPBATTLE_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::MergeFrom(const CMD_QUERY_LEGION_CAMPBATTLE_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  szcamplist_.MergeFrom(from.szcamplist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_istatus()) {
      set_istatus(from.istatus());
    }
    if (from.has_iremaidsecond()) {
      set_iremaidsecond(from.iremaidsecond());
    }
    if (from.has_ihavereportid()) {
      set_ihavereportid(from.ihavereportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::CopyFrom(const CMD_QUERY_LEGION_CAMPBATTLE_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_LEGION_CAMPBATTLE_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < szcamplist_size(); i++) {
    if (!this->szcamplist(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_QUERY_LEGION_CAMPBATTLE_SC::Swap(CMD_QUERY_LEGION_CAMPBATTLE_SC* other) {
  if (other != this) {
    szcamplist_.Swap(&other->szcamplist_);
    std::swap(istatus_, other->istatus_);
    std::swap(iremaidsecond_, other->iremaidsecond_);
    std::swap(ihavereportid_, other->ihavereportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_LEGION_CAMPBATTLE_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_LEGION_CAMPBATTLE_SC_descriptor_;
  metadata.reflection = CMD_QUERY_LEGION_CAMPBATTLE_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_INFO_CS::kIIdFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_INFO_CS::CMD_QUERY_CAMPBATTLE_INFO_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::InitAsDefaultInstance() {
}

CMD_QUERY_CAMPBATTLE_INFO_CS::CMD_QUERY_CAMPBATTLE_INFO_CS(const CMD_QUERY_CAMPBATTLE_INFO_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::SharedCtor() {
  _cached_size_ = 0;
  iid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_INFO_CS::~CMD_QUERY_CAMPBATTLE_INFO_CS() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_INFO_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_INFO_CS_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_INFO_CS& CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_INFO_CS* CMD_QUERY_CAMPBATTLE_INFO_CS::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_INFO_CS* CMD_QUERY_CAMPBATTLE_INFO_CS::New() const {
  return new CMD_QUERY_CAMPBATTLE_INFO_CS;
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_INFO_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iId = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_INFO_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iId = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_INFO_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iId = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_INFO_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_INFO_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::MergeFrom(const CMD_QUERY_CAMPBATTLE_INFO_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::CopyFrom(const CMD_QUERY_CAMPBATTLE_INFO_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_INFO_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_QUERY_CAMPBATTLE_INFO_CS::Swap(CMD_QUERY_CAMPBATTLE_INFO_CS* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_INFO_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_INFO_CS_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_INFO_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegionUnit::kStrNameFieldNumber;
const int LegionUnit::kIHaveCampCountFieldNumber;
const int LegionUnit::kIAddPercentFieldNumber;
const int LegionUnit::kILegionIconFieldNumber;
#endif  // !_MSC_VER

LegionUnit::LegionUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegionUnit::InitAsDefaultInstance() {
}

LegionUnit::LegionUnit(const LegionUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegionUnit::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ihavecampcount_ = 0;
  iaddpercent_ = 0;
  ilegionicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegionUnit::~LegionUnit() {
  SharedDtor();
}

void LegionUnit::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void LegionUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegionUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegionUnit_descriptor_;
}

const LegionUnit& LegionUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

LegionUnit* LegionUnit::default_instance_ = NULL;

LegionUnit* LegionUnit::New() const {
  return new LegionUnit;
}

void LegionUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    ihavecampcount_ = 0;
    iaddpercent_ = 0;
    ilegionicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegionUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iHaveCampCount;
        break;
      }

      // required int32 iHaveCampCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iHaveCampCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ihavecampcount_)));
          set_has_ihavecampcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAddPercent;
        break;
      }

      // required int32 iAddPercent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaddpercent_)));
          set_has_iaddpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLegionIcon;
        break;
      }

      // required int32 iLegionIcon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLegionIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilegionicon_)));
          set_has_ilegionicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegionUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // required int32 iHaveCampCount = 2;
  if (has_ihavecampcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ihavecampcount(), output);
  }

  // required int32 iAddPercent = 3;
  if (has_iaddpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iaddpercent(), output);
  }

  // required int32 iLegionIcon = 4;
  if (has_ilegionicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ilegionicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegionUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // required int32 iHaveCampCount = 2;
  if (has_ihavecampcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ihavecampcount(), target);
  }

  // required int32 iAddPercent = 3;
  if (has_iaddpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iaddpercent(), target);
  }

  // required int32 iLegionIcon = 4;
  if (has_ilegionicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ilegionicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegionUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // required int32 iHaveCampCount = 2;
    if (has_ihavecampcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ihavecampcount());
    }

    // required int32 iAddPercent = 3;
    if (has_iaddpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaddpercent());
    }

    // required int32 iLegionIcon = 4;
    if (has_ilegionicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilegionicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegionUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegionUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegionUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegionUnit::MergeFrom(const LegionUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_ihavecampcount()) {
      set_ihavecampcount(from.ihavecampcount());
    }
    if (from.has_iaddpercent()) {
      set_iaddpercent(from.iaddpercent());
    }
    if (from.has_ilegionicon()) {
      set_ilegionicon(from.ilegionicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegionUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegionUnit::CopyFrom(const LegionUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegionUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LegionUnit::Swap(LegionUnit* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(ihavecampcount_, other->ihavecampcount_);
    std::swap(iaddpercent_, other->iaddpercent_);
    std::swap(ilegionicon_, other->ilegionicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegionUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegionUnit_descriptor_;
  metadata.reflection = LegionUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_INFO_SC::kGuardLegionFieldNumber;
const int CMD_QUERY_CAMPBATTLE_INFO_SC::kSzAttackListFieldNumber;
const int CMD_QUERY_CAMPBATTLE_INFO_SC::kIIdFieldNumber;
const int CMD_QUERY_CAMPBATTLE_INFO_SC::kICanGetSilverFieldNumber;
const int CMD_QUERY_CAMPBATTLE_INFO_SC::kIReportCostFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_INFO_SC::CMD_QUERY_CAMPBATTLE_INFO_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::InitAsDefaultInstance() {
  guardlegion_ = const_cast< ::GSProto::LegionUnit*>(&::GSProto::LegionUnit::default_instance());
}

CMD_QUERY_CAMPBATTLE_INFO_SC::CMD_QUERY_CAMPBATTLE_INFO_SC(const CMD_QUERY_CAMPBATTLE_INFO_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::SharedCtor() {
  _cached_size_ = 0;
  guardlegion_ = NULL;
  iid_ = 0;
  icangetsilver_ = 0;
  ireportcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_INFO_SC::~CMD_QUERY_CAMPBATTLE_INFO_SC() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::SharedDtor() {
  if (this != default_instance_) {
    delete guardlegion_;
  }
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_INFO_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_INFO_SC_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_INFO_SC& CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_INFO_SC* CMD_QUERY_CAMPBATTLE_INFO_SC::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_INFO_SC* CMD_QUERY_CAMPBATTLE_INFO_SC::New() const {
  return new CMD_QUERY_CAMPBATTLE_INFO_SC;
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guardlegion()) {
      if (guardlegion_ != NULL) guardlegion_->::GSProto::LegionUnit::Clear();
    }
    iid_ = 0;
    icangetsilver_ = 0;
    ireportcost_ = 0;
  }
  szattacklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_INFO_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.LegionUnit guardLegion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guardlegion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szAttackList;
        break;
      }

      // repeated .GSProto.LegionUnit szAttackList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szAttackList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szattacklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szAttackList;
        if (input->ExpectTag(24)) goto parse_iId;
        break;
      }

      // required int32 iId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iCanGetSilver;
        break;
      }

      // required int32 iCanGetSilver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCanGetSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icangetsilver_)));
          set_has_icangetsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iReportCost;
        break;
      }

      // required int32 iReportCost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReportCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireportcost_)));
          set_has_ireportcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.LegionUnit guardLegion = 1;
  if (has_guardlegion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guardlegion(), output);
  }

  // repeated .GSProto.LegionUnit szAttackList = 2;
  for (int i = 0; i < this->szattacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->szattacklist(i), output);
  }

  // required int32 iId = 3;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iid(), output);
  }

  // required int32 iCanGetSilver = 4;
  if (has_icangetsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icangetsilver(), output);
  }

  // required int32 iReportCost = 5;
  if (has_ireportcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ireportcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_INFO_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.LegionUnit guardLegion = 1;
  if (has_guardlegion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guardlegion(), target);
  }

  // repeated .GSProto.LegionUnit szAttackList = 2;
  for (int i = 0; i < this->szattacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->szattacklist(i), target);
  }

  // required int32 iId = 3;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iid(), target);
  }

  // required int32 iCanGetSilver = 4;
  if (has_icangetsilver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->icangetsilver(), target);
  }

  // required int32 iReportCost = 5;
  if (has_ireportcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ireportcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_INFO_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.LegionUnit guardLegion = 1;
    if (has_guardlegion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guardlegion());
    }

    // required int32 iId = 3;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

    // required int32 iCanGetSilver = 4;
    if (has_icangetsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icangetsilver());
    }

    // required int32 iReportCost = 5;
    if (has_ireportcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireportcost());
    }

  }
  // repeated .GSProto.LegionUnit szAttackList = 2;
  total_size += 1 * this->szattacklist_size();
  for (int i = 0; i < this->szattacklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szattacklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_INFO_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_INFO_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::MergeFrom(const CMD_QUERY_CAMPBATTLE_INFO_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  szattacklist_.MergeFrom(from.szattacklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guardlegion()) {
      mutable_guardlegion()->::GSProto::LegionUnit::MergeFrom(from.guardlegion());
    }
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_icangetsilver()) {
      set_icangetsilver(from.icangetsilver());
    }
    if (from.has_ireportcost()) {
      set_ireportcost(from.ireportcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::CopyFrom(const CMD_QUERY_CAMPBATTLE_INFO_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_INFO_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_guardlegion()) {
    if (!this->guardlegion().IsInitialized()) return false;
  }
  for (int i = 0; i < szattacklist_size(); i++) {
    if (!this->szattacklist(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_QUERY_CAMPBATTLE_INFO_SC::Swap(CMD_QUERY_CAMPBATTLE_INFO_SC* other) {
  if (other != this) {
    std::swap(guardlegion_, other->guardlegion_);
    szattacklist_.Swap(&other->szattacklist_);
    std::swap(iid_, other->iid_);
    std::swap(icangetsilver_, other->icangetsilver_);
    std::swap(ireportcost_, other->ireportcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_INFO_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_INFO_SC_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_INFO_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_LEGION_CAMPBATTLE_REPORT_CS::kIIdFieldNumber;
#endif  // !_MSC_VER

CMD_LEGION_CAMPBATTLE_REPORT_CS::CMD_LEGION_CAMPBATTLE_REPORT_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::InitAsDefaultInstance() {
}

CMD_LEGION_CAMPBATTLE_REPORT_CS::CMD_LEGION_CAMPBATTLE_REPORT_CS(const CMD_LEGION_CAMPBATTLE_REPORT_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::SharedCtor() {
  _cached_size_ = 0;
  iid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_LEGION_CAMPBATTLE_REPORT_CS::~CMD_LEGION_CAMPBATTLE_REPORT_CS() {
  SharedDtor();
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_REPORT_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_LEGION_CAMPBATTLE_REPORT_CS_descriptor_;
}

const CMD_LEGION_CAMPBATTLE_REPORT_CS& CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_LEGION_CAMPBATTLE_REPORT_CS* CMD_LEGION_CAMPBATTLE_REPORT_CS::default_instance_ = NULL;

CMD_LEGION_CAMPBATTLE_REPORT_CS* CMD_LEGION_CAMPBATTLE_REPORT_CS::New() const {
  return new CMD_LEGION_CAMPBATTLE_REPORT_CS;
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_LEGION_CAMPBATTLE_REPORT_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iId = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_LEGION_CAMPBATTLE_REPORT_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iId = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_LEGION_CAMPBATTLE_REPORT_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iId = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_LEGION_CAMPBATTLE_REPORT_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_LEGION_CAMPBATTLE_REPORT_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::MergeFrom(const CMD_LEGION_CAMPBATTLE_REPORT_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::CopyFrom(const CMD_LEGION_CAMPBATTLE_REPORT_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_LEGION_CAMPBATTLE_REPORT_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_LEGION_CAMPBATTLE_REPORT_CS::Swap(CMD_LEGION_CAMPBATTLE_REPORT_CS* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_LEGION_CAMPBATTLE_REPORT_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_LEGION_CAMPBATTLE_REPORT_CS_descriptor_;
  metadata.reflection = CMD_LEGION_CAMPBATTLE_REPORT_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VSUnit::kStrLegionNameFieldNumber;
const int VSUnit::kIStarCountFieldNumber;
const int VSUnit::kILegionIconFieldNumber;
#endif  // !_MSC_VER

VSUnit::VSUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VSUnit::InitAsDefaultInstance() {
}

VSUnit::VSUnit(const VSUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VSUnit::SharedCtor() {
  _cached_size_ = 0;
  strlegionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istarcount_ = 0;
  ilegionicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VSUnit::~VSUnit() {
  SharedDtor();
}

void VSUnit::SharedDtor() {
  if (strlegionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strlegionname_;
  }
  if (this != default_instance_) {
  }
}

void VSUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSUnit_descriptor_;
}

const VSUnit& VSUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

VSUnit* VSUnit::default_instance_ = NULL;

VSUnit* VSUnit::New() const {
  return new VSUnit;
}

void VSUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strlegionname()) {
      if (strlegionname_ != &::google::protobuf::internal::kEmptyString) {
        strlegionname_->clear();
      }
    }
    istarcount_ = 0;
    ilegionicon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VSUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strLegionName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlegionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strlegionname().data(), this->strlegionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iStarCount;
        break;
      }

      // required int32 iStarCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iStarCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istarcount_)));
          set_has_istarcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iLegionIcon;
        break;
      }

      // required int32 iLegionIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLegionIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilegionicon_)));
          set_has_ilegionicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VSUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strLegionName = 1;
  if (has_strlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlegionname().data(), this->strlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strlegionname(), output);
  }

  // required int32 iStarCount = 2;
  if (has_istarcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->istarcount(), output);
  }

  // required int32 iLegionIcon = 3;
  if (has_ilegionicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ilegionicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VSUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strLegionName = 1;
  if (has_strlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlegionname().data(), this->strlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strlegionname(), target);
  }

  // required int32 iStarCount = 2;
  if (has_istarcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->istarcount(), target);
  }

  // required int32 iLegionIcon = 3;
  if (has_ilegionicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ilegionicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VSUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strLegionName = 1;
    if (has_strlegionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strlegionname());
    }

    // required int32 iStarCount = 2;
    if (has_istarcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istarcount());
    }

    // required int32 iLegionIcon = 3;
    if (has_ilegionicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilegionicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VSUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VSUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VSUnit::MergeFrom(const VSUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strlegionname()) {
      set_strlegionname(from.strlegionname());
    }
    if (from.has_istarcount()) {
      set_istarcount(from.istarcount());
    }
    if (from.has_ilegionicon()) {
      set_ilegionicon(from.ilegionicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VSUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSUnit::CopyFrom(const VSUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VSUnit::Swap(VSUnit* other) {
  if (other != this) {
    std::swap(strlegionname_, other->strlegionname_);
    std::swap(istarcount_, other->istarcount_);
    std::swap(ilegionicon_, other->ilegionicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VSUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSUnit_descriptor_;
  metadata.reflection = VSUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VSLegion::kGuardUnitFieldNumber;
const int VSLegion::kAttUnitFieldNumber;
const int VSLegion::kICampIdFieldNumber;
const int VSLegion::kIBattleIdFieldNumber;
#endif  // !_MSC_VER

VSLegion::VSLegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VSLegion::InitAsDefaultInstance() {
  guardunit_ = const_cast< ::GSProto::VSUnit*>(&::GSProto::VSUnit::default_instance());
  attunit_ = const_cast< ::GSProto::VSUnit*>(&::GSProto::VSUnit::default_instance());
}

VSLegion::VSLegion(const VSLegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VSLegion::SharedCtor() {
  _cached_size_ = 0;
  guardunit_ = NULL;
  attunit_ = NULL;
  icampid_ = 0;
  ibattleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VSLegion::~VSLegion() {
  SharedDtor();
}

void VSLegion::SharedDtor() {
  if (this != default_instance_) {
    delete guardunit_;
    delete attunit_;
  }
}

void VSLegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSLegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSLegion_descriptor_;
}

const VSLegion& VSLegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

VSLegion* VSLegion::default_instance_ = NULL;

VSLegion* VSLegion::New() const {
  return new VSLegion;
}

void VSLegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guardunit()) {
      if (guardunit_ != NULL) guardunit_->::GSProto::VSUnit::Clear();
    }
    if (has_attunit()) {
      if (attunit_ != NULL) attunit_->::GSProto::VSUnit::Clear();
    }
    icampid_ = 0;
    ibattleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VSLegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.VSUnit guardUnit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guardunit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attUnit;
        break;
      }

      // required .GSProto.VSUnit attUnit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attUnit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attunit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iCampId;
        break;
      }

      // optional int32 iCampId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iBattleId;
        break;
      }

      // optional int32 iBattleId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iBattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibattleid_)));
          set_has_ibattleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VSLegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.VSUnit guardUnit = 1;
  if (has_guardunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guardunit(), output);
  }

  // required .GSProto.VSUnit attUnit = 2;
  if (has_attunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attunit(), output);
  }

  // optional int32 iCampId = 3;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icampid(), output);
  }

  // optional int32 iBattleId = 4;
  if (has_ibattleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ibattleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VSLegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.VSUnit guardUnit = 1;
  if (has_guardunit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guardunit(), target);
  }

  // required .GSProto.VSUnit attUnit = 2;
  if (has_attunit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attunit(), target);
  }

  // optional int32 iCampId = 3;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icampid(), target);
  }

  // optional int32 iBattleId = 4;
  if (has_ibattleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ibattleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VSLegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.VSUnit guardUnit = 1;
    if (has_guardunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guardunit());
    }

    // required .GSProto.VSUnit attUnit = 2;
    if (has_attunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attunit());
    }

    // optional int32 iCampId = 3;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

    // optional int32 iBattleId = 4;
    if (has_ibattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibattleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSLegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VSLegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VSLegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VSLegion::MergeFrom(const VSLegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guardunit()) {
      mutable_guardunit()->::GSProto::VSUnit::MergeFrom(from.guardunit());
    }
    if (from.has_attunit()) {
      mutable_attunit()->::GSProto::VSUnit::MergeFrom(from.attunit());
    }
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
    if (from.has_ibattleid()) {
      set_ibattleid(from.ibattleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VSLegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSLegion::CopyFrom(const VSLegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSLegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guardunit()) {
    if (!this->guardunit().IsInitialized()) return false;
  }
  if (has_attunit()) {
    if (!this->attunit().IsInitialized()) return false;
  }
  return true;
}

void VSLegion::Swap(VSLegion* other) {
  if (other != this) {
    std::swap(guardunit_, other->guardunit_);
    std::swap(attunit_, other->attunit_);
    std::swap(icampid_, other->icampid_);
    std::swap(ibattleid_, other->ibattleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VSLegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSLegion_descriptor_;
  metadata.reflection = VSLegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VSLegionMemDetail::kIHeadIdFieldNumber;
const int VSLegionMemDetail::kILevelFieldNumber;
const int VSLegionMemDetail::kStrNameFieldNumber;
const int VSLegionMemDetail::kIFightValueFieldNumber;
const int VSLegionMemDetail::kBICanFightFieldNumber;
const int VSLegionMemDetail::kBIICanFightFieldNumber;
const int VSLegionMemDetail::kBIIICanFightFieldNumber;
const int VSLegionMemDetail::kBIsNpcFieldNumber;
#endif  // !_MSC_VER

VSLegionMemDetail::VSLegionMemDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VSLegionMemDetail::InitAsDefaultInstance() {
}

VSLegionMemDetail::VSLegionMemDetail(const VSLegionMemDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VSLegionMemDetail::SharedCtor() {
  _cached_size_ = 0;
  iheadid_ = 0;
  ilevel_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifightvalue_ = 0;
  bicanfight_ = false;
  biicanfight_ = false;
  biiicanfight_ = false;
  bisnpc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VSLegionMemDetail::~VSLegionMemDetail() {
  SharedDtor();
}

void VSLegionMemDetail::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void VSLegionMemDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSLegionMemDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSLegionMemDetail_descriptor_;
}

const VSLegionMemDetail& VSLegionMemDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

VSLegionMemDetail* VSLegionMemDetail::default_instance_ = NULL;

VSLegionMemDetail* VSLegionMemDetail::New() const {
  return new VSLegionMemDetail;
}

void VSLegionMemDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iheadid_ = 0;
    ilevel_ = 0;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    ifightvalue_ = 0;
    bicanfight_ = false;
    biicanfight_ = false;
    biiicanfight_ = false;
    bisnpc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VSLegionMemDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iHeadId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iheadid_)));
          set_has_iheadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLevel;
        break;
      }

      // required int32 iLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilevel_)));
          set_has_ilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strName;
        break;
      }

      // required string strName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iFightValue;
        break;
      }

      // required int32 iFightValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFightValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifightvalue_)));
          set_has_ifightvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bICanFight;
        break;
      }

      // required bool bICanFight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bICanFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bicanfight_)));
          set_has_bicanfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bIICanFight;
        break;
      }

      // required bool bIICanFight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIICanFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biicanfight_)));
          set_has_biicanfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bIIICanFight;
        break;
      }

      // required bool bIIICanFight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIIICanFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biiicanfight_)));
          set_has_biiicanfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bIsNpc;
        break;
      }

      // required bool bIsNpc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsNpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisnpc_)));
          set_has_bisnpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VSLegionMemDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iHeadId = 1;
  if (has_iheadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iheadid(), output);
  }

  // required int32 iLevel = 2;
  if (has_ilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ilevel(), output);
  }

  // required string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strname(), output);
  }

  // required int32 iFightValue = 4;
  if (has_ifightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ifightvalue(), output);
  }

  // required bool bICanFight = 5;
  if (has_bicanfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bicanfight(), output);
  }

  // required bool bIICanFight = 6;
  if (has_biicanfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->biicanfight(), output);
  }

  // required bool bIIICanFight = 7;
  if (has_biiicanfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->biiicanfight(), output);
  }

  // required bool bIsNpc = 8;
  if (has_bisnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bisnpc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VSLegionMemDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iHeadId = 1;
  if (has_iheadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iheadid(), target);
  }

  // required int32 iLevel = 2;
  if (has_ilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ilevel(), target);
  }

  // required string strName = 3;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strname(), target);
  }

  // required int32 iFightValue = 4;
  if (has_ifightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ifightvalue(), target);
  }

  // required bool bICanFight = 5;
  if (has_bicanfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bicanfight(), target);
  }

  // required bool bIICanFight = 6;
  if (has_biicanfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->biicanfight(), target);
  }

  // required bool bIIICanFight = 7;
  if (has_biiicanfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->biiicanfight(), target);
  }

  // required bool bIsNpc = 8;
  if (has_bisnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bisnpc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VSLegionMemDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iHeadId = 1;
    if (has_iheadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iheadid());
    }

    // required int32 iLevel = 2;
    if (has_ilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilevel());
    }

    // required string strName = 3;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // required int32 iFightValue = 4;
    if (has_ifightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifightvalue());
    }

    // required bool bICanFight = 5;
    if (has_bicanfight()) {
      total_size += 1 + 1;
    }

    // required bool bIICanFight = 6;
    if (has_biicanfight()) {
      total_size += 1 + 1;
    }

    // required bool bIIICanFight = 7;
    if (has_biiicanfight()) {
      total_size += 1 + 1;
    }

    // required bool bIsNpc = 8;
    if (has_bisnpc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSLegionMemDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VSLegionMemDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VSLegionMemDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VSLegionMemDetail::MergeFrom(const VSLegionMemDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iheadid()) {
      set_iheadid(from.iheadid());
    }
    if (from.has_ilevel()) {
      set_ilevel(from.ilevel());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_ifightvalue()) {
      set_ifightvalue(from.ifightvalue());
    }
    if (from.has_bicanfight()) {
      set_bicanfight(from.bicanfight());
    }
    if (from.has_biicanfight()) {
      set_biicanfight(from.biicanfight());
    }
    if (from.has_biiicanfight()) {
      set_biiicanfight(from.biiicanfight());
    }
    if (from.has_bisnpc()) {
      set_bisnpc(from.bisnpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VSLegionMemDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSLegionMemDetail::CopyFrom(const VSLegionMemDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSLegionMemDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void VSLegionMemDetail::Swap(VSLegionMemDetail* other) {
  if (other != this) {
    std::swap(iheadid_, other->iheadid_);
    std::swap(ilevel_, other->ilevel_);
    std::swap(strname_, other->strname_);
    std::swap(ifightvalue_, other->ifightvalue_);
    std::swap(bicanfight_, other->bicanfight_);
    std::swap(biicanfight_, other->biicanfight_);
    std::swap(biiicanfight_, other->biiicanfight_);
    std::swap(bisnpc_, other->bisnpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VSLegionMemDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSLegionMemDetail_descriptor_;
  metadata.reflection = VSLegionMemDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_LEGION_CAMPBATTLE_JOIN_CS::kIIdFieldNumber;
#endif  // !_MSC_VER

CMD_LEGION_CAMPBATTLE_JOIN_CS::CMD_LEGION_CAMPBATTLE_JOIN_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::InitAsDefaultInstance() {
}

CMD_LEGION_CAMPBATTLE_JOIN_CS::CMD_LEGION_CAMPBATTLE_JOIN_CS(const CMD_LEGION_CAMPBATTLE_JOIN_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::SharedCtor() {
  _cached_size_ = 0;
  iid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_LEGION_CAMPBATTLE_JOIN_CS::~CMD_LEGION_CAMPBATTLE_JOIN_CS() {
  SharedDtor();
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_JOIN_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_LEGION_CAMPBATTLE_JOIN_CS_descriptor_;
}

const CMD_LEGION_CAMPBATTLE_JOIN_CS& CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_LEGION_CAMPBATTLE_JOIN_CS* CMD_LEGION_CAMPBATTLE_JOIN_CS::default_instance_ = NULL;

CMD_LEGION_CAMPBATTLE_JOIN_CS* CMD_LEGION_CAMPBATTLE_JOIN_CS::New() const {
  return new CMD_LEGION_CAMPBATTLE_JOIN_CS;
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_LEGION_CAMPBATTLE_JOIN_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iId = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_LEGION_CAMPBATTLE_JOIN_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iId = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_LEGION_CAMPBATTLE_JOIN_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iId = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_LEGION_CAMPBATTLE_JOIN_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_LEGION_CAMPBATTLE_JOIN_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::MergeFrom(const CMD_LEGION_CAMPBATTLE_JOIN_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::CopyFrom(const CMD_LEGION_CAMPBATTLE_JOIN_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_LEGION_CAMPBATTLE_JOIN_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_LEGION_CAMPBATTLE_JOIN_CS::Swap(CMD_LEGION_CAMPBATTLE_JOIN_CS* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_LEGION_CAMPBATTLE_JOIN_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_LEGION_CAMPBATTLE_JOIN_CS_descriptor_;
  metadata.reflection = CMD_LEGION_CAMPBATTLE_JOIN_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_LEGION_CAMPBATTLE_JOIN_SC::kBIsGuardFieldNumber;
const int CMD_LEGION_CAMPBATTLE_JOIN_SC::kSzVSLegionListFieldNumber;
const int CMD_LEGION_CAMPBATTLE_JOIN_SC::kSelfVsInfoFieldNumber;
const int CMD_LEGION_CAMPBATTLE_JOIN_SC::kSzMemberListFieldNumber;
const int CMD_LEGION_CAMPBATTLE_JOIN_SC::kIRemaindSecondFieldNumber;
#endif  // !_MSC_VER

CMD_LEGION_CAMPBATTLE_JOIN_SC::CMD_LEGION_CAMPBATTLE_JOIN_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::InitAsDefaultInstance() {
  selfvsinfo_ = const_cast< ::GSProto::VSLegion*>(&::GSProto::VSLegion::default_instance());
}

CMD_LEGION_CAMPBATTLE_JOIN_SC::CMD_LEGION_CAMPBATTLE_JOIN_SC(const CMD_LEGION_CAMPBATTLE_JOIN_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::SharedCtor() {
  _cached_size_ = 0;
  bisguard_ = false;
  selfvsinfo_ = NULL;
  iremaindsecond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_LEGION_CAMPBATTLE_JOIN_SC::~CMD_LEGION_CAMPBATTLE_JOIN_SC() {
  SharedDtor();
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::SharedDtor() {
  if (this != default_instance_) {
    delete selfvsinfo_;
  }
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_JOIN_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_LEGION_CAMPBATTLE_JOIN_SC_descriptor_;
}

const CMD_LEGION_CAMPBATTLE_JOIN_SC& CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_LEGION_CAMPBATTLE_JOIN_SC* CMD_LEGION_CAMPBATTLE_JOIN_SC::default_instance_ = NULL;

CMD_LEGION_CAMPBATTLE_JOIN_SC* CMD_LEGION_CAMPBATTLE_JOIN_SC::New() const {
  return new CMD_LEGION_CAMPBATTLE_JOIN_SC;
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bisguard_ = false;
    if (has_selfvsinfo()) {
      if (selfvsinfo_ != NULL) selfvsinfo_->::GSProto::VSLegion::Clear();
    }
    iremaindsecond_ = 0;
  }
  szvslegionlist_.Clear();
  szmemberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_LEGION_CAMPBATTLE_JOIN_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bIsGuard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisguard_)));
          set_has_bisguard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szVSLegionList;
        break;
      }

      // repeated .GSProto.VSLegion szVSLegionList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szVSLegionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szvslegionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szVSLegionList;
        if (input->ExpectTag(26)) goto parse_selfVsInfo;
        break;
      }

      // optional .GSProto.VSLegion selfVsInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfVsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfvsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szMemberList;
        break;
      }

      // repeated .GSProto.VSLegionMemDetail szMemberList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMemberList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szmemberlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szMemberList;
        if (input->ExpectTag(40)) goto parse_iRemaindSecond;
        break;
      }

      // optional int32 iRemaindSecond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRemaindSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iremaindsecond_)));
          set_has_iremaindsecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool bIsGuard = 1;
  if (has_bisguard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bisguard(), output);
  }

  // repeated .GSProto.VSLegion szVSLegionList = 2;
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->szvslegionlist(i), output);
  }

  // optional .GSProto.VSLegion selfVsInfo = 3;
  if (has_selfvsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selfvsinfo(), output);
  }

  // repeated .GSProto.VSLegionMemDetail szMemberList = 4;
  for (int i = 0; i < this->szmemberlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->szmemberlist(i), output);
  }

  // optional int32 iRemaindSecond = 5;
  if (has_iremaindsecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iremaindsecond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_LEGION_CAMPBATTLE_JOIN_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool bIsGuard = 1;
  if (has_bisguard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bisguard(), target);
  }

  // repeated .GSProto.VSLegion szVSLegionList = 2;
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->szvslegionlist(i), target);
  }

  // optional .GSProto.VSLegion selfVsInfo = 3;
  if (has_selfvsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selfvsinfo(), target);
  }

  // repeated .GSProto.VSLegionMemDetail szMemberList = 4;
  for (int i = 0; i < this->szmemberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->szmemberlist(i), target);
  }

  // optional int32 iRemaindSecond = 5;
  if (has_iremaindsecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iremaindsecond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_LEGION_CAMPBATTLE_JOIN_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bIsGuard = 1;
    if (has_bisguard()) {
      total_size += 1 + 1;
    }

    // optional .GSProto.VSLegion selfVsInfo = 3;
    if (has_selfvsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfvsinfo());
    }

    // optional int32 iRemaindSecond = 5;
    if (has_iremaindsecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iremaindsecond());
    }

  }
  // repeated .GSProto.VSLegion szVSLegionList = 2;
  total_size += 1 * this->szvslegionlist_size();
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szvslegionlist(i));
  }

  // repeated .GSProto.VSLegionMemDetail szMemberList = 4;
  total_size += 1 * this->szmemberlist_size();
  for (int i = 0; i < this->szmemberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szmemberlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_LEGION_CAMPBATTLE_JOIN_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_LEGION_CAMPBATTLE_JOIN_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::MergeFrom(const CMD_LEGION_CAMPBATTLE_JOIN_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  szvslegionlist_.MergeFrom(from.szvslegionlist_);
  szmemberlist_.MergeFrom(from.szmemberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bisguard()) {
      set_bisguard(from.bisguard());
    }
    if (from.has_selfvsinfo()) {
      mutable_selfvsinfo()->::GSProto::VSLegion::MergeFrom(from.selfvsinfo());
    }
    if (from.has_iremaindsecond()) {
      set_iremaindsecond(from.iremaindsecond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::CopyFrom(const CMD_LEGION_CAMPBATTLE_JOIN_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_LEGION_CAMPBATTLE_JOIN_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < szvslegionlist_size(); i++) {
    if (!this->szvslegionlist(i).IsInitialized()) return false;
  }
  if (has_selfvsinfo()) {
    if (!this->selfvsinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < szmemberlist_size(); i++) {
    if (!this->szmemberlist(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_LEGION_CAMPBATTLE_JOIN_SC::Swap(CMD_LEGION_CAMPBATTLE_JOIN_SC* other) {
  if (other != this) {
    std::swap(bisguard_, other->bisguard_);
    szvslegionlist_.Swap(&other->szvslegionlist_);
    std::swap(selfvsinfo_, other->selfvsinfo_);
    szmemberlist_.Swap(&other->szmemberlist_);
    std::swap(iremaindsecond_, other->iremaindsecond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_LEGION_CAMPBATTLE_JOIN_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_LEGION_CAMPBATTLE_JOIN_SC_descriptor_;
  metadata.reflection = CMD_LEGION_CAMPBATTLE_JOIN_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_LEGION_CAMPBATTLE_ENTER_CS::kICampIdFieldNumber;
const int CMD_LEGION_CAMPBATTLE_ENTER_CS::kStrVSLegionNameFieldNumber;
#endif  // !_MSC_VER

CMD_LEGION_CAMPBATTLE_ENTER_CS::CMD_LEGION_CAMPBATTLE_ENTER_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::InitAsDefaultInstance() {
}

CMD_LEGION_CAMPBATTLE_ENTER_CS::CMD_LEGION_CAMPBATTLE_ENTER_CS(const CMD_LEGION_CAMPBATTLE_ENTER_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  strvslegionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_LEGION_CAMPBATTLE_ENTER_CS::~CMD_LEGION_CAMPBATTLE_ENTER_CS() {
  SharedDtor();
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::SharedDtor() {
  if (strvslegionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strvslegionname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_ENTER_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_LEGION_CAMPBATTLE_ENTER_CS_descriptor_;
}

const CMD_LEGION_CAMPBATTLE_ENTER_CS& CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_LEGION_CAMPBATTLE_ENTER_CS* CMD_LEGION_CAMPBATTLE_ENTER_CS::default_instance_ = NULL;

CMD_LEGION_CAMPBATTLE_ENTER_CS* CMD_LEGION_CAMPBATTLE_ENTER_CS::New() const {
  return new CMD_LEGION_CAMPBATTLE_ENTER_CS;
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
    if (has_strvslegionname()) {
      if (strvslegionname_ != &::google::protobuf::internal::kEmptyString) {
        strvslegionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_LEGION_CAMPBATTLE_ENTER_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strVSLegionName;
        break;
      }

      // required string strVSLegionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strVSLegionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvslegionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strvslegionname().data(), this->strvslegionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  // required string strVSLegionName = 2;
  if (has_strvslegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvslegionname().data(), this->strvslegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strvslegionname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_LEGION_CAMPBATTLE_ENTER_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  // required string strVSLegionName = 2;
  if (has_strvslegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvslegionname().data(), this->strvslegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strvslegionname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_LEGION_CAMPBATTLE_ENTER_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

    // required string strVSLegionName = 2;
    if (has_strvslegionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvslegionname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_LEGION_CAMPBATTLE_ENTER_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_LEGION_CAMPBATTLE_ENTER_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::MergeFrom(const CMD_LEGION_CAMPBATTLE_ENTER_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
    if (from.has_strvslegionname()) {
      set_strvslegionname(from.strvslegionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::CopyFrom(const CMD_LEGION_CAMPBATTLE_ENTER_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_LEGION_CAMPBATTLE_ENTER_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_LEGION_CAMPBATTLE_ENTER_CS::Swap(CMD_LEGION_CAMPBATTLE_ENTER_CS* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(strvslegionname_, other->strvslegionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_LEGION_CAMPBATTLE_ENTER_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_LEGION_CAMPBATTLE_ENTER_CS_descriptor_;
  metadata.reflection = CMD_LEGION_CAMPBATTLE_ENTER_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_LEGION_CAMPBATTLE_BATTLE_CS::kICampIdFieldNumber;
const int CMD_LEGION_CAMPBATTLE_BATTLE_CS::kIBattleIdFieldNumber;
const int CMD_LEGION_CAMPBATTLE_BATTLE_CS::kStrMemNameFieldNumber;
const int CMD_LEGION_CAMPBATTLE_BATTLE_CS::kIStarFieldNumber;
#endif  // !_MSC_VER

CMD_LEGION_CAMPBATTLE_BATTLE_CS::CMD_LEGION_CAMPBATTLE_BATTLE_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::InitAsDefaultInstance() {
}

CMD_LEGION_CAMPBATTLE_BATTLE_CS::CMD_LEGION_CAMPBATTLE_BATTLE_CS(const CMD_LEGION_CAMPBATTLE_BATTLE_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  ibattleid_ = 0;
  strmemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_LEGION_CAMPBATTLE_BATTLE_CS::~CMD_LEGION_CAMPBATTLE_BATTLE_CS() {
  SharedDtor();
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::SharedDtor() {
  if (strmemname_ != &::google::protobuf::internal::kEmptyString) {
    delete strmemname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_LEGION_CAMPBATTLE_BATTLE_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_LEGION_CAMPBATTLE_BATTLE_CS_descriptor_;
}

const CMD_LEGION_CAMPBATTLE_BATTLE_CS& CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_LEGION_CAMPBATTLE_BATTLE_CS* CMD_LEGION_CAMPBATTLE_BATTLE_CS::default_instance_ = NULL;

CMD_LEGION_CAMPBATTLE_BATTLE_CS* CMD_LEGION_CAMPBATTLE_BATTLE_CS::New() const {
  return new CMD_LEGION_CAMPBATTLE_BATTLE_CS;
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
    ibattleid_ = 0;
    if (has_strmemname()) {
      if (strmemname_ != &::google::protobuf::internal::kEmptyString) {
        strmemname_->clear();
      }
    }
    istar_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_LEGION_CAMPBATTLE_BATTLE_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iBattleId;
        break;
      }

      // required int32 iBattleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iBattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibattleid_)));
          set_has_ibattleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strMemName;
        break;
      }

      // required string strMemName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strmemname().data(), this->strmemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iStar;
        break;
      }

      // required int32 iStar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istar_)));
          set_has_istar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  // required int32 iBattleId = 2;
  if (has_ibattleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ibattleid(), output);
  }

  // required string strMemName = 3;
  if (has_strmemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmemname().data(), this->strmemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strmemname(), output);
  }

  // required int32 iStar = 4;
  if (has_istar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->istar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_LEGION_CAMPBATTLE_BATTLE_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  // required int32 iBattleId = 2;
  if (has_ibattleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ibattleid(), target);
  }

  // required string strMemName = 3;
  if (has_strmemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmemname().data(), this->strmemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmemname(), target);
  }

  // required int32 iStar = 4;
  if (has_istar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->istar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_LEGION_CAMPBATTLE_BATTLE_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

    // required int32 iBattleId = 2;
    if (has_ibattleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibattleid());
    }

    // required string strMemName = 3;
    if (has_strmemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmemname());
    }

    // required int32 iStar = 4;
    if (has_istar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_LEGION_CAMPBATTLE_BATTLE_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_LEGION_CAMPBATTLE_BATTLE_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::MergeFrom(const CMD_LEGION_CAMPBATTLE_BATTLE_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
    if (from.has_ibattleid()) {
      set_ibattleid(from.ibattleid());
    }
    if (from.has_strmemname()) {
      set_strmemname(from.strmemname());
    }
    if (from.has_istar()) {
      set_istar(from.istar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::CopyFrom(const CMD_LEGION_CAMPBATTLE_BATTLE_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_LEGION_CAMPBATTLE_BATTLE_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CMD_LEGION_CAMPBATTLE_BATTLE_CS::Swap(CMD_LEGION_CAMPBATTLE_BATTLE_CS* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(ibattleid_, other->ibattleid_);
    std::swap(strmemname_, other->strmemname_);
    std::swap(istar_, other->istar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_LEGION_CAMPBATTLE_BATTLE_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_LEGION_CAMPBATTLE_BATTLE_CS_descriptor_;
  metadata.reflection = CMD_LEGION_CAMPBATTLE_BATTLE_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LastFightLogItem::kICampIdFieldNumber;
const int LastFightLogItem::kBIsGuardFieldNumber;
const int LastFightLogItem::kBIsWinFieldNumber;
#endif  // !_MSC_VER

LastFightLogItem::LastFightLogItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LastFightLogItem::InitAsDefaultInstance() {
}

LastFightLogItem::LastFightLogItem(const LastFightLogItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LastFightLogItem::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  bisguard_ = false;
  biswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastFightLogItem::~LastFightLogItem() {
  SharedDtor();
}

void LastFightLogItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LastFightLogItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastFightLogItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastFightLogItem_descriptor_;
}

const LastFightLogItem& LastFightLogItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

LastFightLogItem* LastFightLogItem::default_instance_ = NULL;

LastFightLogItem* LastFightLogItem::New() const {
  return new LastFightLogItem;
}

void LastFightLogItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
    bisguard_ = false;
    biswin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastFightLogItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsGuard;
        break;
      }

      // required bool bIsGuard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsGuard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisguard_)));
          set_has_bisguard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bIsWin;
        break;
      }

      // required bool bIsWin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biswin_)));
          set_has_biswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LastFightLogItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  // required bool bIsGuard = 2;
  if (has_bisguard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisguard(), output);
  }

  // required bool bIsWin = 3;
  if (has_biswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->biswin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LastFightLogItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  // required bool bIsGuard = 2;
  if (has_bisguard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisguard(), target);
  }

  // required bool bIsWin = 3;
  if (has_biswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->biswin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LastFightLogItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

    // required bool bIsGuard = 2;
    if (has_bisguard()) {
      total_size += 1 + 1;
    }

    // required bool bIsWin = 3;
    if (has_biswin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastFightLogItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastFightLogItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastFightLogItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastFightLogItem::MergeFrom(const LastFightLogItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
    if (from.has_bisguard()) {
      set_bisguard(from.bisguard());
    }
    if (from.has_biswin()) {
      set_biswin(from.biswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastFightLogItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastFightLogItem::CopyFrom(const LastFightLogItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastFightLogItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LastFightLogItem::Swap(LastFightLogItem* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(bisguard_, other->bisguard_);
    std::swap(biswin_, other->biswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastFightLogItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastFightLogItem_descriptor_;
  metadata.reflection = LastFightLogItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::kSzFightLogListFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::InitAsDefaultInstance() {
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::~CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC& CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC* CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC* CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::New() const {
  return new CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::Clear() {
  szfightloglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GSProto.LastFightLogItem szFightLogList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szFightLogList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szfightloglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_szFightLogList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GSProto.LastFightLogItem szFightLogList = 1;
  for (int i = 0; i < this->szfightloglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->szfightloglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GSProto.LastFightLogItem szFightLogList = 1;
  for (int i = 0; i < this->szfightloglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->szfightloglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::ByteSize() const {
  int total_size = 0;

  // repeated .GSProto.LastFightLogItem szFightLogList = 1;
  total_size += 1 * this->szfightloglist_size();
  for (int i = 0; i < this->szfightloglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szfightloglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::MergeFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  szfightloglist_.MergeFrom(from.szfightloglist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::CopyFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::IsInitialized() const {

  for (int i = 0; i < szfightloglist_size(); i++) {
    if (!this->szfightloglist(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::Swap(CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC* other) {
  if (other != this) {
    szfightloglist_.Swap(&other->szfightloglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_LASTFIGHT_LOG_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::kICampIdFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::InitAsDefaultInstance() {
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::~CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS& CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::New() const {
  return new CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::MergeFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::CopyFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::Swap(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VSLegionBase::kSzVSLegionListFieldNumber;
#endif  // !_MSC_VER

VSLegionBase::VSLegionBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VSLegionBase::InitAsDefaultInstance() {
}

VSLegionBase::VSLegionBase(const VSLegionBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VSLegionBase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VSLegionBase::~VSLegionBase() {
  SharedDtor();
}

void VSLegionBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VSLegionBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSLegionBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSLegionBase_descriptor_;
}

const VSLegionBase& VSLegionBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

VSLegionBase* VSLegionBase::default_instance_ = NULL;

VSLegionBase* VSLegionBase::New() const {
  return new VSLegionBase;
}

void VSLegionBase::Clear() {
  szvslegionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VSLegionBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GSProto.VSLegion szVSLegionList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szVSLegionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szvslegionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_szVSLegionList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VSLegionBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GSProto.VSLegion szVSLegionList = 1;
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->szvslegionlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VSLegionBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GSProto.VSLegion szVSLegionList = 1;
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->szvslegionlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VSLegionBase::ByteSize() const {
  int total_size = 0;

  // repeated .GSProto.VSLegion szVSLegionList = 1;
  total_size += 1 * this->szvslegionlist_size();
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szvslegionlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSLegionBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VSLegionBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VSLegionBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VSLegionBase::MergeFrom(const VSLegionBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  szvslegionlist_.MergeFrom(from.szvslegionlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VSLegionBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSLegionBase::CopyFrom(const VSLegionBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSLegionBase::IsInitialized() const {

  for (int i = 0; i < szvslegionlist_size(); i++) {
    if (!this->szvslegionlist(i).IsInitialized()) return false;
  }
  return true;
}

void VSLegionBase::Swap(VSLegionBase* other) {
  if (other != this) {
    szvslegionlist_.Swap(&other->szvslegionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VSLegionBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSLegionBase_descriptor_;
  metadata.reflection = VSLegionBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::kStrLegionNameFieldNumber;
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::kVsLegionMsgFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::InitAsDefaultInstance() {
  vslegionmsg_ = const_cast< ::GSProto::VSLegionBase*>(&::GSProto::VSLegionBase::default_instance());
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::SharedCtor() {
  _cached_size_ = 0;
  strlegionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vslegionmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::~CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::SharedDtor() {
  if (strlegionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strlegionname_;
  }
  if (this != default_instance_) {
    delete vslegionmsg_;
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC& CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::New() const {
  return new CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strlegionname()) {
      if (strlegionname_ != &::google::protobuf::internal::kEmptyString) {
        strlegionname_->clear();
      }
    }
    if (has_vslegionmsg()) {
      if (vslegionmsg_ != NULL) vslegionmsg_->::GSProto::VSLegionBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strLegionName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlegionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strlegionname().data(), this->strlegionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vsLegionMsg;
        break;
      }

      // required .GSProto.VSLegionBase vsLegionMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vsLegionMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vslegionmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strLegionName = 1;
  if (has_strlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlegionname().data(), this->strlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strlegionname(), output);
  }

  // required .GSProto.VSLegionBase vsLegionMsg = 2;
  if (has_vslegionmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vslegionmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strLegionName = 1;
  if (has_strlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlegionname().data(), this->strlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strlegionname(), target);
  }

  // required .GSProto.VSLegionBase vsLegionMsg = 2;
  if (has_vslegionmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vslegionmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strLegionName = 1;
    if (has_strlegionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strlegionname());
    }

    // required .GSProto.VSLegionBase vsLegionMsg = 2;
    if (has_vslegionmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vslegionmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::MergeFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strlegionname()) {
      set_strlegionname(from.strlegionname());
    }
    if (from.has_vslegionmsg()) {
      mutable_vslegionmsg()->::GSProto::VSLegionBase::MergeFrom(from.vslegionmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::CopyFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vslegionmsg()) {
    if (!this->vslegionmsg().IsInitialized()) return false;
  }
  return true;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::Swap(CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC* other) {
  if (other != this) {
    std::swap(strlegionname_, other->strlegionname_);
    std::swap(vslegionmsg_, other->vslegionmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_LASTFIGHT_SIMPLELOG_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::kICampIdFieldNumber;
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::kStrAttLegionNameFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::InitAsDefaultInstance() {
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  strattlegionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::~CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::SharedDtor() {
  if (strattlegionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strattlegionname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS& CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::New() const {
  return new CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
    if (has_strattlegionname()) {
      if (strattlegionname_ != &::google::protobuf::internal::kEmptyString) {
        strattlegionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strAttLegionName;
        break;
      }

      // required string strAttLegionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAttLegionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strattlegionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strattlegionname().data(), this->strattlegionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  // required string strAttLegionName = 2;
  if (has_strattlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strattlegionname().data(), this->strattlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strattlegionname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  // required string strAttLegionName = 2;
  if (has_strattlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strattlegionname().data(), this->strattlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strattlegionname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

    // required string strAttLegionName = 2;
    if (has_strattlegionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strattlegionname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::MergeFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
    if (from.has_strattlegionname()) {
      set_strattlegionname(from.strattlegionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::CopyFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::Swap(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(strattlegionname_, other->strattlegionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRecord::kStrSelfNameFieldNumber;
const int FightRecord::kStrenemyLegionNameFieldNumber;
const int FightRecord::kStrenemyNameFieldNumber;
const int FightRecord::kIGetStarCountFieldNumber;
#endif  // !_MSC_VER

FightRecord::FightRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRecord::InitAsDefaultInstance() {
}

FightRecord::FightRecord(const FightRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRecord::SharedCtor() {
  _cached_size_ = 0;
  strselfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strenemylegionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strenemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  igetstarcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRecord::~FightRecord() {
  SharedDtor();
}

void FightRecord::SharedDtor() {
  if (strselfname_ != &::google::protobuf::internal::kEmptyString) {
    delete strselfname_;
  }
  if (strenemylegionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strenemylegionname_;
  }
  if (strenemyname_ != &::google::protobuf::internal::kEmptyString) {
    delete strenemyname_;
  }
  if (this != default_instance_) {
  }
}

void FightRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRecord_descriptor_;
}

const FightRecord& FightRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

FightRecord* FightRecord::default_instance_ = NULL;

FightRecord* FightRecord::New() const {
  return new FightRecord;
}

void FightRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strselfname()) {
      if (strselfname_ != &::google::protobuf::internal::kEmptyString) {
        strselfname_->clear();
      }
    }
    if (has_strenemylegionname()) {
      if (strenemylegionname_ != &::google::protobuf::internal::kEmptyString) {
        strenemylegionname_->clear();
      }
    }
    if (has_strenemyname()) {
      if (strenemyname_ != &::google::protobuf::internal::kEmptyString) {
        strenemyname_->clear();
      }
    }
    igetstarcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strSelfName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strselfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strselfname().data(), this->strselfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strenemyLegionName;
        break;
      }

      // required string strenemyLegionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strenemyLegionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strenemylegionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strenemylegionname().data(), this->strenemylegionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strenemyName;
        break;
      }

      // required string strenemyName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strenemyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strenemyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strenemyname().data(), this->strenemyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iGetStarCount;
        break;
      }

      // required int32 iGetStarCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGetStarCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igetstarcount_)));
          set_has_igetstarcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strSelfName = 1;
  if (has_strselfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strselfname().data(), this->strselfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strselfname(), output);
  }

  // required string strenemyLegionName = 2;
  if (has_strenemylegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strenemylegionname().data(), this->strenemylegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strenemylegionname(), output);
  }

  // required string strenemyName = 3;
  if (has_strenemyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strenemyname().data(), this->strenemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strenemyname(), output);
  }

  // required int32 iGetStarCount = 4;
  if (has_igetstarcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->igetstarcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strSelfName = 1;
  if (has_strselfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strselfname().data(), this->strselfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strselfname(), target);
  }

  // required string strenemyLegionName = 2;
  if (has_strenemylegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strenemylegionname().data(), this->strenemylegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strenemylegionname(), target);
  }

  // required string strenemyName = 3;
  if (has_strenemyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strenemyname().data(), this->strenemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strenemyname(), target);
  }

  // required int32 iGetStarCount = 4;
  if (has_igetstarcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->igetstarcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strSelfName = 1;
    if (has_strselfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strselfname());
    }

    // required string strenemyLegionName = 2;
    if (has_strenemylegionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strenemylegionname());
    }

    // required string strenemyName = 3;
    if (has_strenemyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strenemyname());
    }

    // required int32 iGetStarCount = 4;
    if (has_igetstarcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igetstarcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRecord::MergeFrom(const FightRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strselfname()) {
      set_strselfname(from.strselfname());
    }
    if (from.has_strenemylegionname()) {
      set_strenemylegionname(from.strenemylegionname());
    }
    if (from.has_strenemyname()) {
      set_strenemyname(from.strenemyname());
    }
    if (from.has_igetstarcount()) {
      set_igetstarcount(from.igetstarcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRecord::CopyFrom(const FightRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FightRecord::Swap(FightRecord* other) {
  if (other != this) {
    std::swap(strselfname_, other->strselfname_);
    std::swap(strenemylegionname_, other->strenemylegionname_);
    std::swap(strenemyname_, other->strenemyname_);
    std::swap(igetstarcount_, other->igetstarcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRecord_descriptor_;
  metadata.reflection = FightRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::kVsLegionFieldNumber;
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::kSelfFightRecordFieldNumber;
const int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::kEnemyFightRecodFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::InitAsDefaultInstance() {
  vslegion_ = const_cast< ::GSProto::VSLegion*>(&::GSProto::VSLegion::default_instance());
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::SharedCtor() {
  _cached_size_ = 0;
  vslegion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::~CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC() {
  SharedDtor();
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::SharedDtor() {
  if (this != default_instance_) {
    delete vslegion_;
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_descriptor_;
}

const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC& CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::default_instance_ = NULL;

CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::New() const {
  return new CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_vslegion()) {
      if (vslegion_ != NULL) vslegion_->::GSProto::VSLegion::Clear();
    }
  }
  selffightrecord_.Clear();
  enemyfightrecod_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GSProto.VSLegion vsLegion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vslegion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfFightRecord;
        break;
      }

      // repeated .GSProto.FightRecord selfFightRecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfFightRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selffightrecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfFightRecord;
        if (input->ExpectTag(26)) goto parse_enemyFightRecod;
        break;
      }

      // repeated .GSProto.FightRecord enemyFightRecod = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyFightRecod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyfightrecod()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemyFightRecod;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GSProto.VSLegion vsLegion = 1;
  if (has_vslegion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vslegion(), output);
  }

  // repeated .GSProto.FightRecord selfFightRecord = 2;
  for (int i = 0; i < this->selffightrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selffightrecord(i), output);
  }

  // repeated .GSProto.FightRecord enemyFightRecod = 3;
  for (int i = 0; i < this->enemyfightrecod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemyfightrecod(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GSProto.VSLegion vsLegion = 1;
  if (has_vslegion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vslegion(), target);
  }

  // repeated .GSProto.FightRecord selfFightRecord = 2;
  for (int i = 0; i < this->selffightrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selffightrecord(i), target);
  }

  // repeated .GSProto.FightRecord enemyFightRecod = 3;
  for (int i = 0; i < this->enemyfightrecod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemyfightrecod(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GSProto.VSLegion vsLegion = 1;
    if (has_vslegion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vslegion());
    }

  }
  // repeated .GSProto.FightRecord selfFightRecord = 2;
  total_size += 1 * this->selffightrecord_size();
  for (int i = 0; i < this->selffightrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selffightrecord(i));
  }

  // repeated .GSProto.FightRecord enemyFightRecod = 3;
  total_size += 1 * this->enemyfightrecod_size();
  for (int i = 0; i < this->enemyfightrecod_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyfightrecod(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::MergeFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  selffightrecord_.MergeFrom(from.selffightrecord_);
  enemyfightrecod_.MergeFrom(from.enemyfightrecod_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vslegion()) {
      mutable_vslegion()->::GSProto::VSLegion::MergeFrom(from.vslegion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::CopyFrom(const CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_vslegion()) {
    if (!this->vslegion().IsInitialized()) return false;
  }
  for (int i = 0; i < selffightrecord_size(); i++) {
    if (!this->selffightrecord(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemyfightrecod_size(); i++) {
    if (!this->enemyfightrecod(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::Swap(CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC* other) {
  if (other != this) {
    std::swap(vslegion_, other->vslegion_);
    selffightrecord_.Swap(&other->selffightrecord_);
    enemyfightrecod_.Swap(&other->enemyfightrecod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_descriptor_;
  metadata.reflection = CMD_QUERY_CAMPBATTLE_LASTFIGHT_DETAIL_LOG_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CUR_FIGHT_CONDITION_CS::kICampIdFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CUR_FIGHT_CONDITION_CS::CMD_QUERY_CUR_FIGHT_CONDITION_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::InitAsDefaultInstance() {
}

CMD_QUERY_CUR_FIGHT_CONDITION_CS::CMD_QUERY_CUR_FIGHT_CONDITION_CS(const CMD_QUERY_CUR_FIGHT_CONDITION_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CUR_FIGHT_CONDITION_CS::~CMD_QUERY_CUR_FIGHT_CONDITION_CS() {
  SharedDtor();
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CUR_FIGHT_CONDITION_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CUR_FIGHT_CONDITION_CS_descriptor_;
}

const CMD_QUERY_CUR_FIGHT_CONDITION_CS& CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CUR_FIGHT_CONDITION_CS* CMD_QUERY_CUR_FIGHT_CONDITION_CS::default_instance_ = NULL;

CMD_QUERY_CUR_FIGHT_CONDITION_CS* CMD_QUERY_CUR_FIGHT_CONDITION_CS::New() const {
  return new CMD_QUERY_CUR_FIGHT_CONDITION_CS;
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CUR_FIGHT_CONDITION_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CUR_FIGHT_CONDITION_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CUR_FIGHT_CONDITION_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CUR_FIGHT_CONDITION_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CUR_FIGHT_CONDITION_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::MergeFrom(const CMD_QUERY_CUR_FIGHT_CONDITION_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::CopyFrom(const CMD_QUERY_CUR_FIGHT_CONDITION_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CUR_FIGHT_CONDITION_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CMD_QUERY_CUR_FIGHT_CONDITION_CS::Swap(CMD_QUERY_CUR_FIGHT_CONDITION_CS* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CUR_FIGHT_CONDITION_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CUR_FIGHT_CONDITION_CS_descriptor_;
  metadata.reflection = CMD_QUERY_CUR_FIGHT_CONDITION_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CUR_FIGHT_CONDITION_SC::kSzVSLegionListFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CUR_FIGHT_CONDITION_SC::CMD_QUERY_CUR_FIGHT_CONDITION_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::InitAsDefaultInstance() {
}

CMD_QUERY_CUR_FIGHT_CONDITION_SC::CMD_QUERY_CUR_FIGHT_CONDITION_SC(const CMD_QUERY_CUR_FIGHT_CONDITION_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CUR_FIGHT_CONDITION_SC::~CMD_QUERY_CUR_FIGHT_CONDITION_SC() {
  SharedDtor();
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CUR_FIGHT_CONDITION_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CUR_FIGHT_CONDITION_SC_descriptor_;
}

const CMD_QUERY_CUR_FIGHT_CONDITION_SC& CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CUR_FIGHT_CONDITION_SC* CMD_QUERY_CUR_FIGHT_CONDITION_SC::default_instance_ = NULL;

CMD_QUERY_CUR_FIGHT_CONDITION_SC* CMD_QUERY_CUR_FIGHT_CONDITION_SC::New() const {
  return new CMD_QUERY_CUR_FIGHT_CONDITION_SC;
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::Clear() {
  szvslegionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CUR_FIGHT_CONDITION_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GSProto.VSLegion szVSLegionList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szVSLegionList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_szvslegionlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_szVSLegionList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GSProto.VSLegion szVSLegionList = 1;
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->szvslegionlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CUR_FIGHT_CONDITION_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GSProto.VSLegion szVSLegionList = 1;
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->szvslegionlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CUR_FIGHT_CONDITION_SC::ByteSize() const {
  int total_size = 0;

  // repeated .GSProto.VSLegion szVSLegionList = 1;
  total_size += 1 * this->szvslegionlist_size();
  for (int i = 0; i < this->szvslegionlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->szvslegionlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CUR_FIGHT_CONDITION_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CUR_FIGHT_CONDITION_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::MergeFrom(const CMD_QUERY_CUR_FIGHT_CONDITION_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  szvslegionlist_.MergeFrom(from.szvslegionlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::CopyFrom(const CMD_QUERY_CUR_FIGHT_CONDITION_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CUR_FIGHT_CONDITION_SC::IsInitialized() const {

  for (int i = 0; i < szvslegionlist_size(); i++) {
    if (!this->szvslegionlist(i).IsInitialized()) return false;
  }
  return true;
}

void CMD_QUERY_CUR_FIGHT_CONDITION_SC::Swap(CMD_QUERY_CUR_FIGHT_CONDITION_SC* other) {
  if (other != this) {
    szvslegionlist_.Swap(&other->szvslegionlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CUR_FIGHT_CONDITION_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CUR_FIGHT_CONDITION_SC_descriptor_;
  metadata.reflection = CMD_QUERY_CUR_FIGHT_CONDITION_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::kICampIdFieldNumber;
const int CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::kStrAttLegionNameFieldNumber;
#endif  // !_MSC_VER

CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::InitAsDefaultInstance() {
}

CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS(const CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::SharedCtor() {
  _cached_size_ = 0;
  icampid_ = 0;
  strattlegionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::~CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS() {
  SharedDtor();
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::SharedDtor() {
  if (strattlegionname_ != &::google::protobuf::internal::kEmptyString) {
    delete strattlegionname_;
  }
  if (this != default_instance_) {
  }
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_descriptor_;
}

const CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS& CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameServerExt_2eproto();
  return *default_instance_;
}

CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS* CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::default_instance_ = NULL;

CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS* CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::New() const {
  return new CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS;
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icampid_ = 0;
    if (has_strattlegionname()) {
      if (strattlegionname_ != &::google::protobuf::internal::kEmptyString) {
        strattlegionname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCampId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icampid_)));
          set_has_icampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strAttLegionName;
        break;
      }

      // required string strAttLegionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAttLegionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strattlegionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strattlegionname().data(), this->strattlegionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icampid(), output);
  }

  // required string strAttLegionName = 2;
  if (has_strattlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strattlegionname().data(), this->strattlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strattlegionname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCampId = 1;
  if (has_icampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icampid(), target);
  }

  // required string strAttLegionName = 2;
  if (has_strattlegionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strattlegionname().data(), this->strattlegionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strattlegionname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCampId = 1;
    if (has_icampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icampid());
    }

    // required string strAttLegionName = 2;
    if (has_strattlegionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strattlegionname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::MergeFrom(const CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icampid()) {
      set_icampid(from.icampid());
    }
    if (from.has_strattlegionname()) {
      set_strattlegionname(from.strattlegionname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::CopyFrom(const CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::Swap(CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS* other) {
  if (other != this) {
    std::swap(icampid_, other->icampid_);
    std::swap(strattlegionname_, other->strattlegionname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_descriptor_;
  metadata.reflection = CMD_QUERY_CUR_FIGHT_LEGION_LOG_CS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GSProto

// @@protoc_insertion_point(global_scope)

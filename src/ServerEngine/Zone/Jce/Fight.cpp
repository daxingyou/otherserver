// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Fight.jce'
// **********************************************************************

#include "Fight.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace ServerEngine
{

    taf::Int32 FightProxy::continueMultiPVEFight(ServerEngine::BattleData &battleInfo, const ServerEngine::ActorCreateContext &roleInfo, const vector<taf::Int32> &monsterGrpList, const ServerEngine::FightContext &ctx, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(battleInfo, 1);
        _os.write(roleInfo, 2);
        _os.write(monsterGrpList, 3);
        _os.write(ctx, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"continueMultiPVEFight", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(battleInfo, 1, true);
        return _ret;
    }

    void Fight::async_response_continueMultiPVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("battleInfo", battleInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(battleInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void FightProxy::async_continueMultiPVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext &roleInfo,const vector<taf::Int32> &monsterGrpList,const ServerEngine::FightContext &ctx,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(roleInfo, 2);
        _os.write(monsterGrpList, 3);
        _os.write(ctx, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"continueMultiPVEFight", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 FightProxy::continuePVEFight(ServerEngine::BattleData &battleInfo, const ServerEngine::ActorCreateContext &roleInfo, taf::Int32 iMonsterGrpID, const ServerEngine::FightContext &ctx, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(battleInfo, 1);
        _os.write(roleInfo, 2);
        _os.write(iMonsterGrpID, 3);
        _os.write(ctx, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"continuePVEFight", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(battleInfo, 1, true);
        return _ret;
    }

    void Fight::async_response_continuePVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("battleInfo", battleInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(battleInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void FightProxy::async_continuePVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext &roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext &ctx,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(roleInfo, 2);
        _os.write(iMonsterGrpID, 3);
        _os.write(ctx, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"continuePVEFight", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 FightProxy::continuePVPFight(ServerEngine::BattleData &battleInfo, const ServerEngine::ActorCreateContext &attRoleInfo, const ServerEngine::ActorCreateContext &targetRileInfo, const ServerEngine::FightContext &ctx, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(battleInfo, 1);
        _os.write(attRoleInfo, 2);
        _os.write(targetRileInfo, 3);
        _os.write(ctx, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"continuePVPFight", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(battleInfo, 1, true);
        return _ret;
    }

    void Fight::async_response_continuePVPFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("battleInfo", battleInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(battleInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void FightProxy::async_continuePVPFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext &attRoleInfo,const ServerEngine::ActorCreateContext &targetRileInfo,const ServerEngine::FightContext &ctx,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(attRoleInfo, 2);
        _os.write(targetRileInfo, 3);
        _os.write(ctx, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"continuePVPFight", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 FightProxy::doMultiPVEFight(ServerEngine::BattleData &battleInfo, const ServerEngine::ActorCreateContext &roleInfo, const vector<taf::Int32> &monsterGrpList, const ServerEngine::FightContext &ctx, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(battleInfo, 1);
        _os.write(roleInfo, 2);
        _os.write(monsterGrpList, 3);
        _os.write(ctx, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"doMultiPVEFight", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(battleInfo, 1, true);
        return _ret;
    }

    void Fight::async_response_doMultiPVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("battleInfo", battleInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(battleInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void FightProxy::async_doMultiPVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext &roleInfo,const vector<taf::Int32> &monsterGrpList,const ServerEngine::FightContext &ctx,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(roleInfo, 2);
        _os.write(monsterGrpList, 3);
        _os.write(ctx, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"doMultiPVEFight", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 FightProxy::doPVEFight(ServerEngine::BattleData &battleInfo, const ServerEngine::ActorCreateContext &roleInfo, taf::Int32 iMonsterGrpID, const ServerEngine::FightContext &ctx, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(battleInfo, 1);
        _os.write(roleInfo, 2);
        _os.write(iMonsterGrpID, 3);
        _os.write(ctx, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"doPVEFight", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(battleInfo, 1, true);
        return _ret;
    }

    void Fight::async_response_doPVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("battleInfo", battleInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(battleInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void FightProxy::async_doPVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext &roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext &ctx,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(roleInfo, 2);
        _os.write(iMonsterGrpID, 3);
        _os.write(ctx, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"doPVEFight", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 FightProxy::doPVPFight(ServerEngine::BattleData &battleInfo, const ServerEngine::ActorCreateContext &attRoleInfo, const ServerEngine::ActorCreateContext &targetRileInfo, const ServerEngine::FightContext &ctx, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(battleInfo, 1);
        _os.write(attRoleInfo, 2);
        _os.write(targetRileInfo, 3);
        _os.write(ctx, 4);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"doPVPFight", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(battleInfo, 1, true);
        return _ret;
    }

    void Fight::async_response_doPVPFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("battleInfo", battleInfo);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(battleInfo, 1);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void FightProxy::async_doPVPFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext &attRoleInfo,const ServerEngine::ActorCreateContext &targetRileInfo,const ServerEngine::FightContext &ctx,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(attRoleInfo, 2);
        _os.write(targetRileInfo, 3);
        _os.write(ctx, 4);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"doPVPFight", _os.getByteBuffer(), context, status, callback);
    }

    FightProxy* FightProxy::taf_hash(int64_t key)
    {
        return (FightProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __ServerEngine__Fight_all[]=
    {
        "continueMultiPVEFight",
        "continuePVEFight",
        "continuePVPFight",
        "doMultiPVEFight",
        "doPVEFight",
        "doPVPFight"
    };

    int FightPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__ServerEngine__Fight_all, __ServerEngine__Fight_all+6, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __ServerEngine__Fight_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_continueMultiPVEFight_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                ServerEngine::BattleData battleInfo;
                _is.read(battleInfo, 1, true);
                callback_continueMultiPVEFight(_ret, battleInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_continuePVEFight_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                ServerEngine::BattleData battleInfo;
                _is.read(battleInfo, 1, true);
                callback_continuePVEFight(_ret, battleInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_continuePVPFight_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                ServerEngine::BattleData battleInfo;
                _is.read(battleInfo, 1, true);
                callback_continuePVPFight(_ret, battleInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_doMultiPVEFight_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                ServerEngine::BattleData battleInfo;
                _is.read(battleInfo, 1, true);
                callback_doMultiPVEFight(_ret, battleInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_doPVEFight_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                ServerEngine::BattleData battleInfo;
                _is.read(battleInfo, 1, true);
                callback_doPVEFight(_ret, battleInfo);
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_doPVPFight_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                ServerEngine::BattleData battleInfo;
                _is.read(battleInfo, 1, true);
                callback_doPVPFight(_ret, battleInfo);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int Fight::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__ServerEngine__Fight_all, __ServerEngine__Fight_all+6, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __ServerEngine__Fight_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::BattleData battleInfo;
                ServerEngine::ActorCreateContext roleInfo;
                vector<taf::Int32> monsterGrpList;
                ServerEngine::FightContext ctx;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("battleInfo", battleInfo, battleInfo);
                    tafAttr.get("roleInfo", roleInfo);
                    tafAttr.get("monsterGrpList", monsterGrpList);
                    tafAttr.get("ctx", ctx);
                }
                else
                {
                    _is.read(battleInfo, 1, false);
                    _is.read(roleInfo, 2, true);
                    _is.read(monsterGrpList, 3, true);
                    _is.read(ctx, 4, true);
                }
                taf::Int32 _ret = continueMultiPVEFight(battleInfo,roleInfo,monsterGrpList,ctx, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("battleInfo", battleInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(battleInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::BattleData battleInfo;
                ServerEngine::ActorCreateContext roleInfo;
                taf::Int32 iMonsterGrpID;
                ServerEngine::FightContext ctx;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("battleInfo", battleInfo, battleInfo);
                    tafAttr.get("roleInfo", roleInfo);
                    tafAttr.get("iMonsterGrpID", iMonsterGrpID);
                    tafAttr.get("ctx", ctx);
                }
                else
                {
                    _is.read(battleInfo, 1, false);
                    _is.read(roleInfo, 2, true);
                    _is.read(iMonsterGrpID, 3, true);
                    _is.read(ctx, 4, true);
                }
                taf::Int32 _ret = continuePVEFight(battleInfo,roleInfo,iMonsterGrpID,ctx, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("battleInfo", battleInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(battleInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::BattleData battleInfo;
                ServerEngine::ActorCreateContext attRoleInfo;
                ServerEngine::ActorCreateContext targetRileInfo;
                ServerEngine::FightContext ctx;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("battleInfo", battleInfo, battleInfo);
                    tafAttr.get("attRoleInfo", attRoleInfo);
                    tafAttr.get("targetRileInfo", targetRileInfo);
                    tafAttr.get("ctx", ctx);
                }
                else
                {
                    _is.read(battleInfo, 1, false);
                    _is.read(attRoleInfo, 2, true);
                    _is.read(targetRileInfo, 3, true);
                    _is.read(ctx, 4, true);
                }
                taf::Int32 _ret = continuePVPFight(battleInfo,attRoleInfo,targetRileInfo,ctx, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("battleInfo", battleInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(battleInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::BattleData battleInfo;
                ServerEngine::ActorCreateContext roleInfo;
                vector<taf::Int32> monsterGrpList;
                ServerEngine::FightContext ctx;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("battleInfo", battleInfo, battleInfo);
                    tafAttr.get("roleInfo", roleInfo);
                    tafAttr.get("monsterGrpList", monsterGrpList);
                    tafAttr.get("ctx", ctx);
                }
                else
                {
                    _is.read(battleInfo, 1, false);
                    _is.read(roleInfo, 2, true);
                    _is.read(monsterGrpList, 3, true);
                    _is.read(ctx, 4, true);
                }
                taf::Int32 _ret = doMultiPVEFight(battleInfo,roleInfo,monsterGrpList,ctx, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("battleInfo", battleInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(battleInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::BattleData battleInfo;
                ServerEngine::ActorCreateContext roleInfo;
                taf::Int32 iMonsterGrpID;
                ServerEngine::FightContext ctx;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("battleInfo", battleInfo, battleInfo);
                    tafAttr.get("roleInfo", roleInfo);
                    tafAttr.get("iMonsterGrpID", iMonsterGrpID);
                    tafAttr.get("ctx", ctx);
                }
                else
                {
                    _is.read(battleInfo, 1, false);
                    _is.read(roleInfo, 2, true);
                    _is.read(iMonsterGrpID, 3, true);
                    _is.read(ctx, 4, true);
                }
                taf::Int32 _ret = doPVEFight(battleInfo,roleInfo,iMonsterGrpID,ctx, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("battleInfo", battleInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(battleInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::BattleData battleInfo;
                ServerEngine::ActorCreateContext attRoleInfo;
                ServerEngine::ActorCreateContext targetRileInfo;
                ServerEngine::FightContext ctx;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.getByDefault("battleInfo", battleInfo, battleInfo);
                    tafAttr.get("attRoleInfo", attRoleInfo);
                    tafAttr.get("targetRileInfo", targetRileInfo);
                    tafAttr.get("ctx", ctx);
                }
                else
                {
                    _is.read(battleInfo, 1, false);
                    _is.read(attRoleInfo, 2, true);
                    _is.read(targetRileInfo, 3, true);
                    _is.read(ctx, 4, true);
                }
                taf::Int32 _ret = doPVPFight(battleInfo,attRoleInfo,targetRileInfo,ctx, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("battleInfo", battleInfo);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(battleInfo, 1);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}


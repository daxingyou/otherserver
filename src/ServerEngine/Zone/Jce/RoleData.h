// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `RoleData.jce'
// **********************************************************************

#ifndef __ROLEDATA_H_
#define __ROLEDATA_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "DalMoDef.h"


namespace ServerEngine
{
    struct RoleBase : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.RoleBase";
        }
        static string MD5()
        {
            return "0bd75a8b0f0beb6a03cae61236330c79";
        }
        RoleBase()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(roleIntPropset, 0);
            _os.write(roleStringPropset, 1);
            _os.write(roleFloatPropset, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(roleIntPropset, 0, true);
            _is.read(roleStringPropset, 1, true);
            _is.read(roleFloatPropset, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(roleIntPropset,"roleIntPropset");
            _ds.display(roleStringPropset,"roleStringPropset");
            _ds.display(roleFloatPropset,"roleFloatPropset");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(roleIntPropset, true);
            _ds.displaySimple(roleStringPropset, true);
            _ds.displaySimple(roleFloatPropset, false);
            return _os;
        }
    public:
        map<taf::Int32, taf::Int32> roleIntPropset;
        map<taf::Int32, std::string> roleStringPropset;
        map<taf::Int32, taf::Float> roleFloatPropset;
    };
    inline bool operator==(const RoleBase&l, const RoleBase&r)
    {
        return l.roleIntPropset == r.roleIntPropset && l.roleStringPropset == r.roleStringPropset && l.roleFloatPropset == r.roleFloatPropset;
    }
    inline bool operator!=(const RoleBase&l, const RoleBase&r)
    {
        return !(l == r);
    }

    struct RoleSaveData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.RoleSaveData";
        }
        static string MD5()
        {
            return "f8b0d966b7fc31f16fb99860a19dbeaf";
        }
        RoleSaveData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(basePropData, 0);
            _os.write(subsystemData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(basePropData, 0, true);
            _is.read(subsystemData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(basePropData,"basePropData");
            _ds.display(subsystemData,"subsystemData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(basePropData, true);
            _ds.displaySimple(subsystemData, false);
            return _os;
        }
    public:
        ServerEngine::RoleBase basePropData;
        map<taf::Int32, std::string> subsystemData;
    };
    inline bool operator==(const RoleSaveData&l, const RoleSaveData&r)
    {
        return l.basePropData == r.basePropData && l.subsystemData == r.subsystemData;
    }
    inline bool operator!=(const RoleSaveData&l, const RoleSaveData&r)
    {
        return !(l == r);
    }

    struct ActorCreateContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ActorCreateContext";
        }
        static string MD5()
        {
            return "ae045161b4829289be30b5ad31cf9cfb";
        }
        ActorCreateContext()
        :strAccount(""),strRsAddress(""),ddCon(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strAccount, 0);
            _os.write(strRsAddress, 1);
            _os.write(ddCon, 2);
            _os.write(data, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strAccount, 0, true);
            _is.read(strRsAddress, 1, true);
            _is.read(ddCon, 2, true);
            _is.read(data, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strAccount,"strAccount");
            _ds.display(strRsAddress,"strRsAddress");
            _ds.display(ddCon,"ddCon");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strAccount, true);
            _ds.displaySimple(strRsAddress, true);
            _ds.displaySimple(ddCon, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        std::string strAccount;
        std::string strRsAddress;
        taf::Int64 ddCon;
        ServerEngine::RoleSaveData data;
    };
    inline bool operator==(const ActorCreateContext&l, const ActorCreateContext&r)
    {
        return l.strAccount == r.strAccount && l.strRsAddress == r.strRsAddress && l.ddCon == r.ddCon && l.data == r.data;
    }
    inline bool operator!=(const ActorCreateContext&l, const ActorCreateContext&r)
    {
        return !(l == r);
    }

    struct MNCreateContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.MNCreateContext";
        }
        static string MD5()
        {
            return "b6a49a2ef7ff33e8e1bacd07f26c5d96";
        }
        MNCreateContext()
        :nBaseId(0),dwEntityID(0),iFixLevel(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nBaseId, 0);
            _os.write(dwEntityID, 1);
            _os.write(iFixLevel, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(nBaseId, 0, true);
            _is.read(dwEntityID, 1, true);
            _is.read(iFixLevel, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nBaseId,"nBaseId");
            _ds.display(dwEntityID,"dwEntityID");
            _ds.display(iFixLevel,"iFixLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nBaseId, true);
            _ds.displaySimple(dwEntityID, true);
            _ds.displaySimple(iFixLevel, false);
            return _os;
        }
    public:
        taf::Int32 nBaseId;
        taf::UInt32 dwEntityID;
        taf::Int32 iFixLevel;
    };
    inline bool operator==(const MNCreateContext&l, const MNCreateContext&r)
    {
        return l.nBaseId == r.nBaseId && l.dwEntityID == r.dwEntityID && l.iFixLevel == r.iFixLevel;
    }
    inline bool operator!=(const MNCreateContext&l, const MNCreateContext&r)
    {
        return !(l == r);
    }

    struct NpcCreateContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.NpcCreateContext";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        NpcCreateContext()
        :nBaseId(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nBaseId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(nBaseId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nBaseId,"nBaseId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nBaseId, false);
            return _os;
        }
    public:
        taf::Int32 nBaseId;
    };
    inline bool operator==(const NpcCreateContext&l, const NpcCreateContext&r)
    {
        return l.nBaseId == r.nBaseId;
    }
    inline bool operator!=(const NpcCreateContext&l, const NpcCreateContext&r)
    {
        return !(l == r);
    }

    struct TimeResetValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.TimeResetValue";
        }
        static string MD5()
        {
            return "eaca2a0c592d19269a1dca659a31efd9";
        }
        TimeResetValue()
        :dwLastChgTime(0),iValue(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwLastChgTime, 0);
            _os.write(iValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(dwLastChgTime, 0, true);
            _is.read(iValue, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwLastChgTime,"dwLastChgTime");
            _ds.display(iValue,"iValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwLastChgTime, true);
            _ds.displaySimple(iValue, false);
            return _os;
        }
    public:
        taf::UInt32 dwLastChgTime;
        taf::Int32 iValue;
    };
    inline bool operator==(const TimeResetValue&l, const TimeResetValue&r)
    {
        return l.dwLastChgTime == r.dwLastChgTime && l.iValue == r.iValue;
    }
    inline bool operator!=(const TimeResetValue&l, const TimeResetValue&r)
    {
        return !(l == r);
    }

    struct HeroSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.HeroSystemData";
        }
        static string MD5()
        {
            return "723e02d7825e624066609f052cece938";
        }
        HeroSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(heroList, 0);
            _os.write(heroConvertData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(heroList, 0, true);
            _is.read(heroConvertData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(heroList,"heroList");
            _ds.display(heroConvertData,"heroConvertData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(heroList, true);
            _ds.displaySimple(heroConvertData, false);
            return _os;
        }
    public:
        vector<ServerEngine::RoleSaveData> heroList;
        ServerEngine::TimeResetValue heroConvertData;
    };
    inline bool operator==(const HeroSystemData&l, const HeroSystemData&r)
    {
        return l.heroList == r.heroList && l.heroConvertData == r.heroConvertData;
    }
    inline bool operator!=(const HeroSystemData&l, const HeroSystemData&r)
    {
        return !(l == r);
    }

    struct TallentData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.TallentData";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        TallentData()
        :iTallentID(0),iLevel(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTallentID, 0);
            _os.write(iLevel, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iTallentID, 0, true);
            _is.read(iLevel, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTallentID,"iTallentID");
            _ds.display(iLevel,"iLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTallentID, true);
            _ds.displaySimple(iLevel, false);
            return _os;
        }
    public:
        taf::Int32 iTallentID;
        taf::Int32 iLevel;
    };
    inline bool operator==(const TallentData&l, const TallentData&r)
    {
        return l.iTallentID == r.iTallentID && l.iLevel == r.iLevel;
    }
    inline bool operator!=(const TallentData&l, const TallentData&r)
    {
        return !(l == r);
    }

    struct HeroTallentSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.HeroTallentSystemData";
        }
        static string MD5()
        {
            return "8cfae413cb0a8c81e04ccdbb2943d2ca";
        }
        HeroTallentSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tallentList, 0);
            _os.write(favoriteIDList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(tallentList, 0, true);
            _is.read(favoriteIDList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tallentList,"tallentList");
            _ds.display(favoriteIDList,"favoriteIDList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tallentList, true);
            _ds.displaySimple(favoriteIDList, false);
            return _os;
        }
    public:
        vector<ServerEngine::TallentData> tallentList;
        map<taf::Int32, taf::Int32> favoriteIDList;
    };
    inline bool operator==(const HeroTallentSystemData&l, const HeroTallentSystemData&r)
    {
        return l.tallentList == r.tallentList && l.favoriteIDList == r.favoriteIDList;
    }
    inline bool operator!=(const HeroTallentSystemData&l, const HeroTallentSystemData&r)
    {
        return !(l == r);
    }

    struct FormationItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FormationItem";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FormationItem()
        :strUUID("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strUUID, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strUUID, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strUUID,"strUUID");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strUUID, false);
            return _os;
        }
    public:
        std::string strUUID;
    };
    inline bool operator==(const FormationItem&l, const FormationItem&r)
    {
        return l.strUUID == r.strUUID;
    }
    inline bool operator!=(const FormationItem&l, const FormationItem&r)
    {
        return !(l == r);
    }

    struct FormationSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FormationSystemData";
        }
        static string MD5()
        {
            return "6e170cc5746e26068ca68273938dff2d";
        }
        FormationSystemData()
        :iVisibleHeroId(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(formationList, 0);
            _os.write(iVisibleHeroId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(formationList, 0, true);
            _is.read(iVisibleHeroId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(formationList,"formationList");
            _ds.display(iVisibleHeroId,"iVisibleHeroId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(formationList, true);
            _ds.displaySimple(iVisibleHeroId, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::FormationItem> formationList;
        taf::Int32 iVisibleHeroId;
    };
    inline bool operator==(const FormationSystemData&l, const FormationSystemData&r)
    {
        return l.formationList == r.formationList && l.iVisibleHeroId == r.iVisibleHeroId;
    }
    inline bool operator!=(const FormationSystemData&l, const FormationSystemData&r)
    {
        return !(l == r);
    }

    struct XilianPropItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.XilianPropItem";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        XilianPropItem()
        :propId(0),value(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(propId, 0);
            _os.write(value, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(propId, 0, true);
            _is.read(value, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(propId,"propId");
            _ds.display(value,"value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(propId, true);
            _ds.displaySimple(value, false);
            return _os;
        }
    public:
        taf::Int32 propId;
        taf::Int32 value;
    };
    inline bool operator==(const XilianPropItem&l, const XilianPropItem&r)
    {
        return l.propId == r.propId && l.value == r.value;
    }
    inline bool operator!=(const XilianPropItem&l, const XilianPropItem&r)
    {
        return !(l == r);
    }

    struct EquipData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.EquipData";
        }
        static string MD5()
        {
            return "459ece13a2e555bcb9c2e3766c9216fa";
        }
        EquipData()
        :iLevel(0),iEnhanceMoney(0),iRandomPropID(0),iRandomValue(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iLevel, 0);
            _os.write(iEnhanceMoney, 1);
            _os.write(iRandomPropID, 2);
            _os.write(iRandomValue, 3);
            _os.write(xilianPropList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iLevel, 0, true);
            _is.read(iEnhanceMoney, 1, true);
            _is.read(iRandomPropID, 2, false);
            _is.read(iRandomValue, 3, false);
            _is.read(xilianPropList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iLevel,"iLevel");
            _ds.display(iEnhanceMoney,"iEnhanceMoney");
            _ds.display(iRandomPropID,"iRandomPropID");
            _ds.display(iRandomValue,"iRandomValue");
            _ds.display(xilianPropList,"xilianPropList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(iEnhanceMoney, true);
            _ds.displaySimple(iRandomPropID, true);
            _ds.displaySimple(iRandomValue, true);
            _ds.displaySimple(xilianPropList, false);
            return _os;
        }
    public:
        taf::Int32 iLevel;
        taf::Int32 iEnhanceMoney;
        taf::Int32 iRandomPropID;
        taf::Int32 iRandomValue;
        vector<ServerEngine::XilianPropItem> xilianPropList;
    };
    inline bool operator==(const EquipData&l, const EquipData&r)
    {
        return l.iLevel == r.iLevel && l.iEnhanceMoney == r.iEnhanceMoney && l.iRandomPropID == r.iRandomPropID && l.iRandomValue == r.iRandomValue && l.xilianPropList == r.xilianPropList;
    }
    inline bool operator!=(const EquipData&l, const EquipData&r)
    {
        return !(l == r);
    }

    struct ItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ItemData";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        ItemData()
        :iItemID(0),iStackCount(0),strEquipData("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iItemID, 0);
            _os.write(iStackCount, 1);
            _os.write(strEquipData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iItemID, 0, true);
            _is.read(iStackCount, 1, true);
            _is.read(strEquipData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iItemID,"iItemID");
            _ds.display(iStackCount,"iStackCount");
            _ds.display(strEquipData,"strEquipData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iItemID, true);
            _ds.displaySimple(iStackCount, true);
            _ds.displaySimple(strEquipData, false);
            return _os;
        }
    public:
        taf::Int32 iItemID;
        taf::Int32 iStackCount;
        std::string strEquipData;
    };
    inline bool operator==(const ItemData&l, const ItemData&r)
    {
        return l.iItemID == r.iItemID && l.iStackCount == r.iStackCount && l.strEquipData == r.strEquipData;
    }
    inline bool operator!=(const ItemData&l, const ItemData&r)
    {
        return !(l == r);
    }

    struct ItemSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ItemSystemData";
        }
        static string MD5()
        {
            return "f9d4215edfb87acfabcacfcfd96e4360";
        }
        ItemSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(buyPhyStengthCount, 1);
            _os.write(iChatResetVal, 2);
            _os.write(convertMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(itemList, 0, true);
            _is.read(buyPhyStengthCount, 1, false);
            _is.read(iChatResetVal, 2, false);
            _is.read(convertMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(buyPhyStengthCount,"buyPhyStengthCount");
            _ds.display(iChatResetVal,"iChatResetVal");
            _ds.display(convertMap,"convertMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(buyPhyStengthCount, true);
            _ds.displaySimple(iChatResetVal, true);
            _ds.displaySimple(convertMap, false);
            return _os;
        }
    public:
        vector<ServerEngine::ItemData> itemList;
        ServerEngine::TimeResetValue buyPhyStengthCount;
        ServerEngine::TimeResetValue iChatResetVal;
        map<std::string, taf::Bool> convertMap;
    };
    inline bool operator==(const ItemSystemData&l, const ItemSystemData&r)
    {
        return l.itemList == r.itemList && l.buyPhyStengthCount == r.buyPhyStengthCount && l.iChatResetVal == r.iChatResetVal && l.convertMap == r.convertMap;
    }
    inline bool operator!=(const ItemSystemData&l, const ItemSystemData&r)
    {
        return !(l == r);
    }

    struct EquipBagSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.EquipBagSystemData";
        }
        static string MD5()
        {
            return "cdb2ae65d754a13d9311b54f4cd775fb";
        }
        EquipBagSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(equipList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(equipList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(equipList,"equipList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(equipList, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::ItemData> equipList;
    };
    inline bool operator==(const EquipBagSystemData&l, const EquipBagSystemData&r)
    {
        return l.equipList == r.equipList;
    }
    inline bool operator!=(const EquipBagSystemData&l, const EquipBagSystemData&r)
    {
        return !(l == r);
    }

    struct HeroRealEquipSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.HeroRealEquipSystemData";
        }
        static string MD5()
        {
            return "cdb2ae65d754a13d9311b54f4cd775fb";
        }
        HeroRealEquipSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(equipList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(equipList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(equipList,"equipList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(equipList, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::ItemData> equipList;
    };
    inline bool operator==(const HeroRealEquipSystemData&l, const HeroRealEquipSystemData&r)
    {
        return l.equipList == r.equipList;
    }
    inline bool operator!=(const HeroRealEquipSystemData&l, const HeroRealEquipSystemData&r)
    {
        return !(l == r);
    }

    struct FightUseItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FightUseItem";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        FightUseItem()
        :iActionIndex(0),iResultsetIndex(0),iPost(0),iActorSkillID(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iActionIndex, 0);
            _os.write(iResultsetIndex, 1);
            _os.write(iPost, 2);
            _os.write(iActorSkillID, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iActionIndex, 0, true);
            _is.read(iResultsetIndex, 1, true);
            _is.read(iPost, 2, true);
            _is.read(iActorSkillID, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iActionIndex,"iActionIndex");
            _ds.display(iResultsetIndex,"iResultsetIndex");
            _ds.display(iPost,"iPost");
            _ds.display(iActorSkillID,"iActorSkillID");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iActionIndex, true);
            _ds.displaySimple(iResultsetIndex, true);
            _ds.displaySimple(iPost, true);
            _ds.displaySimple(iActorSkillID, false);
            return _os;
        }
    public:
        taf::Int32 iActionIndex;
        taf::Int32 iResultsetIndex;
        taf::Int32 iPost;
        taf::Int32 iActorSkillID;
    };
    inline bool operator==(const FightUseItem&l, const FightUseItem&r)
    {
        return l.iActionIndex == r.iActionIndex && l.iResultsetIndex == r.iResultsetIndex && l.iPost == r.iPost && l.iActorSkillID == r.iActorSkillID;
    }
    inline bool operator!=(const FightUseItem&l, const FightUseItem&r)
    {
        return !(l == r);
    }

    struct BattleData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.BattleData";
        }
        static string MD5()
        {
            return "fdaa84a00a731419d545ca566b810f50";
        }
        BattleData()
        :bAttackerWin(0),strBattleBody(""),iStar(0),bQuit(0),bQuitSuccess(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bAttackerWin, 0);
            _os.write(FightKey, 1);
            _os.write(strBattleBody, 2);
            _os.write(iStar, 3);
            _os.write(randValueList, 4);
            _os.write(useItemList, 5);
            _os.write(bQuit, 6);
            _os.write(bQuitSuccess, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(bAttackerWin, 0, true);
            _is.read(FightKey, 1, true);
            _is.read(strBattleBody, 2, true);
            _is.read(iStar, 3, true);
            _is.read(randValueList, 4, false);
            _is.read(useItemList, 5, false);
            _is.read(bQuit, 6, false);
            _is.read(bQuitSuccess, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bAttackerWin,"bAttackerWin");
            _ds.display(FightKey,"FightKey");
            _ds.display(strBattleBody,"strBattleBody");
            _ds.display(iStar,"iStar");
            _ds.display(randValueList,"randValueList");
            _ds.display(useItemList,"useItemList");
            _ds.display(bQuit,"bQuit");
            _ds.display(bQuitSuccess,"bQuitSuccess");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bAttackerWin, true);
            _ds.displaySimple(FightKey, true);
            _ds.displaySimple(strBattleBody, true);
            _ds.displaySimple(iStar, true);
            _ds.displaySimple(randValueList, true);
            _ds.displaySimple(useItemList, true);
            _ds.displaySimple(bQuit, true);
            _ds.displaySimple(bQuitSuccess, false);
            return _os;
        }
    public:
        taf::UInt8 bAttackerWin;
        ServerEngine::PKFight FightKey;
        std::string strBattleBody;
        taf::Int32 iStar;
        vector<taf::Int64> randValueList;
        vector<ServerEngine::FightUseItem> useItemList;
        taf::UInt8 bQuit;
        taf::UInt8 bQuitSuccess;
    };
    inline bool operator==(const BattleData&l, const BattleData&r)
    {
        return l.bAttackerWin == r.bAttackerWin && l.FightKey == r.FightKey && l.strBattleBody == r.strBattleBody && l.iStar == r.iStar && l.randValueList == r.randValueList && l.useItemList == r.useItemList && l.bQuit == r.bQuit && l.bQuitSuccess == r.bQuitSuccess;
    }
    inline bool operator!=(const BattleData&l, const BattleData&r)
    {
        return !(l == r);
    }

    struct FightContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FightContext";
        }
        static string MD5()
        {
            return "f7dd65de14bd072e80793e0e8b82c3f0";
        }
        FightContext()
        :iFightType(0),iSceneID(0),bBeginDlg(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iFightType, 0);
            _os.write(iSceneID, 1);
            _os.write(context, 2);
            _os.write(randValueList, 3);
            _os.write(useItemActionList, 4);
            _os.write(dlgList, 5);
            _os.write(bBeginDlg, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iFightType, 0, true);
            _is.read(iSceneID, 1, true);
            _is.read(context, 2, true);
            _is.read(randValueList, 3, true);
            _is.read(useItemActionList, 4, true);
            _is.read(dlgList, 5, true);
            _is.read(bBeginDlg, 6, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iFightType,"iFightType");
            _ds.display(iSceneID,"iSceneID");
            _ds.display(context,"context");
            _ds.display(randValueList,"randValueList");
            _ds.display(useItemActionList,"useItemActionList");
            _ds.display(dlgList,"dlgList");
            _ds.display(bBeginDlg,"bBeginDlg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iFightType, true);
            _ds.displaySimple(iSceneID, true);
            _ds.displaySimple(context, true);
            _ds.displaySimple(randValueList, true);
            _ds.displaySimple(useItemActionList, true);
            _ds.displaySimple(dlgList, true);
            _ds.displaySimple(bBeginDlg, false);
            return _os;
        }
    public:
        taf::Int32 iFightType;
        taf::Int32 iSceneID;
        map<std::string, std::string> context;
        vector<taf::Int64> randValueList;
        vector<ServerEngine::FightUseItem> useItemActionList;
        vector<taf::Int32> dlgList;
        taf::Char bBeginDlg;
    };
    inline bool operator==(const FightContext&l, const FightContext&r)
    {
        return l.iFightType == r.iFightType && l.iSceneID == r.iSceneID && l.context == r.context && l.randValueList == r.randValueList && l.useItemActionList == r.useItemActionList && l.dlgList == r.dlgList && l.bBeginDlg == r.bBeginDlg;
    }
    inline bool operator!=(const FightContext&l, const FightContext&r)
    {
        return !(l == r);
    }

    struct SceneRecord : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.SceneRecord";
        }
        static string MD5()
        {
            return "3afff11ea06276d079f70fe55f64f449";
        }
        SceneRecord()
        :iSceneID(0),iStarLevel(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iSceneID, 0);
            _os.write(iStarLevel, 1);
            _os.write(passTimes, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iSceneID, 0, true);
            _is.read(iStarLevel, 1, true);
            _is.read(passTimes, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iSceneID,"iSceneID");
            _ds.display(iStarLevel,"iStarLevel");
            _ds.display(passTimes,"passTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iSceneID, true);
            _ds.displaySimple(iStarLevel, true);
            _ds.displaySimple(passTimes, false);
            return _os;
        }
    public:
        taf::Int32 iSceneID;
        taf::Int32 iStarLevel;
        ServerEngine::TimeResetValue passTimes;
    };
    inline bool operator==(const SceneRecord&l, const SceneRecord&r)
    {
        return l.iSceneID == r.iSceneID && l.iStarLevel == r.iStarLevel && l.passTimes == r.passTimes;
    }
    inline bool operator!=(const SceneRecord&l, const SceneRecord&r)
    {
        return !(l == r);
    }

    struct DungeonSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DungeonSystemData";
        }
        static string MD5()
        {
            return "38c1ce4de09dccfe7f5cb888bc1bfcd4";
        }
        DungeonSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sectionList, 0);
            _os.write(m_mapSceneRecord, 1);
            _os.write(noUse, 2);
            _os.write(perfectPassSectionMap, 3);
            _os.write(newSceneList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(sectionList, 0, true);
            _is.read(m_mapSceneRecord, 1, true);
            _is.read(noUse, 2, true);
            _is.read(perfectPassSectionMap, 3, false);
            _is.read(newSceneList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sectionList,"sectionList");
            _ds.display(m_mapSceneRecord,"m_mapSceneRecord");
            _ds.display(noUse,"noUse");
            _ds.display(perfectPassSectionMap,"perfectPassSectionMap");
            _ds.display(newSceneList,"newSceneList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sectionList, true);
            _ds.displaySimple(m_mapSceneRecord, true);
            _ds.displaySimple(noUse, true);
            _ds.displaySimple(perfectPassSectionMap, true);
            _ds.displaySimple(newSceneList, false);
            return _os;
        }
    public:
        vector<taf::Int32> sectionList;
        map<taf::Int32, ServerEngine::SceneRecord> m_mapSceneRecord;
        vector<taf::Int32> noUse;
        map<taf::Int32, taf::Bool> perfectPassSectionMap;
        map<taf::Int32, taf::Bool> newSceneList;
    };
    inline bool operator==(const DungeonSystemData&l, const DungeonSystemData&r)
    {
        return l.sectionList == r.sectionList && l.m_mapSceneRecord == r.m_mapSceneRecord && l.noUse == r.noUse && l.perfectPassSectionMap == r.perfectPassSectionMap && l.newSceneList == r.newSceneList;
    }
    inline bool operator!=(const DungeonSystemData&l, const DungeonSystemData&r)
    {
        return !(l == r);
    }

    struct FightSoulItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FightSoulItem";
        }
        static string MD5()
        {
            return "07219e6f2d0b10078030a3d4f177f9d9";
        }
        FightSoulItem()
        :iBaseID(0),iExp(0),bLocked(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iBaseID, 0);
            _os.write(iExp, 1);
            _os.write(bLocked, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iBaseID, 0, true);
            _is.read(iExp, 1, true);
            _is.read(bLocked, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iBaseID,"iBaseID");
            _ds.display(iExp,"iExp");
            _ds.display(bLocked,"bLocked");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iBaseID, true);
            _ds.displaySimple(iExp, true);
            _ds.displaySimple(bLocked, false);
            return _os;
        }
    public:
        taf::Int32 iBaseID;
        taf::Int32 iExp;
        taf::UInt8 bLocked;
    };
    inline bool operator==(const FightSoulItem&l, const FightSoulItem&r)
    {
        return l.iBaseID == r.iBaseID && l.iExp == r.iExp && l.bLocked == r.bLocked;
    }
    inline bool operator!=(const FightSoulItem&l, const FightSoulItem&r)
    {
        return !(l == r);
    }

    struct FightSoulPractice : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FightSoulPractice";
        }
        static string MD5()
        {
            return "5e5233f79258282d6b49ab046692d473";
        }
        FightSoulPractice()
        :iBaseGrade(0),bMode(0),iAdvanceGrade(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iBaseGrade, 0);
            _os.write(bMode, 1);
            _os.write(iAdvanceGrade, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iBaseGrade, 0, true);
            _is.read(bMode, 1, true);
            _is.read(iAdvanceGrade, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iBaseGrade,"iBaseGrade");
            _ds.display(bMode,"bMode");
            _ds.display(iAdvanceGrade,"iAdvanceGrade");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iBaseGrade, true);
            _ds.displaySimple(bMode, true);
            _ds.displaySimple(iAdvanceGrade, false);
            return _os;
        }
    public:
        taf::Int32 iBaseGrade;
        taf::UInt8 bMode;
        taf::Int32 iAdvanceGrade;
    };
    inline bool operator==(const FightSoulPractice&l, const FightSoulPractice&r)
    {
        return l.iBaseGrade == r.iBaseGrade && l.bMode == r.bMode && l.iAdvanceGrade == r.iAdvanceGrade;
    }
    inline bool operator!=(const FightSoulPractice&l, const FightSoulPractice&r)
    {
        return !(l == r);
    }

    struct FightSoulSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FightSoulSystemData";
        }
        static string MD5()
        {
            return "54017aa84d00d3ea0ca8a2a96ae6cd07";
        }
        FightSoulSystemData()
        :bUsedPracticeFightSoul(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fightSoulMap, 0);
            _os.write(practiceStatus, 1);
            _os.write(callAdvanceCount, 2);
            _os.write(bUsedPracticeFightSoul, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(fightSoulMap, 0, true);
            _is.read(practiceStatus, 1, true);
            _is.read(callAdvanceCount, 2, false);
            _is.read(bUsedPracticeFightSoul, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fightSoulMap,"fightSoulMap");
            _ds.display(practiceStatus,"practiceStatus");
            _ds.display(callAdvanceCount,"callAdvanceCount");
            _ds.display(bUsedPracticeFightSoul,"bUsedPracticeFightSoul");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fightSoulMap, true);
            _ds.displaySimple(practiceStatus, true);
            _ds.displaySimple(callAdvanceCount, true);
            _ds.displaySimple(bUsedPracticeFightSoul, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::FightSoulItem> fightSoulMap;
        ServerEngine::FightSoulPractice practiceStatus;
        ServerEngine::TimeResetValue callAdvanceCount;
        taf::UInt8 bUsedPracticeFightSoul;
    };
    inline bool operator==(const FightSoulSystemData&l, const FightSoulSystemData&r)
    {
        return l.fightSoulMap == r.fightSoulMap && l.practiceStatus == r.practiceStatus && l.callAdvanceCount == r.callAdvanceCount && l.bUsedPracticeFightSoul == r.bUsedPracticeFightSoul;
    }
    inline bool operator!=(const FightSoulSystemData&l, const FightSoulSystemData&r)
    {
        return !(l == r);
    }

    struct HeroEquipSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.HeroEquipSystemData";
        }
        static string MD5()
        {
            return "277a249d2c1c72eb901c9d8272746b9c";
        }
        HeroEquipSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(equipList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(equipList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(equipList,"equipList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(equipList, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::FightSoulItem> equipList;
    };
    inline bool operator==(const HeroEquipSystemData&l, const HeroEquipSystemData&r)
    {
        return l.equipList == r.equipList;
    }
    inline bool operator!=(const HeroEquipSystemData&l, const HeroEquipSystemData&r)
    {
        return !(l == r);
    }

    struct GodAnimalSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GodAnimalSystemData";
        }
        static string MD5()
        {
            return "79eb801f2705d251aeaa08eeee7313e8";
        }
        GodAnimalSystemData()
        :strActiveUUID("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(godAnimalList, 0);
            _os.write(strActiveUUID, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(godAnimalList, 0, true);
            _is.read(strActiveUUID, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(godAnimalList,"godAnimalList");
            _ds.display(strActiveUUID,"strActiveUUID");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(godAnimalList, true);
            _ds.displaySimple(strActiveUUID, false);
            return _os;
        }
    public:
        vector<ServerEngine::RoleSaveData> godAnimalList;
        std::string strActiveUUID;
    };
    inline bool operator==(const GodAnimalSystemData&l, const GodAnimalSystemData&r)
    {
        return l.godAnimalList == r.godAnimalList && l.strActiveUUID == r.strActiveUUID;
    }
    inline bool operator!=(const GodAnimalSystemData&l, const GodAnimalSystemData&r)
    {
        return !(l == r);
    }

    struct LegionBase : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionBase";
        }
        static string MD5()
        {
            return "67fdd9f5a9bb6583ae3c38b00835ad8a";
        }
        LegionBase()
        :strLegionName(""),iLegionLevel(0),iLegionExp(0),strLeaderName(""),strAnnouce(""),dwCreateTime(0),strBroadcast(""),dwLevelUpTime(0),dwLastLoginTime(0),iLegionIconId(0),iLegionTotalContribute(0),iLegionMoney(0),noUseData1(0),noUseData2(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strLegionName, 0);
            _os.write(iLegionLevel, 1);
            _os.write(iLegionExp, 2);
            _os.write(strLeaderName, 3);
            _os.write(strAnnouce, 4);
            _os.write(dwCreateTime, 5);
            _os.write(strBroadcast, 6);
            _os.write(dwLevelUpTime, 7);
            _os.write(dwLastLoginTime, 8);
            _os.write(iLegionIconId, 9);
            _os.write(iLegionTotalContribute, 10);
            _os.write(iLegionMoney, 11);
            _os.write(noUseData1, 12);
            _os.write(noUseData2, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strLegionName, 0, true);
            _is.read(iLegionLevel, 1, true);
            _is.read(iLegionExp, 2, true);
            _is.read(strLeaderName, 3, true);
            _is.read(strAnnouce, 4, true);
            _is.read(dwCreateTime, 5, true);
            _is.read(strBroadcast, 6, true);
            _is.read(dwLevelUpTime, 7, true);
            _is.read(dwLastLoginTime, 8, true);
            _is.read(iLegionIconId, 9, false);
            _is.read(iLegionTotalContribute, 10, false);
            _is.read(iLegionMoney, 11, false);
            _is.read(noUseData1, 12, false);
            _is.read(noUseData2, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strLegionName,"strLegionName");
            _ds.display(iLegionLevel,"iLegionLevel");
            _ds.display(iLegionExp,"iLegionExp");
            _ds.display(strLeaderName,"strLeaderName");
            _ds.display(strAnnouce,"strAnnouce");
            _ds.display(dwCreateTime,"dwCreateTime");
            _ds.display(strBroadcast,"strBroadcast");
            _ds.display(dwLevelUpTime,"dwLevelUpTime");
            _ds.display(dwLastLoginTime,"dwLastLoginTime");
            _ds.display(iLegionIconId,"iLegionIconId");
            _ds.display(iLegionTotalContribute,"iLegionTotalContribute");
            _ds.display(iLegionMoney,"iLegionMoney");
            _ds.display(noUseData1,"noUseData1");
            _ds.display(noUseData2,"noUseData2");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strLegionName, true);
            _ds.displaySimple(iLegionLevel, true);
            _ds.displaySimple(iLegionExp, true);
            _ds.displaySimple(strLeaderName, true);
            _ds.displaySimple(strAnnouce, true);
            _ds.displaySimple(dwCreateTime, true);
            _ds.displaySimple(strBroadcast, true);
            _ds.displaySimple(dwLevelUpTime, true);
            _ds.displaySimple(dwLastLoginTime, true);
            _ds.displaySimple(iLegionIconId, true);
            _ds.displaySimple(iLegionTotalContribute, true);
            _ds.displaySimple(iLegionMoney, true);
            _ds.displaySimple(noUseData1, true);
            _ds.displaySimple(noUseData2, false);
            return _os;
        }
    public:
        std::string strLegionName;
        taf::Int32 iLegionLevel;
        taf::Int32 iLegionExp;
        std::string strLeaderName;
        std::string strAnnouce;
        taf::UInt32 dwCreateTime;
        std::string strBroadcast;
        taf::UInt32 dwLevelUpTime;
        taf::UInt32 dwLastLoginTime;
        taf::Int32 iLegionIconId;
        taf::UInt32 iLegionTotalContribute;
        taf::UInt32 iLegionMoney;
        taf::UInt32 noUseData1;
        taf::Bool noUseData2;
    };
    inline bool operator==(const LegionBase&l, const LegionBase&r)
    {
        return l.strLegionName == r.strLegionName && l.iLegionLevel == r.iLegionLevel && l.iLegionExp == r.iLegionExp && l.strLeaderName == r.strLeaderName && l.strAnnouce == r.strAnnouce && l.dwCreateTime == r.dwCreateTime && l.strBroadcast == r.strBroadcast && l.dwLevelUpTime == r.dwLevelUpTime && l.dwLastLoginTime == r.dwLastLoginTime && l.iLegionIconId == r.iLegionIconId && l.iLegionTotalContribute == r.iLegionTotalContribute && l.iLegionMoney == r.iLegionMoney && l.noUseData1 == r.noUseData1 && l.noUseData2 == r.noUseData2;
    }
    inline bool operator!=(const LegionBase&l, const LegionBase&r)
    {
        return !(l == r);
    }

    struct LegionMemberItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionMemberItem";
        }
        static string MD5()
        {
            return "3aef8e2e5ce68147f09c4cbc997df965";
        }
        LegionMemberItem()
        :iSumContribute(0),noUseiCurContribute(0),strName(""),iLevel(0),dwLogionOutTime(0),bIsOutLine(true),iOccupation(0),beWorshipGetContribute(0),iFightValue(0),iHeadIcon(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(roleKey, 0);
            _os.write(iSumContribute, 1);
            _os.write(noUseiCurContribute, 2);
            _os.write(strName, 3);
            _os.write(iLevel, 4);
            _os.write(dayContribute, 6);
            _os.write(noUseDatae1, 7);
            _os.write(noUseData2, 8);
            _os.write(noUseData3, 9);
            _os.write(contributeVec, 10);
            _os.write(dwLogionOutTime, 11);
            _os.write(bIsOutLine, 12);
            _os.write(iOccupation, 13);
            _os.write(nouseuseWorshipTimes, 14);
            _os.write(beWorshipGetContribute, 15);
            _os.write(iFightValue, 16);
            _os.write(iHeadIcon, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(roleKey, 0, true);
            _is.read(iSumContribute, 1, true);
            _is.read(noUseiCurContribute, 2, true);
            _is.read(strName, 3, true);
            _is.read(iLevel, 4, true);
            _is.read(dayContribute, 6, true);
            _is.read(noUseDatae1, 7, true);
            _is.read(noUseData2, 8, true);
            _is.read(noUseData3, 9, true);
            _is.read(contributeVec, 10, false);
            _is.read(dwLogionOutTime, 11, false);
            _is.read(bIsOutLine, 12, false);
            _is.read(iOccupation, 13, false);
            _is.read(nouseuseWorshipTimes, 14, false);
            _is.read(beWorshipGetContribute, 15, false);
            _is.read(iFightValue, 16, false);
            _is.read(iHeadIcon, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(roleKey,"roleKey");
            _ds.display(iSumContribute,"iSumContribute");
            _ds.display(noUseiCurContribute,"noUseiCurContribute");
            _ds.display(strName,"strName");
            _ds.display(iLevel,"iLevel");
            _ds.display(dayContribute,"dayContribute");
            _ds.display(noUseDatae1,"noUseDatae1");
            _ds.display(noUseData2,"noUseData2");
            _ds.display(noUseData3,"noUseData3");
            _ds.display(contributeVec,"contributeVec");
            _ds.display(dwLogionOutTime,"dwLogionOutTime");
            _ds.display(bIsOutLine,"bIsOutLine");
            _ds.display(iOccupation,"iOccupation");
            _ds.display(nouseuseWorshipTimes,"nouseuseWorshipTimes");
            _ds.display(beWorshipGetContribute,"beWorshipGetContribute");
            _ds.display(iFightValue,"iFightValue");
            _ds.display(iHeadIcon,"iHeadIcon");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(roleKey, true);
            _ds.displaySimple(iSumContribute, true);
            _ds.displaySimple(noUseiCurContribute, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(dayContribute, true);
            _ds.displaySimple(noUseDatae1, true);
            _ds.displaySimple(noUseData2, true);
            _ds.displaySimple(noUseData3, true);
            _ds.displaySimple(contributeVec, true);
            _ds.displaySimple(dwLogionOutTime, true);
            _ds.displaySimple(bIsOutLine, true);
            _ds.displaySimple(iOccupation, true);
            _ds.displaySimple(nouseuseWorshipTimes, true);
            _ds.displaySimple(beWorshipGetContribute, true);
            _ds.displaySimple(iFightValue, true);
            _ds.displaySimple(iHeadIcon, false);
            return _os;
        }
    public:
        ServerEngine::PKRole roleKey;
        taf::Int32 iSumContribute;
        taf::Int32 noUseiCurContribute;
        std::string strName;
        taf::Int32 iLevel;
        ServerEngine::TimeResetValue dayContribute;
        ServerEngine::TimeResetValue noUseDatae1;
        ServerEngine::TimeResetValue noUseData2;
        ServerEngine::TimeResetValue noUseData3;
        vector<taf::Int32> contributeVec;
        taf::UInt32 dwLogionOutTime;
        taf::Bool bIsOutLine;
        taf::Int32 iOccupation;
        ServerEngine::TimeResetValue nouseuseWorshipTimes;
        taf::Int32 beWorshipGetContribute;
        taf::Int32 iFightValue;
        taf::Int32 iHeadIcon;
    };
    inline bool operator==(const LegionMemberItem&l, const LegionMemberItem&r)
    {
        return l.roleKey == r.roleKey && l.iSumContribute == r.iSumContribute && l.noUseiCurContribute == r.noUseiCurContribute && l.strName == r.strName && l.iLevel == r.iLevel && l.dayContribute == r.dayContribute && l.noUseDatae1 == r.noUseDatae1 && l.noUseData2 == r.noUseData2 && l.noUseData3 == r.noUseData3 && l.contributeVec == r.contributeVec && l.dwLogionOutTime == r.dwLogionOutTime && l.bIsOutLine == r.bIsOutLine && l.iOccupation == r.iOccupation && l.nouseuseWorshipTimes == r.nouseuseWorshipTimes && l.beWorshipGetContribute == r.beWorshipGetContribute && l.iFightValue == r.iFightValue && l.iHeadIcon == r.iHeadIcon;
    }
    inline bool operator!=(const LegionMemberItem&l, const LegionMemberItem&r)
    {
        return !(l == r);
    }

    struct LegionMemberInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionMemberInfo";
        }
        static string MD5()
        {
            return "60c8336cad918b5b69adee9450d5f9f3";
        }
        LegionMemberInfo()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(memberList, 0);
            _os.write(saveContributeVecValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(memberList, 0, true);
            _is.read(saveContributeVecValue, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(memberList,"memberList");
            _ds.display(saveContributeVecValue,"saveContributeVecValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(memberList, true);
            _ds.displaySimple(saveContributeVecValue, false);
            return _os;
        }
    public:
        map<std::string, ServerEngine::LegionMemberItem> memberList;
        ServerEngine::TimeResetValue saveContributeVecValue;
    };
    inline bool operator==(const LegionMemberInfo&l, const LegionMemberInfo&r)
    {
        return l.memberList == r.memberList && l.saveContributeVecValue == r.saveContributeVecValue;
    }
    inline bool operator!=(const LegionMemberInfo&l, const LegionMemberInfo&r)
    {
        return !(l == r);
    }

    struct LegionAppItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionAppItem";
        }
        static string MD5()
        {
            return "ba5b67f22ace5ab87b9d1d7b3107b7df";
        }
        LegionAppItem()
        :strName(""),iLevel(0),iActorHeadIcon(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(roleKey, 0);
            _os.write(strName, 1);
            _os.write(iLevel, 2);
            _os.write(iActorHeadIcon, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(roleKey, 0, true);
            _is.read(strName, 1, true);
            _is.read(iLevel, 2, true);
            _is.read(iActorHeadIcon, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(roleKey,"roleKey");
            _ds.display(strName,"strName");
            _ds.display(iLevel,"iLevel");
            _ds.display(iActorHeadIcon,"iActorHeadIcon");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(roleKey, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(iActorHeadIcon, false);
            return _os;
        }
    public:
        ServerEngine::PKRole roleKey;
        std::string strName;
        taf::Int32 iLevel;
        taf::Int32 iActorHeadIcon;
    };
    inline bool operator==(const LegionAppItem&l, const LegionAppItem&r)
    {
        return l.roleKey == r.roleKey && l.strName == r.strName && l.iLevel == r.iLevel && l.iActorHeadIcon == r.iActorHeadIcon;
    }
    inline bool operator!=(const LegionAppItem&l, const LegionAppItem&r)
    {
        return !(l == r);
    }

    struct LegionAppInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionAppInfo";
        }
        static string MD5()
        {
            return "e385e746b4fcb1dbebbe8d007aacf8a7";
        }
        LegionAppInfo()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(applyList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(applyList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(applyList,"applyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(applyList, false);
            return _os;
        }
    public:
        map<std::string, ServerEngine::LegionAppItem> applyList;
    };
    inline bool operator==(const LegionAppInfo&l, const LegionAppInfo&r)
    {
        return l.applyList == r.applyList;
    }
    inline bool operator!=(const LegionAppInfo&l, const LegionAppInfo&r)
    {
        return !(l == r);
    }

    struct LegionBoss : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionBoss";
        }
        static string MD5()
        {
            return "eaca2a0c592d19269a1dca659a31efd9";
        }
        LegionBoss()
        :dwLastBossTime(0),iBossLevel(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwLastBossTime, 0);
            _os.write(iBossLevel, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(dwLastBossTime, 0, true);
            _is.read(iBossLevel, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwLastBossTime,"dwLastBossTime");
            _ds.display(iBossLevel,"iBossLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwLastBossTime, true);
            _ds.displaySimple(iBossLevel, false);
            return _os;
        }
    public:
        taf::UInt32 dwLastBossTime;
        taf::Int32 iBossLevel;
    };
    inline bool operator==(const LegionBoss&l, const LegionBoss&r)
    {
        return l.dwLastBossTime == r.dwLastBossTime && l.iBossLevel == r.iBossLevel;
    }
    inline bool operator!=(const LegionBoss&l, const LegionBoss&r)
    {
        return !(l == r);
    }

    struct LegionFightReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionFightReport";
        }
        static string MD5()
        {
            return "c6543fbef9b7c5fa2c1e2aaee39f5003";
        }
        LegionFightReport()
        :iTargetTerritoryID(0),iDeclareTime(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTargetTerritoryID, 0);
            _os.write(iDeclareTime, 1);
            _os.write(joinMemList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iTargetTerritoryID, 0, true);
            _is.read(iDeclareTime, 1, true);
            _is.read(joinMemList, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTargetTerritoryID,"iTargetTerritoryID");
            _ds.display(iDeclareTime,"iDeclareTime");
            _ds.display(joinMemList,"joinMemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTargetTerritoryID, true);
            _ds.displaySimple(iDeclareTime, true);
            _ds.displaySimple(joinMemList, false);
            return _os;
        }
    public:
        taf::Int32 iTargetTerritoryID;
        taf::UInt32 iDeclareTime;
        vector<std::string> joinMemList;
    };
    inline bool operator==(const LegionFightReport&l, const LegionFightReport&r)
    {
        return l.iTargetTerritoryID == r.iTargetTerritoryID && l.iDeclareTime == r.iDeclareTime && l.joinMemList == r.joinMemList;
    }
    inline bool operator!=(const LegionFightReport&l, const LegionFightReport&r)
    {
        return !(l == r);
    }

    struct LegionData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionData";
        }
        static string MD5()
        {
            return "6c4266539b32869c6f9adc14d2513f1d";
        }
        LegionData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(baseInfo, 0);
            _os.write(memberInfo, 1);
            _os.write(appInfo, 2);
            _os.write(bossInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(baseInfo, 0, true);
            _is.read(memberInfo, 1, true);
            _is.read(appInfo, 2, true);
            _is.read(bossInfo, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(baseInfo,"baseInfo");
            _ds.display(memberInfo,"memberInfo");
            _ds.display(appInfo,"appInfo");
            _ds.display(bossInfo,"bossInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(baseInfo, true);
            _ds.displaySimple(memberInfo, true);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(bossInfo, false);
            return _os;
        }
    public:
        ServerEngine::LegionBase baseInfo;
        ServerEngine::LegionMemberInfo memberInfo;
        ServerEngine::LegionAppInfo appInfo;
        ServerEngine::LegionBoss bossInfo;
    };
    inline bool operator==(const LegionData&l, const LegionData&r)
    {
        return l.baseInfo == r.baseInfo && l.memberInfo == r.memberInfo && l.appInfo == r.appInfo && l.bossInfo == r.bossInfo;
    }
    inline bool operator!=(const LegionData&l, const LegionData&r)
    {
        return !(l == r);
    }

    struct CustomGiftData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CustomGiftData";
        }
        static string MD5()
        {
            return "58fc4b1fcafbf1b53ace034f59a5748c";
        }
        CustomGiftData()
        :strTitle(""),iAwardedContibute(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strTitle, 0);
            _os.write(propAward, 1);
            _os.write(itemAward, 2);
            _os.write(iAwardedContibute, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strTitle, 0, true);
            _is.read(propAward, 1, true);
            _is.read(itemAward, 2, true);
            _is.read(iAwardedContibute, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strTitle,"strTitle");
            _ds.display(propAward,"propAward");
            _ds.display(itemAward,"itemAward");
            _ds.display(iAwardedContibute,"iAwardedContibute");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(propAward, true);
            _ds.displaySimple(itemAward, true);
            _ds.displaySimple(iAwardedContibute, false);
            return _os;
        }
    public:
        std::string strTitle;
        map<taf::Int32, taf::Int32> propAward;
        map<taf::Int32, taf::Int32> itemAward;
        taf::Int32 iAwardedContibute;
    };
    inline bool operator==(const CustomGiftData&l, const CustomGiftData&r)
    {
        return l.strTitle == r.strTitle && l.propAward == r.propAward && l.itemAward == r.itemAward && l.iAwardedContibute == r.iAwardedContibute;
    }
    inline bool operator!=(const CustomGiftData&l, const CustomGiftData&r)
    {
        return !(l == r);
    }

    struct GiftData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GiftData";
        }
        static string MD5()
        {
            return "f4d9fda3e8b224d93a43128518717020";
        }
        GiftData()
        :iGiftID(0),dwGetTime(0),bCustomGift(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iGiftID, 0);
            _os.write(dwGetTime, 1);
            _os.write(bCustomGift, 2);
            _os.write(customGiftData, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iGiftID, 0, true);
            _is.read(dwGetTime, 1, true);
            _is.read(bCustomGift, 2, false);
            _is.read(customGiftData, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iGiftID,"iGiftID");
            _ds.display(dwGetTime,"dwGetTime");
            _ds.display(bCustomGift,"bCustomGift");
            _ds.display(customGiftData,"customGiftData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iGiftID, true);
            _ds.displaySimple(dwGetTime, true);
            _ds.displaySimple(bCustomGift, true);
            _ds.displaySimple(customGiftData, false);
            return _os;
        }
    public:
        taf::Int32 iGiftID;
        taf::UInt32 dwGetTime;
        taf::UInt8 bCustomGift;
        ServerEngine::CustomGiftData customGiftData;
    };
    inline bool operator==(const GiftData&l, const GiftData&r)
    {
        return l.iGiftID == r.iGiftID && l.dwGetTime == r.dwGetTime && l.bCustomGift == r.bCustomGift && l.customGiftData == r.customGiftData;
    }
    inline bool operator!=(const GiftData&l, const GiftData&r)
    {
        return !(l == r);
    }

    struct LegionShopItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionShopItem";
        }
        static string MD5()
        {
            return "07219e6f2d0b10078030a3d4f177f9d9";
        }
        LegionShopItem()
        :iIndex(0),iShopID(0),bBuy(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iIndex, 0);
            _os.write(iShopID, 1);
            _os.write(bBuy, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iIndex, 0, true);
            _is.read(iShopID, 1, true);
            _is.read(bBuy, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iIndex,"iIndex");
            _ds.display(iShopID,"iShopID");
            _ds.display(bBuy,"bBuy");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iIndex, true);
            _ds.displaySimple(iShopID, true);
            _ds.displaySimple(bBuy, false);
            return _os;
        }
    public:
        taf::Int32 iIndex;
        taf::Int32 iShopID;
        taf::UInt8 bBuy;
    };
    inline bool operator==(const LegionShopItem&l, const LegionShopItem&r)
    {
        return l.iIndex == r.iIndex && l.iShopID == r.iShopID && l.bBuy == r.bBuy;
    }
    inline bool operator!=(const LegionShopItem&l, const LegionShopItem&r)
    {
        return !(l == r);
    }

    struct LegionSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionSystemData";
        }
        static string MD5()
        {
            return "d18477677e006f219a0f0cd4a836d037";
        }
        LegionSystemData()
        :dwLastRefreshSecond(0),nousebeWorshipGetContribute(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(noUse, 0);
            _os.write(noUse2, 1);
            _os.write(giftList, 2);
            _os.write(shopItemList, 3);
            _os.write(blessData, 4);
            _os.write(dayAwardFlag, 5);
            _os.write(weekAwardFlag, 6);
            _os.write(dwLastRefreshSecond, 7);
            _os.write(contributeShopRefreshTimes, 8);
            _os.write(actorHaveAddLegionList, 9);
            _os.write(actorWeekAddLegionTimes, 10);
            _os.write(useWorshipTimes, 11);
            _os.write(nousebeWorshipGetContribute, 12);
            _os.write(actorHaveWorship, 13);
            _os.write(contributeTimes, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(noUse, 0, true);
            _is.read(noUse2, 1, true);
            _is.read(giftList, 2, false);
            _is.read(shopItemList, 3, false);
            _is.read(blessData, 4, false);
            _is.read(dayAwardFlag, 5, false);
            _is.read(weekAwardFlag, 6, false);
            _is.read(dwLastRefreshSecond, 7, false);
            _is.read(contributeShopRefreshTimes, 8, false);
            _is.read(actorHaveAddLegionList, 9, false);
            _is.read(actorWeekAddLegionTimes, 10, false);
            _is.read(useWorshipTimes, 11, false);
            _is.read(nousebeWorshipGetContribute, 12, false);
            _is.read(actorHaveWorship, 13, false);
            _is.read(contributeTimes, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(noUse,"noUse");
            _ds.display(noUse2,"noUse2");
            _ds.display(giftList,"giftList");
            _ds.display(shopItemList,"shopItemList");
            _ds.display(blessData,"blessData");
            _ds.display(dayAwardFlag,"dayAwardFlag");
            _ds.display(weekAwardFlag,"weekAwardFlag");
            _ds.display(dwLastRefreshSecond,"dwLastRefreshSecond");
            _ds.display(contributeShopRefreshTimes,"contributeShopRefreshTimes");
            _ds.display(actorHaveAddLegionList,"actorHaveAddLegionList");
            _ds.display(actorWeekAddLegionTimes,"actorWeekAddLegionTimes");
            _ds.display(useWorshipTimes,"useWorshipTimes");
            _ds.display(nousebeWorshipGetContribute,"nousebeWorshipGetContribute");
            _ds.display(actorHaveWorship,"actorHaveWorship");
            _ds.display(contributeTimes,"contributeTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(noUse, true);
            _ds.displaySimple(noUse2, true);
            _ds.displaySimple(giftList, true);
            _ds.displaySimple(shopItemList, true);
            _ds.displaySimple(blessData, true);
            _ds.displaySimple(dayAwardFlag, true);
            _ds.displaySimple(weekAwardFlag, true);
            _ds.displaySimple(dwLastRefreshSecond, true);
            _ds.displaySimple(contributeShopRefreshTimes, true);
            _ds.displaySimple(actorHaveAddLegionList, true);
            _ds.displaySimple(actorWeekAddLegionTimes, true);
            _ds.displaySimple(useWorshipTimes, true);
            _ds.displaySimple(nousebeWorshipGetContribute, true);
            _ds.displaySimple(actorHaveWorship, true);
            _ds.displaySimple(contributeTimes, false);
            return _os;
        }
    public:
        vector<taf::Int32> noUse;
        vector<taf::Int32> noUse2;
        map<std::string, ServerEngine::GiftData> giftList;
        vector<ServerEngine::LegionShopItem> shopItemList;
        ServerEngine::TimeResetValue blessData;
        ServerEngine::TimeResetValue dayAwardFlag;
        ServerEngine::TimeResetValue weekAwardFlag;
        taf::UInt32 dwLastRefreshSecond;
        ServerEngine::TimeResetValue contributeShopRefreshTimes;
        map<std::string, taf::UInt32> actorHaveAddLegionList;
        ServerEngine::TimeResetValue actorWeekAddLegionTimes;
        ServerEngine::TimeResetValue useWorshipTimes;
        taf::Int32 nousebeWorshipGetContribute;
        map<std::string, taf::UInt32> actorHaveWorship;
        ServerEngine::TimeResetValue contributeTimes;
    };
    inline bool operator==(const LegionSystemData&l, const LegionSystemData&r)
    {
        return l.noUse == r.noUse && l.noUse2 == r.noUse2 && l.giftList == r.giftList && l.shopItemList == r.shopItemList && l.blessData == r.blessData && l.dayAwardFlag == r.dayAwardFlag && l.weekAwardFlag == r.weekAwardFlag && l.dwLastRefreshSecond == r.dwLastRefreshSecond && l.contributeShopRefreshTimes == r.contributeShopRefreshTimes && l.actorHaveAddLegionList == r.actorHaveAddLegionList && l.actorWeekAddLegionTimes == r.actorWeekAddLegionTimes && l.useWorshipTimes == r.useWorshipTimes && l.nousebeWorshipGetContribute == r.nousebeWorshipGetContribute && l.actorHaveWorship == r.actorHaveWorship && l.contributeTimes == r.contributeTimes;
    }
    inline bool operator!=(const LegionSystemData&l, const LegionSystemData&r)
    {
        return !(l == r);
    }

    struct CityBattleItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CityBattleItem";
        }
        static string MD5()
        {
            return "c28231530cc05a09025edc68859c0ccf";
        }
        CityBattleItem()
        :strName(""),iLevel(0),iHeadIcon(0),iFightValue(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strName, 0);
            _os.write(roleKey, 1);
            _os.write(starList, 2);
            _os.write(iLevel, 3);
            _os.write(iHeadIcon, 4);
            _os.write(iFightValue, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strName, 0, true);
            _is.read(roleKey, 1, true);
            _is.read(starList, 2, true);
            _is.read(iLevel, 3, true);
            _is.read(iHeadIcon, 4, true);
            _is.read(iFightValue, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strName,"strName");
            _ds.display(roleKey,"roleKey");
            _ds.display(starList,"starList");
            _ds.display(iLevel,"iLevel");
            _ds.display(iHeadIcon,"iHeadIcon");
            _ds.display(iFightValue,"iFightValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(roleKey, true);
            _ds.displaySimple(starList, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(iHeadIcon, true);
            _ds.displaySimple(iFightValue, false);
            return _os;
        }
    public:
        std::string strName;
        ServerEngine::PKRole roleKey;
        vector<taf::Int32> starList;
        taf::Int32 iLevel;
        taf::Int32 iHeadIcon;
        taf::Int32 iFightValue;
    };
    inline bool operator==(const CityBattleItem&l, const CityBattleItem&r)
    {
        return l.strName == r.strName && l.roleKey == r.roleKey && l.starList == r.starList && l.iLevel == r.iLevel && l.iHeadIcon == r.iHeadIcon && l.iFightValue == r.iFightValue;
    }
    inline bool operator!=(const CityBattleItem&l, const CityBattleItem&r)
    {
        return !(l == r);
    }

    struct LegionReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionReport";
        }
        static string MD5()
        {
            return "aa7ad4e65274271661fab686fc7c7d82";
        }
        LegionReport()
        :strLegionName("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strLegionName, 1);
            _os.write(reportMemberList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strLegionName, 1, true);
            _is.read(reportMemberList, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strLegionName,"strLegionName");
            _ds.display(reportMemberList,"reportMemberList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strLegionName, true);
            _ds.displaySimple(reportMemberList, false);
            return _os;
        }
    public:
        std::string strLegionName;
        map<std::string, ServerEngine::CityBattleItem> reportMemberList;
    };
    inline bool operator==(const LegionReport&l, const LegionReport&r)
    {
        return l.strLegionName == r.strLegionName && l.reportMemberList == r.reportMemberList;
    }
    inline bool operator!=(const LegionReport&l, const LegionReport&r)
    {
        return !(l == r);
    }

    struct LegionHonorItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionHonorItem";
        }
        static string MD5()
        {
            return "b1170506d21cecaba5d8a92fce4db5d5";
        }
        LegionHonorItem()
        :strLegionName(""),strMemberName(""),iLevel(0),iKillNum(0),iContribute(0),iHonor(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strLegionName, 0);
            _os.write(strMemberName, 1);
            _os.write(iLevel, 2);
            _os.write(iKillNum, 3);
            _os.write(iContribute, 4);
            _os.write(iHonor, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strLegionName, 0, true);
            _is.read(strMemberName, 1, true);
            _is.read(iLevel, 2, true);
            _is.read(iKillNum, 3, true);
            _is.read(iContribute, 4, true);
            _is.read(iHonor, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strLegionName,"strLegionName");
            _ds.display(strMemberName,"strMemberName");
            _ds.display(iLevel,"iLevel");
            _ds.display(iKillNum,"iKillNum");
            _ds.display(iContribute,"iContribute");
            _ds.display(iHonor,"iHonor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strLegionName, true);
            _ds.displaySimple(strMemberName, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(iKillNum, true);
            _ds.displaySimple(iContribute, true);
            _ds.displaySimple(iHonor, false);
            return _os;
        }
    public:
        std::string strLegionName;
        std::string strMemberName;
        taf::Int32 iLevel;
        taf::Int32 iKillNum;
        taf::Int32 iContribute;
        taf::Int32 iHonor;
    };
    inline bool operator==(const LegionHonorItem&l, const LegionHonorItem&r)
    {
        return l.strLegionName == r.strLegionName && l.strMemberName == r.strMemberName && l.iLevel == r.iLevel && l.iKillNum == r.iKillNum && l.iContribute == r.iContribute && l.iHonor == r.iHonor;
    }
    inline bool operator!=(const LegionHonorItem&l, const LegionHonorItem&r)
    {
        return !(l == r);
    }

    struct CityBattleLegionData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CityBattleLegionData";
        }
        static string MD5()
        {
            return "0e64c745e17a7884c7291ea6ac166f4e";
        }
        CityBattleLegionData()
        :strLegionName(""),dwGetStarTime(0),iGetStarCount(0),iHoldCityCount(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strLegionName, 0);
            _os.write(dwGetStarTime, 1);
            _os.write(iGetStarCount, 2);
            _os.write(memberList, 3);
            _os.write(iHoldCityCount, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strLegionName, 0, true);
            _is.read(dwGetStarTime, 1, true);
            _is.read(iGetStarCount, 2, true);
            _is.read(memberList, 3, true);
            _is.read(iHoldCityCount, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strLegionName,"strLegionName");
            _ds.display(dwGetStarTime,"dwGetStarTime");
            _ds.display(iGetStarCount,"iGetStarCount");
            _ds.display(memberList,"memberList");
            _ds.display(iHoldCityCount,"iHoldCityCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strLegionName, true);
            _ds.displaySimple(dwGetStarTime, true);
            _ds.displaySimple(iGetStarCount, true);
            _ds.displaySimple(memberList, true);
            _ds.displaySimple(iHoldCityCount, false);
            return _os;
        }
    public:
        std::string strLegionName;
        taf::UInt32 dwGetStarTime;
        taf::Int32 iGetStarCount;
        map<std::string, ServerEngine::CityBattleItem> memberList;
        taf::Int32 iHoldCityCount;
    };
    inline bool operator==(const CityBattleLegionData&l, const CityBattleLegionData&r)
    {
        return l.strLegionName == r.strLegionName && l.dwGetStarTime == r.dwGetStarTime && l.iGetStarCount == r.iGetStarCount && l.memberList == r.memberList && l.iHoldCityCount == r.iHoldCityCount;
    }
    inline bool operator!=(const CityBattleLegionData&l, const CityBattleLegionData&r)
    {
        return !(l == r);
    }

    struct LegionBattle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionBattle";
        }
        static string MD5()
        {
            return "a1071ba9e44a6d4a77e67fc0726c48d3";
        }
        LegionBattle()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attLegion, 0);
            _os.write(guardLegion, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(attLegion, 0, true);
            _is.read(guardLegion, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attLegion,"attLegion");
            _ds.display(guardLegion,"guardLegion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attLegion, true);
            _ds.displaySimple(guardLegion, false);
            return _os;
        }
    public:
        ServerEngine::CityBattleLegionData attLegion;
        ServerEngine::CityBattleLegionData guardLegion;
    };
    inline bool operator==(const LegionBattle&l, const LegionBattle&r)
    {
        return l.attLegion == r.attLegion && l.guardLegion == r.guardLegion;
    }
    inline bool operator!=(const LegionBattle&l, const LegionBattle&r)
    {
        return !(l == r);
    }

    struct LegionCity : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionCity";
        }
        static string MD5()
        {
            return "3e927010003638f95dccb5c8d458042e";
        }
        LegionCity()
        :iCityID(0),strOwnerLegion(""),iChineseDayNO(0),strWinLegion(""),bNpcHold(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCityID, 0);
            _os.write(strOwnerLegion, 1);
            _os.write(reportList, 2);
            _os.write(iChineseDayNO, 3);
            _os.write(strWinLegion, 4);
            _os.write(bNpcHold, 5);
            _os.write(owerLogion, 6);
            _os.write(legionBattleList, 7);
            _os.write(m_legion2BattleId, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iCityID, 0, true);
            _is.read(strOwnerLegion, 1, true);
            _is.read(reportList, 2, true);
            _is.read(iChineseDayNO, 3, true);
            _is.read(strWinLegion, 4, true);
            _is.read(bNpcHold, 5, true);
            _is.read(owerLogion, 6, true);
            _is.read(legionBattleList, 7, true);
            _is.read(m_legion2BattleId, 8, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCityID,"iCityID");
            _ds.display(strOwnerLegion,"strOwnerLegion");
            _ds.display(reportList,"reportList");
            _ds.display(iChineseDayNO,"iChineseDayNO");
            _ds.display(strWinLegion,"strWinLegion");
            _ds.display(bNpcHold,"bNpcHold");
            _ds.display(owerLogion,"owerLogion");
            _ds.display(legionBattleList,"legionBattleList");
            _ds.display(m_legion2BattleId,"m_legion2BattleId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCityID, true);
            _ds.displaySimple(strOwnerLegion, true);
            _ds.displaySimple(reportList, true);
            _ds.displaySimple(iChineseDayNO, true);
            _ds.displaySimple(strWinLegion, true);
            _ds.displaySimple(bNpcHold, true);
            _ds.displaySimple(owerLogion, true);
            _ds.displaySimple(legionBattleList, true);
            _ds.displaySimple(m_legion2BattleId, false);
            return _os;
        }
    public:
        taf::Int32 iCityID;
        std::string strOwnerLegion;
        map<std::string, ServerEngine::LegionReport> reportList;
        taf::Int32 iChineseDayNO;
        std::string strWinLegion;
        taf::Bool bNpcHold;
        ServerEngine::LegionReport owerLogion;
        vector<ServerEngine::LegionBattle> legionBattleList;
        map<std::string, taf::Int32> m_legion2BattleId;
    };
    inline bool operator==(const LegionCity&l, const LegionCity&r)
    {
        return l.iCityID == r.iCityID && l.strOwnerLegion == r.strOwnerLegion && l.reportList == r.reportList && l.iChineseDayNO == r.iChineseDayNO && l.strWinLegion == r.strWinLegion && l.bNpcHold == r.bNpcHold && l.owerLogion == r.owerLogion && l.legionBattleList == r.legionBattleList && l.m_legion2BattleId == r.m_legion2BattleId;
    }
    inline bool operator!=(const LegionCity&l, const LegionCity&r)
    {
        return !(l == r);
    }

    struct LegionFightRecord : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionFightRecord";
        }
        static string MD5()
        {
            return "467192e8cd934fee6d095fb8a5d8513f";
        }
        LegionFightRecord()
        :strVsLegion("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(guardFightLog, 0);
            _os.write(attFightLog, 1);
            _os.write(strVsLegion, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(guardFightLog, 0, true);
            _is.read(attFightLog, 1, true);
            _is.read(strVsLegion, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(guardFightLog,"guardFightLog");
            _ds.display(attFightLog,"attFightLog");
            _ds.display(strVsLegion,"strVsLegion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(guardFightLog, true);
            _ds.displaySimple(attFightLog, true);
            _ds.displaySimple(strVsLegion, false);
            return _os;
        }
    public:
        vector<std::string> guardFightLog;
        vector<std::string> attFightLog;
        std::string strVsLegion;
    };
    inline bool operator==(const LegionFightRecord&l, const LegionFightRecord&r)
    {
        return l.guardFightLog == r.guardFightLog && l.attFightLog == r.attFightLog && l.strVsLegion == r.strVsLegion;
    }
    inline bool operator!=(const LegionFightRecord&l, const LegionFightRecord&r)
    {
        return !(l == r);
    }

    struct LegionFightDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionFightDetail";
        }
        static string MD5()
        {
            return "abddbf7df4ffb714926079b69c8510d7";
        }
        LegionFightDetail()
        :strGuardName(""),battleBaseLog("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strGuardName, 0);
            _os.write(battleBaseLog, 1);
            _os.write(m_fightDetail, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strGuardName, 0, true);
            _is.read(battleBaseLog, 1, true);
            _is.read(m_fightDetail, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strGuardName,"strGuardName");
            _ds.display(battleBaseLog,"battleBaseLog");
            _ds.display(m_fightDetail,"m_fightDetail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strGuardName, true);
            _ds.displaySimple(battleBaseLog, true);
            _ds.displaySimple(m_fightDetail, false);
            return _os;
        }
    public:
        std::string strGuardName;
        std::string battleBaseLog;
        map<std::string, ServerEngine::LegionFightRecord> m_fightDetail;
    };
    inline bool operator==(const LegionFightDetail&l, const LegionFightDetail&r)
    {
        return l.strGuardName == r.strGuardName && l.battleBaseLog == r.battleBaseLog && l.m_fightDetail == r.m_fightDetail;
    }
    inline bool operator!=(const LegionFightDetail&l, const LegionFightDetail&r)
    {
        return !(l == r);
    }

    struct CityCampFightLog : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CityCampFightLog";
        }
        static string MD5()
        {
            return "512cafb4147700a1e3949e955e2b9c8b";
        }
        CityCampFightLog()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lastFightLogMap, 0);
            _os.write(lastFightLogDetail, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(lastFightLogMap, 0, true);
            _is.read(lastFightLogDetail, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lastFightLogMap,"lastFightLogMap");
            _ds.display(lastFightLogDetail,"lastFightLogDetail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lastFightLogMap, true);
            _ds.displaySimple(lastFightLogDetail, false);
            return _os;
        }
    public:
        map<std::string, map<taf::Int32, std::string> > lastFightLogMap;
        map<taf::Int32, ServerEngine::LegionFightDetail> lastFightLogDetail;
    };
    inline bool operator==(const CityCampFightLog&l, const CityCampFightLog&r)
    {
        return l.lastFightLogMap == r.lastFightLogMap && l.lastFightLogDetail == r.lastFightLogDetail;
    }
    inline bool operator!=(const CityCampFightLog&l, const CityCampFightLog&r)
    {
        return !(l == r);
    }

    struct GlobalLegionCityData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GlobalLegionCityData";
        }
        static string MD5()
        {
            return "713998b5ac10eb2f731b5861091d6caa";
        }
        GlobalLegionCityData()
        :iLastDayNO(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(curLegionCityData, 0);
            _os.write(lastLegionCityData, 1);
            _os.write(iLastDayNO, 2);
            _os.write(iRoportCampMap, 3);
            _os.write(cityCampFightLog, 4);
            _os.write(curCityFightLog, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(curLegionCityData, 0, false);
            _is.read(lastLegionCityData, 1, false);
            _is.read(iLastDayNO, 2, false);
            _is.read(iRoportCampMap, 3, false);
            _is.read(cityCampFightLog, 4, false);
            _is.read(curCityFightLog, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(curLegionCityData,"curLegionCityData");
            _ds.display(lastLegionCityData,"lastLegionCityData");
            _ds.display(iLastDayNO,"iLastDayNO");
            _ds.display(iRoportCampMap,"iRoportCampMap");
            _ds.display(cityCampFightLog,"cityCampFightLog");
            _ds.display(curCityFightLog,"curCityFightLog");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(curLegionCityData, true);
            _ds.displaySimple(lastLegionCityData, true);
            _ds.displaySimple(iLastDayNO, true);
            _ds.displaySimple(iRoportCampMap, true);
            _ds.displaySimple(cityCampFightLog, true);
            _ds.displaySimple(curCityFightLog, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::LegionCity> curLegionCityData;
        map<taf::Int32, ServerEngine::LegionCity> lastLegionCityData;
        taf::Int32 iLastDayNO;
        map<std::string, taf::Int32> iRoportCampMap;
        ServerEngine::CityCampFightLog cityCampFightLog;
        ServerEngine::CityCampFightLog curCityFightLog;
    };
    inline bool operator==(const GlobalLegionCityData&l, const GlobalLegionCityData&r)
    {
        return l.curLegionCityData == r.curLegionCityData && l.lastLegionCityData == r.lastLegionCityData && l.iLastDayNO == r.iLastDayNO && l.iRoportCampMap == r.iRoportCampMap && l.cityCampFightLog == r.cityCampFightLog && l.curCityFightLog == r.curCityFightLog;
    }
    inline bool operator!=(const GlobalLegionCityData&l, const GlobalLegionCityData&r)
    {
        return !(l == r);
    }

    struct CreateBossCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CreateBossCtx";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        CreateBossCtx()
        :iFixMaxHP(0),iFixLevel(0),iHP(0),iDef(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iFixMaxHP, 0);
            _os.write(iFixLevel, 1);
            _os.write(iHP, 2);
            _os.write(iDef, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iFixMaxHP, 0, true);
            _is.read(iFixLevel, 1, true);
            _is.read(iHP, 2, true);
            _is.read(iDef, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iFixMaxHP,"iFixMaxHP");
            _ds.display(iFixLevel,"iFixLevel");
            _ds.display(iHP,"iHP");
            _ds.display(iDef,"iDef");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iFixMaxHP, true);
            _ds.displaySimple(iFixLevel, true);
            _ds.displaySimple(iHP, true);
            _ds.displaySimple(iDef, false);
            return _os;
        }
    public:
        taf::Int32 iFixMaxHP;
        taf::Int32 iFixLevel;
        taf::Int32 iHP;
        taf::Int32 iDef;
    };
    inline bool operator==(const CreateBossCtx&l, const CreateBossCtx&r)
    {
        return l.iFixMaxHP == r.iFixMaxHP && l.iFixLevel == r.iFixLevel && l.iHP == r.iHP && l.iDef == r.iDef;
    }
    inline bool operator!=(const CreateBossCtx&l, const CreateBossCtx&r)
    {
        return !(l == r);
    }

    struct ClimbTowerSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ClimbTowerSystemData";
        }
        static string MD5()
        {
            return "b50ced46a5745705bf90dfd14458661e";
        }
        ClimbTowerSystemData()
        :iHightestLayer(0),iCurrentLayer(0),iTotalCultivation(0),iClimbResetCount(0),iCurHaveBuyTimes(0),iTotalBuyTimes(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iHightestLayer, 0);
            _os.write(iCurrentLayer, 1);
            _os.write(iTotalCultivation, 2);
            _os.write(iClimbResetCount, 3);
            _os.write(dayRestFlag, 4);
            _os.write(iCurHaveBuyTimes, 5);
            _os.write(iTotalBuyTimes, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iHightestLayer, 0, true);
            _is.read(iCurrentLayer, 1, true);
            _is.read(iTotalCultivation, 2, true);
            _is.read(iClimbResetCount, 3, true);
            _is.read(dayRestFlag, 4, false);
            _is.read(iCurHaveBuyTimes, 5, false);
            _is.read(iTotalBuyTimes, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iHightestLayer,"iHightestLayer");
            _ds.display(iCurrentLayer,"iCurrentLayer");
            _ds.display(iTotalCultivation,"iTotalCultivation");
            _ds.display(iClimbResetCount,"iClimbResetCount");
            _ds.display(dayRestFlag,"dayRestFlag");
            _ds.display(iCurHaveBuyTimes,"iCurHaveBuyTimes");
            _ds.display(iTotalBuyTimes,"iTotalBuyTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iHightestLayer, true);
            _ds.displaySimple(iCurrentLayer, true);
            _ds.displaySimple(iTotalCultivation, true);
            _ds.displaySimple(iClimbResetCount, true);
            _ds.displaySimple(dayRestFlag, true);
            _ds.displaySimple(iCurHaveBuyTimes, true);
            _ds.displaySimple(iTotalBuyTimes, false);
            return _os;
        }
    public:
        taf::Int32 iHightestLayer;
        taf::Int32 iCurrentLayer;
        taf::Int32 iTotalCultivation;
        taf::Int32 iClimbResetCount;
        ServerEngine::TimeResetValue dayRestFlag;
        taf::Int32 iCurHaveBuyTimes;
        taf::Int32 iTotalBuyTimes;
    };
    inline bool operator==(const ClimbTowerSystemData&l, const ClimbTowerSystemData&r)
    {
        return l.iHightestLayer == r.iHightestLayer && l.iCurrentLayer == r.iCurrentLayer && l.iTotalCultivation == r.iTotalCultivation && l.iClimbResetCount == r.iClimbResetCount && l.dayRestFlag == r.dayRestFlag && l.iCurHaveBuyTimes == r.iCurHaveBuyTimes && l.iTotalBuyTimes == r.iTotalBuyTimes;
    }
    inline bool operator!=(const ClimbTowerSystemData&l, const ClimbTowerSystemData&r)
    {
        return !(l == r);
    }

    struct AttackBossCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.AttackBossCtx";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        AttackBossCtx()
        :iAttAddPercent(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iAttAddPercent, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iAttAddPercent, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iAttAddPercent,"iAttAddPercent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iAttAddPercent, false);
            return _os;
        }
    public:
        taf::Int32 iAttAddPercent;
    };
    inline bool operator==(const AttackBossCtx&l, const AttackBossCtx&r)
    {
        return l.iAttAddPercent == r.iAttAddPercent;
    }
    inline bool operator!=(const AttackBossCtx&l, const AttackBossCtx&r)
    {
        return !(l == r);
    }

    struct HonorGoodDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.HonorGoodDetail";
        }
        static string MD5()
        {
            return "f31bea63268df3afb87a92c47e4dcc35";
        }
        HonorGoodDetail()
        :iGoodId(0),bIsSale(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iGoodId, 0);
            _os.write(bIsSale, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iGoodId, 0, true);
            _is.read(bIsSale, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iGoodId,"iGoodId");
            _ds.display(bIsSale,"bIsSale");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iGoodId, true);
            _ds.displaySimple(bIsSale, false);
            return _os;
        }
    public:
        taf::Int32 iGoodId;
        taf::Bool bIsSale;
    };
    inline bool operator==(const HonorGoodDetail&l, const HonorGoodDetail&r)
    {
        return l.iGoodId == r.iGoodId && l.bIsSale == r.bIsSale;
    }
    inline bool operator!=(const HonorGoodDetail&l, const HonorGoodDetail&r)
    {
        return !(l == r);
    }

    struct ShopSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ShopSystemData";
        }
        static string MD5()
        {
            return "3560429185fda2f5c8f24cf340e98243";
        }
        ShopSystemData()
        :iGoldRandOnceCount(0),iTokenRandOnceCount(0),dwRefreshSecond(0),iRefreshTimes(0),bHaveFirstRand(true),dwLastTokenFreeSecond(0),dwLastGoldFreeSecond(0),bHaveFirstRandTen(true),lastNormalShopRefreshSecond(0),normalShopRefreshTimes(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(szGoodmap, 0);
            _os.write(iGoldRandOnceCount, 1);
            _os.write(iTokenRandOnceCount, 2);
            _os.write(dwRefreshSecond, 3);
            _os.write(iRefreshTimes, 4);
            _os.write(bHaveFirstRand, 5);
            _os.write(shakeTimes, 6);
            _os.write(tokenFreeValue, 7);
            _os.write(dwLastTokenFreeSecond, 8);
            _os.write(dwLastGoldFreeSecond, 9);
            _os.write(bHaveFirstRandTen, 10);
            _os.write(paymentMap, 11);
            _os.write(actorPayOrderMap, 12);
            _os.write(lastNormalShopRefreshSecond, 13);
            _os.write(normalShopGoods, 14);
            _os.write(normalShopRefreshTimes, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(szGoodmap, 0, true);
            _is.read(iGoldRandOnceCount, 1, true);
            _is.read(iTokenRandOnceCount, 2, true);
            _is.read(dwRefreshSecond, 3, true);
            _is.read(iRefreshTimes, 4, true);
            _is.read(bHaveFirstRand, 5, false);
            _is.read(shakeTimes, 6, false);
            _is.read(tokenFreeValue, 7, false);
            _is.read(dwLastTokenFreeSecond, 8, false);
            _is.read(dwLastGoldFreeSecond, 9, false);
            _is.read(bHaveFirstRandTen, 10, false);
            _is.read(paymentMap, 11, false);
            _is.read(actorPayOrderMap, 12, false);
            _is.read(lastNormalShopRefreshSecond, 13, false);
            _is.read(normalShopGoods, 14, false);
            _is.read(normalShopRefreshTimes, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(szGoodmap,"szGoodmap");
            _ds.display(iGoldRandOnceCount,"iGoldRandOnceCount");
            _ds.display(iTokenRandOnceCount,"iTokenRandOnceCount");
            _ds.display(dwRefreshSecond,"dwRefreshSecond");
            _ds.display(iRefreshTimes,"iRefreshTimes");
            _ds.display(bHaveFirstRand,"bHaveFirstRand");
            _ds.display(shakeTimes,"shakeTimes");
            _ds.display(tokenFreeValue,"tokenFreeValue");
            _ds.display(dwLastTokenFreeSecond,"dwLastTokenFreeSecond");
            _ds.display(dwLastGoldFreeSecond,"dwLastGoldFreeSecond");
            _ds.display(bHaveFirstRandTen,"bHaveFirstRandTen");
            _ds.display(paymentMap,"paymentMap");
            _ds.display(actorPayOrderMap,"actorPayOrderMap");
            _ds.display(lastNormalShopRefreshSecond,"lastNormalShopRefreshSecond");
            _ds.display(normalShopGoods,"normalShopGoods");
            _ds.display(normalShopRefreshTimes,"normalShopRefreshTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(szGoodmap, true);
            _ds.displaySimple(iGoldRandOnceCount, true);
            _ds.displaySimple(iTokenRandOnceCount, true);
            _ds.displaySimple(dwRefreshSecond, true);
            _ds.displaySimple(iRefreshTimes, true);
            _ds.displaySimple(bHaveFirstRand, true);
            _ds.displaySimple(shakeTimes, true);
            _ds.displaySimple(tokenFreeValue, true);
            _ds.displaySimple(dwLastTokenFreeSecond, true);
            _ds.displaySimple(dwLastGoldFreeSecond, true);
            _ds.displaySimple(bHaveFirstRandTen, true);
            _ds.displaySimple(paymentMap, true);
            _ds.displaySimple(actorPayOrderMap, true);
            _ds.displaySimple(lastNormalShopRefreshSecond, true);
            _ds.displaySimple(normalShopGoods, true);
            _ds.displaySimple(normalShopRefreshTimes, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::HonorGoodDetail> szGoodmap;
        taf::Int32 iGoldRandOnceCount;
        taf::Int32 iTokenRandOnceCount;
        taf::UInt32 dwRefreshSecond;
        taf::Int32 iRefreshTimes;
        taf::Bool bHaveFirstRand;
        ServerEngine::TimeResetValue shakeTimes;
        ServerEngine::TimeResetValue tokenFreeValue;
        taf::UInt32 dwLastTokenFreeSecond;
        taf::UInt32 dwLastGoldFreeSecond;
        taf::Bool bHaveFirstRandTen;
        map<taf::Int32, taf::Int32> paymentMap;
        map<std::string, taf::Bool> actorPayOrderMap;
        taf::UInt32 lastNormalShopRefreshSecond;
        map<taf::Int32, ServerEngine::HonorGoodDetail> normalShopGoods;
        taf::UInt32 normalShopRefreshTimes;
    };
    inline bool operator==(const ShopSystemData&l, const ShopSystemData&r)
    {
        return l.szGoodmap == r.szGoodmap && l.iGoldRandOnceCount == r.iGoldRandOnceCount && l.iTokenRandOnceCount == r.iTokenRandOnceCount && l.dwRefreshSecond == r.dwRefreshSecond && l.iRefreshTimes == r.iRefreshTimes && l.bHaveFirstRand == r.bHaveFirstRand && l.shakeTimes == r.shakeTimes && l.tokenFreeValue == r.tokenFreeValue && l.dwLastTokenFreeSecond == r.dwLastTokenFreeSecond && l.dwLastGoldFreeSecond == r.dwLastGoldFreeSecond && l.bHaveFirstRandTen == r.bHaveFirstRandTen && l.paymentMap == r.paymentMap && l.actorPayOrderMap == r.actorPayOrderMap && l.lastNormalShopRefreshSecond == r.lastNormalShopRefreshSecond && l.normalShopGoods == r.normalShopGoods && l.normalShopRefreshTimes == r.normalShopRefreshTimes;
    }
    inline bool operator!=(const ShopSystemData&l, const ShopSystemData&r)
    {
        return !(l == r);
    }

    struct LegionFightSideCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionFightSideCtx";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        LegionFightSideCtx()
        :iAddPercent(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iAddPercent, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iAddPercent, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iAddPercent,"iAddPercent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iAddPercent, false);
            return _os;
        }
    public:
        taf::Int32 iAddPercent;
    };
    inline bool operator==(const LegionFightSideCtx&l, const LegionFightSideCtx&r)
    {
        return l.iAddPercent == r.iAddPercent;
    }
    inline bool operator!=(const LegionFightSideCtx&l, const LegionFightSideCtx&r)
    {
        return !(l == r);
    }

    struct LegionCityFightCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.LegionCityFightCtx";
        }
        static string MD5()
        {
            return "389cf3f564a1daf0edfcdf00d19a1087";
        }
        LegionCityFightCtx()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attCtx, 0);
            _os.write(targetCtx, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(attCtx, 0, true);
            _is.read(targetCtx, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attCtx,"attCtx");
            _ds.display(targetCtx,"targetCtx");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attCtx, true);
            _ds.displaySimple(targetCtx, false);
            return _os;
        }
    public:
        ServerEngine::LegionFightSideCtx attCtx;
        ServerEngine::LegionFightSideCtx targetCtx;
    };
    inline bool operator==(const LegionCityFightCtx&l, const LegionCityFightCtx&r)
    {
        return l.attCtx == r.attCtx && l.targetCtx == r.targetCtx;
    }
    inline bool operator!=(const LegionCityFightCtx&l, const LegionCityFightCtx&r)
    {
        return !(l == r);
    }

    struct FemailHeroDesc : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FemailHeroDesc";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        FemailHeroDesc()
        :iHeroID(0),iFightValue(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iHeroID, 0);
            _os.write(iFightValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iHeroID, 0, true);
            _is.read(iFightValue, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iHeroID,"iHeroID");
            _ds.display(iFightValue,"iFightValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iHeroID, true);
            _ds.displaySimple(iFightValue, false);
            return _os;
        }
    public:
        taf::Int32 iHeroID;
        taf::Int32 iFightValue;
    };
    inline bool operator==(const FemailHeroDesc&l, const FemailHeroDesc&r)
    {
        return l.iHeroID == r.iHeroID && l.iFightValue == r.iFightValue;
    }
    inline bool operator!=(const FemailHeroDesc&l, const FemailHeroDesc&r)
    {
        return !(l == r);
    }

    struct ArenaSavePlayer : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ArenaSavePlayer";
        }
        static string MD5()
        {
            return "4a09220946f14b597986b26bc7d77205";
        }
        ArenaSavePlayer()
        :bMonster(true),iMonsterGrpID(0),iShowHeroID(0),strName(""),iLevel(0),iFightValue(0),iLastBeLootSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bMonster, 0);
            _os.write(iMonsterGrpID, 1);
            _os.write(iShowHeroID, 2);
            _os.write(roleKey, 3);
            _os.write(strName, 4);
            _os.write(iLevel, 5);
            _os.write(iFightValue, 6);
            _os.write(femaleHeroList, 7);
            _os.write(iLastBeLootSecond, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(bMonster, 0, true);
            _is.read(iMonsterGrpID, 1, true);
            _is.read(iShowHeroID, 2, true);
            _is.read(roleKey, 3, true);
            _is.read(strName, 4, true);
            _is.read(iLevel, 5, true);
            _is.read(iFightValue, 6, true);
            _is.read(femaleHeroList, 7, false);
            _is.read(iLastBeLootSecond, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bMonster,"bMonster");
            _ds.display(iMonsterGrpID,"iMonsterGrpID");
            _ds.display(iShowHeroID,"iShowHeroID");
            _ds.display(roleKey,"roleKey");
            _ds.display(strName,"strName");
            _ds.display(iLevel,"iLevel");
            _ds.display(iFightValue,"iFightValue");
            _ds.display(femaleHeroList,"femaleHeroList");
            _ds.display(iLastBeLootSecond,"iLastBeLootSecond");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bMonster, true);
            _ds.displaySimple(iMonsterGrpID, true);
            _ds.displaySimple(iShowHeroID, true);
            _ds.displaySimple(roleKey, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(iFightValue, true);
            _ds.displaySimple(femaleHeroList, true);
            _ds.displaySimple(iLastBeLootSecond, false);
            return _os;
        }
    public:
        taf::Bool bMonster;
        taf::Int32 iMonsterGrpID;
        taf::Int32 iShowHeroID;
        ServerEngine::PKRole roleKey;
        std::string strName;
        taf::Int32 iLevel;
        taf::Int32 iFightValue;
        vector<ServerEngine::FemailHeroDesc> femaleHeroList;
        taf::Int32 iLastBeLootSecond;
    };
    inline bool operator==(const ArenaSavePlayer&l, const ArenaSavePlayer&r)
    {
        return l.bMonster == r.bMonster && l.iMonsterGrpID == r.iMonsterGrpID && l.iShowHeroID == r.iShowHeroID && l.roleKey == r.roleKey && l.strName == r.strName && l.iLevel == r.iLevel && l.iFightValue == r.iFightValue && l.femaleHeroList == r.femaleHeroList && l.iLastBeLootSecond == r.iLastBeLootSecond;
    }
    inline bool operator!=(const ArenaSavePlayer&l, const ArenaSavePlayer&r)
    {
        return !(l == r);
    }

    struct ArenaSaveAwardItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ArenaSaveAwardItem";
        }
        static string MD5()
        {
            return "0e4d361f3e195dc6ff3c8c8d41408a11";
        }
        ArenaSaveAwardItem()
        :dwTime(0),iRank(0),strUUID("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwTime, 0);
            _os.write(iRank, 1);
            _os.write(strUUID, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(dwTime, 0, true);
            _is.read(iRank, 1, true);
            _is.read(strUUID, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwTime,"dwTime");
            _ds.display(iRank,"iRank");
            _ds.display(strUUID,"strUUID");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(iRank, true);
            _ds.displaySimple(strUUID, false);
            return _os;
        }
    public:
        taf::UInt32 dwTime;
        taf::Int32 iRank;
        std::string strUUID;
    };
    inline bool operator==(const ArenaSaveAwardItem&l, const ArenaSaveAwardItem&r)
    {
        return l.dwTime == r.dwTime && l.iRank == r.iRank && l.strUUID == r.strUUID;
    }
    inline bool operator!=(const ArenaSaveAwardItem&l, const ArenaSaveAwardItem&r)
    {
        return !(l == r);
    }

    struct GlobalArenaData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GlobalArenaData";
        }
        static string MD5()
        {
            return "8091d2dd84d86804208a88f7207acddc";
        }
        GlobalArenaData()
        :dwLastAwardTime(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankList, 0);
            _os.write(awardMap, 1);
            _os.write(dwLastAwardTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(rankList, 0, true);
            _is.read(awardMap, 1, true);
            _is.read(dwLastAwardTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankList,"rankList");
            _ds.display(awardMap,"awardMap");
            _ds.display(dwLastAwardTime,"dwLastAwardTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankList, true);
            _ds.displaySimple(awardMap, true);
            _ds.displaySimple(dwLastAwardTime, false);
            return _os;
        }
    public:
        vector<ServerEngine::ArenaSavePlayer> rankList;
        map<std::string, vector<ServerEngine::ArenaSaveAwardItem> > awardMap;
        taf::UInt32 dwLastAwardTime;
    };
    inline bool operator==(const GlobalArenaData&l, const GlobalArenaData&r)
    {
        return l.rankList == r.rankList && l.awardMap == r.awardMap && l.dwLastAwardTime == r.dwLastAwardTime;
    }
    inline bool operator!=(const GlobalArenaData&l, const GlobalArenaData&r)
    {
        return !(l == r);
    }

    struct ArenaAppendData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ArenaAppendData";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        ArenaAppendData()
        :iNowChallengeCount(0),iBuyChallengeCount(0),iLastChgTime(0),iBeginCDSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iNowChallengeCount, 1);
            _os.write(iBuyChallengeCount, 2);
            _os.write(iLastChgTime, 3);
            _os.write(iBeginCDSecond, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iNowChallengeCount, 1, true);
            _is.read(iBuyChallengeCount, 2, true);
            _is.read(iLastChgTime, 3, true);
            _is.read(iBeginCDSecond, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iNowChallengeCount,"iNowChallengeCount");
            _ds.display(iBuyChallengeCount,"iBuyChallengeCount");
            _ds.display(iLastChgTime,"iLastChgTime");
            _ds.display(iBeginCDSecond,"iBeginCDSecond");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iNowChallengeCount, true);
            _ds.displaySimple(iBuyChallengeCount, true);
            _ds.displaySimple(iLastChgTime, true);
            _ds.displaySimple(iBeginCDSecond, false);
            return _os;
        }
    public:
        taf::Int32 iNowChallengeCount;
        taf::Int32 iBuyChallengeCount;
        taf::Int32 iLastChgTime;
        taf::Int32 iBeginCDSecond;
    };
    inline bool operator==(const ArenaAppendData&l, const ArenaAppendData&r)
    {
        return l.iNowChallengeCount == r.iNowChallengeCount && l.iBuyChallengeCount == r.iBuyChallengeCount && l.iLastChgTime == r.iLastChgTime && l.iBeginCDSecond == r.iBeginCDSecond;
    }
    inline bool operator!=(const ArenaAppendData&l, const ArenaAppendData&r)
    {
        return !(l == r);
    }

    struct ArenaSystemSaveData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ArenaSystemSaveData";
        }
        static string MD5()
        {
            return "9f51a55201513548e93f8d2d812fd6a8";
        }
        ArenaSystemSaveData()
        :bHaveNewLog(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(m_addChallengeCount, 0);
            _os.write(m_challengeCount, 1);
            _os.write(m_arenaLogList, 2);
            _os.write(bHaveNewLog, 3);
            _os.write(appendData, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(m_addChallengeCount, 0, true);
            _is.read(m_challengeCount, 1, true);
            _is.read(m_arenaLogList, 2, true);
            _is.read(bHaveNewLog, 3, false);
            _is.read(appendData, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(m_addChallengeCount,"m_addChallengeCount");
            _ds.display(m_challengeCount,"m_challengeCount");
            _ds.display(m_arenaLogList,"m_arenaLogList");
            _ds.display(bHaveNewLog,"bHaveNewLog");
            _ds.display(appendData,"appendData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(m_addChallengeCount, true);
            _ds.displaySimple(m_challengeCount, true);
            _ds.displaySimple(m_arenaLogList, true);
            _ds.displaySimple(bHaveNewLog, true);
            _ds.displaySimple(appendData, false);
            return _os;
        }
    public:
        ServerEngine::TimeResetValue m_addChallengeCount;
        ServerEngine::TimeResetValue m_challengeCount;
        vector<std::string> m_arenaLogList;
        taf::Bool bHaveNewLog;
        ServerEngine::ArenaAppendData appendData;
    };
    inline bool operator==(const ArenaSystemSaveData&l, const ArenaSystemSaveData&r)
    {
        return l.m_addChallengeCount == r.m_addChallengeCount && l.m_challengeCount == r.m_challengeCount && l.m_arenaLogList == r.m_arenaLogList && l.bHaveNewLog == r.bHaveNewLog && l.appendData == r.appendData;
    }
    inline bool operator!=(const ArenaSystemSaveData&l, const ArenaSystemSaveData&r)
    {
        return !(l == r);
    }

    struct GlobalWorldBossData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GlobalWorldBossData";
        }
        static string MD5()
        {
            return "cc0f130f130a79c91c160bc8eb450f9f";
        }
        GlobalWorldBossData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(m_worldBossLevelMap, 0);
            _os.write(m_bossLastFightDayMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(m_worldBossLevelMap, 0, true);
            _is.read(m_bossLastFightDayMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(m_worldBossLevelMap,"m_worldBossLevelMap");
            _ds.display(m_bossLastFightDayMap,"m_bossLastFightDayMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(m_worldBossLevelMap, true);
            _ds.displaySimple(m_bossLastFightDayMap, false);
            return _os;
        }
    public:
        map<taf::Int32, taf::Int32> m_worldBossLevelMap;
        map<taf::Int32, taf::Int32> m_bossLastFightDayMap;
    };
    inline bool operator==(const GlobalWorldBossData&l, const GlobalWorldBossData&r)
    {
        return l.m_worldBossLevelMap == r.m_worldBossLevelMap && l.m_bossLastFightDayMap == r.m_bossLastFightDayMap;
    }
    inline bool operator!=(const GlobalWorldBossData&l, const GlobalWorldBossData&r)
    {
        return !(l == r);
    }

    struct CampBattleSideCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CampBattleSideCtx";
        }
        static string MD5()
        {
            return "e32afc272f194a696558583b14c58b42";
        }
        CampBattleSideCtx()
        :bFixHP(true),werckAddPercent(0),attAddPercent(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bFixHP, 0);
            _os.write(fixHPMap, 1);
            _os.write(werckAddPercent, 2);
            _os.write(attAddPercent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(bFixHP, 0, true);
            _is.read(fixHPMap, 1, false);
            _is.read(werckAddPercent, 2, false);
            _is.read(attAddPercent, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bFixHP,"bFixHP");
            _ds.display(fixHPMap,"fixHPMap");
            _ds.display(werckAddPercent,"werckAddPercent");
            _ds.display(attAddPercent,"attAddPercent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bFixHP, true);
            _ds.displaySimple(fixHPMap, true);
            _ds.displaySimple(werckAddPercent, true);
            _ds.displaySimple(attAddPercent, false);
            return _os;
        }
    public:
        taf::Bool bFixHP;
        map<taf::Int32, taf::Int32> fixHPMap;
        taf::Int32 werckAddPercent;
        taf::Int32 attAddPercent;
    };
    inline bool operator==(const CampBattleSideCtx&l, const CampBattleSideCtx&r)
    {
        return l.bFixHP == r.bFixHP && l.fixHPMap == r.fixHPMap && l.werckAddPercent == r.werckAddPercent && l.attAddPercent == r.attAddPercent;
    }
    inline bool operator!=(const CampBattleSideCtx&l, const CampBattleSideCtx&r)
    {
        return !(l == r);
    }

    struct CampBattleFightCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CampBattleFightCtx";
        }
        static string MD5()
        {
            return "4261ba82a5250a2b787062016007fa5a";
        }
        CampBattleFightCtx()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attCtx, 0);
            _os.write(targetCtx, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(attCtx, 0, true);
            _is.read(targetCtx, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attCtx,"attCtx");
            _ds.display(targetCtx,"targetCtx");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attCtx, true);
            _ds.displaySimple(targetCtx, false);
            return _os;
        }
    public:
        ServerEngine::CampBattleSideCtx attCtx;
        ServerEngine::CampBattleSideCtx targetCtx;
    };
    inline bool operator==(const CampBattleFightCtx&l, const CampBattleFightCtx&r)
    {
        return l.attCtx == r.attCtx && l.targetCtx == r.targetCtx;
    }
    inline bool operator!=(const CampBattleFightCtx&l, const CampBattleFightCtx&r)
    {
        return !(l == r);
    }

    struct FriendNode : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FriendNode";
        }
        static string MD5()
        {
            return "0866c7a25bda72bd56bcb3c43b7c9dcd";
        }
        FriendNode()
        :strFriendName(""),iGetType(0),bHaveGive(true),dwLastChgTime(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strFriendName, 0);
            _os.write(roleKey, 1);
            _os.write(iGetType, 2);
            _os.write(bHaveGive, 3);
            _os.write(dwLastChgTime, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strFriendName, 0, true);
            _is.read(roleKey, 1, true);
            _is.read(iGetType, 2, false);
            _is.read(bHaveGive, 3, false);
            _is.read(dwLastChgTime, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strFriendName,"strFriendName");
            _ds.display(roleKey,"roleKey");
            _ds.display(iGetType,"iGetType");
            _ds.display(bHaveGive,"bHaveGive");
            _ds.display(dwLastChgTime,"dwLastChgTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strFriendName, true);
            _ds.displaySimple(roleKey, true);
            _ds.displaySimple(iGetType, true);
            _ds.displaySimple(bHaveGive, true);
            _ds.displaySimple(dwLastChgTime, false);
            return _os;
        }
    public:
        std::string strFriendName;
        ServerEngine::PKRole roleKey;
        taf::Int32 iGetType;
        taf::Bool bHaveGive;
        taf::UInt32 dwLastChgTime;
    };
    inline bool operator==(const FriendNode&l, const FriendNode&r)
    {
        return l.strFriendName == r.strFriendName && l.roleKey == r.roleKey && l.iGetType == r.iGetType && l.bHaveGive == r.bHaveGive && l.dwLastChgTime == r.dwLastChgTime;
    }
    inline bool operator!=(const FriendNode&l, const FriendNode&r)
    {
        return !(l == r);
    }

    struct FriendSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.FriendSystemData";
        }
        static string MD5()
        {
            return "17c1c4420e0bb3ec339f3315bc8484b3";
        }
        FriendSystemData()
        :iGivePhyStrengthTimes(0),iGetPhyStrengthTimes(0),dwLastChgTime(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iGivePhyStrengthTimes, 0);
            _os.write(iGetPhyStrengthTimes, 1);
            _os.write(m_FriendMap, 2);
            _os.write(m_RequestMap, 3);
            _os.write(dwLastChgTime, 4);
            _os.write(m_haveGetActorMap, 5);
            _os.write(m_haveGiveActorMap, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iGivePhyStrengthTimes, 0, true);
            _is.read(iGetPhyStrengthTimes, 1, true);
            _is.read(m_FriendMap, 2, true);
            _is.read(m_RequestMap, 3, true);
            _is.read(dwLastChgTime, 4, true);
            _is.read(m_haveGetActorMap, 5, false);
            _is.read(m_haveGiveActorMap, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iGivePhyStrengthTimes,"iGivePhyStrengthTimes");
            _ds.display(iGetPhyStrengthTimes,"iGetPhyStrengthTimes");
            _ds.display(m_FriendMap,"m_FriendMap");
            _ds.display(m_RequestMap,"m_RequestMap");
            _ds.display(dwLastChgTime,"dwLastChgTime");
            _ds.display(m_haveGetActorMap,"m_haveGetActorMap");
            _ds.display(m_haveGiveActorMap,"m_haveGiveActorMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iGivePhyStrengthTimes, true);
            _ds.displaySimple(iGetPhyStrengthTimes, true);
            _ds.displaySimple(m_FriendMap, true);
            _ds.displaySimple(m_RequestMap, true);
            _ds.displaySimple(dwLastChgTime, true);
            _ds.displaySimple(m_haveGetActorMap, true);
            _ds.displaySimple(m_haveGiveActorMap, false);
            return _os;
        }
    public:
        taf::Int32 iGivePhyStrengthTimes;
        taf::Int32 iGetPhyStrengthTimes;
        map<std::string, ServerEngine::FriendNode> m_FriendMap;
        map<std::string, ServerEngine::FriendNode> m_RequestMap;
        taf::UInt32 dwLastChgTime;
        map<std::string, taf::Bool> m_haveGetActorMap;
        map<std::string, taf::Bool> m_haveGiveActorMap;
    };
    inline bool operator==(const FriendSystemData&l, const FriendSystemData&r)
    {
        return l.iGivePhyStrengthTimes == r.iGivePhyStrengthTimes && l.iGetPhyStrengthTimes == r.iGetPhyStrengthTimes && l.m_FriendMap == r.m_FriendMap && l.m_RequestMap == r.m_RequestMap && l.dwLastChgTime == r.dwLastChgTime && l.m_haveGetActorMap == r.m_haveGetActorMap && l.m_haveGiveActorMap == r.m_haveGiveActorMap;
    }
    inline bool operator!=(const FriendSystemData&l, const FriendSystemData&r)
    {
        return !(l == r);
    }

    struct TaskDBUnit : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.TaskDBUnit";
        }
        static string MD5()
        {
            return "8e33e5c3df3bb3ddc40abc2741f3d048";
        }
        TaskDBUnit()
        :iTaskId(0),iTaskProcess(0),chgTime(0),enTaskState(0),iHaveFinishedTimes(0),iTaskType(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTaskId, 0);
            _os.write(iTaskProcess, 1);
            _os.write(chgTime, 2);
            _os.write(enTaskState, 3);
            _os.write(iHaveFinishedTimes, 4);
            _os.write(iTaskType, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iTaskId, 0, true);
            _is.read(iTaskProcess, 1, true);
            _is.read(chgTime, 2, true);
            _is.read(enTaskState, 3, true);
            _is.read(iHaveFinishedTimes, 4, true);
            _is.read(iTaskType, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTaskId,"iTaskId");
            _ds.display(iTaskProcess,"iTaskProcess");
            _ds.display(chgTime,"chgTime");
            _ds.display(enTaskState,"enTaskState");
            _ds.display(iHaveFinishedTimes,"iHaveFinishedTimes");
            _ds.display(iTaskType,"iTaskType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTaskId, true);
            _ds.displaySimple(iTaskProcess, true);
            _ds.displaySimple(chgTime, true);
            _ds.displaySimple(enTaskState, true);
            _ds.displaySimple(iHaveFinishedTimes, true);
            _ds.displaySimple(iTaskType, false);
            return _os;
        }
    public:
        taf::Int32 iTaskId;
        taf::Int32 iTaskProcess;
        taf::Int32 chgTime;
        taf::Int32 enTaskState;
        taf::Int32 iHaveFinishedTimes;
        taf::Int32 iTaskType;
    };
    inline bool operator==(const TaskDBUnit&l, const TaskDBUnit&r)
    {
        return l.iTaskId == r.iTaskId && l.iTaskProcess == r.iTaskProcess && l.chgTime == r.chgTime && l.enTaskState == r.enTaskState && l.iHaveFinishedTimes == r.iHaveFinishedTimes && l.iTaskType == r.iTaskType;
    }
    inline bool operator!=(const TaskDBUnit&l, const TaskDBUnit&r)
    {
        return !(l == r);
    }

    struct MonthCardData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.MonthCardData";
        }
        static string MD5()
        {
            return "61fbcabee6f8c9e8673634700e126615";
        }
        MonthCardData()
        :iCanGetTimes(0),lastChgTime(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCanGetTimes, 0);
            _os.write(lastChgTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iCanGetTimes, 0, true);
            _is.read(lastChgTime, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCanGetTimes,"iCanGetTimes");
            _ds.display(lastChgTime,"lastChgTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCanGetTimes, true);
            _ds.displaySimple(lastChgTime, false);
            return _os;
        }
    public:
        taf::Int32 iCanGetTimes;
        taf::UInt32 lastChgTime;
    };
    inline bool operator==(const MonthCardData&l, const MonthCardData&r)
    {
        return l.iCanGetTimes == r.iCanGetTimes && l.lastChgTime == r.lastChgTime;
    }
    inline bool operator!=(const MonthCardData&l, const MonthCardData&r)
    {
        return !(l == r);
    }

    struct TaskSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.TaskSystemData";
        }
        static string MD5()
        {
            return "69d0cbab963e5f98bb66b06d86fc57fd";
        }
        TaskSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dbTaskFinishMap, 0);
            _os.write(vigorValue, 1);
            _os.write(monthCardData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(dbTaskFinishMap, 0, true);
            _is.read(vigorValue, 1, false);
            _is.read(monthCardData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dbTaskFinishMap,"dbTaskFinishMap");
            _ds.display(vigorValue,"vigorValue");
            _ds.display(monthCardData,"monthCardData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dbTaskFinishMap, true);
            _ds.displaySimple(vigorValue, true);
            _ds.displaySimple(monthCardData, false);
            return _os;
        }
    public:
        map<taf::Int32, ServerEngine::TaskDBUnit> dbTaskFinishMap;
        ServerEngine::TimeResetValue vigorValue;
        ServerEngine::MonthCardData monthCardData;
    };
    inline bool operator==(const TaskSystemData&l, const TaskSystemData&r)
    {
        return l.dbTaskFinishMap == r.dbTaskFinishMap && l.vigorValue == r.vigorValue && l.monthCardData == r.monthCardData;
    }
    inline bool operator!=(const TaskSystemData&l, const TaskSystemData&r)
    {
        return !(l == r);
    }

    struct GuideSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GuideSystemData";
        }
        static string MD5()
        {
            return "4406e8cb2df5fb493b3a3e250b4520f6";
        }
        GuideSystemData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(finishedList, 0);
            _os.write(openedList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(finishedList, 0, true);
            _is.read(openedList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(finishedList,"finishedList");
            _ds.display(openedList,"openedList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(finishedList, true);
            _ds.displaySimple(openedList, false);
            return _os;
        }
    public:
        vector<taf::Int32> finishedList;
        vector<taf::Int32> openedList;
    };
    inline bool operator==(const GuideSystemData&l, const GuideSystemData&r)
    {
        return l.finishedList == r.finishedList && l.openedList == r.openedList;
    }
    inline bool operator!=(const GuideSystemData&l, const GuideSystemData&r)
    {
        return !(l == r);
    }

    struct DreamLandGuardFormation : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandGuardFormation";
        }
        static string MD5()
        {
            return "9df29a0991c930cc14f4e15d764a28a6";
        }
        DreamLandGuardFormation()
        :iPos(0),iBaseId(0),iStepLevel(0),iLevel(0),ihp(0),iMaxHp(0),iIsGodAniaml(0),bNotMonster(true),iQuality(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iPos, 0);
            _os.write(iBaseId, 1);
            _os.write(iStepLevel, 2);
            _os.write(iLevel, 3);
            _os.write(ihp, 4);
            _os.write(iMaxHp, 5);
            _os.write(iIsGodAniaml, 6);
            _os.write(bNotMonster, 7);
            _os.write(iQuality, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iPos, 0, true);
            _is.read(iBaseId, 1, true);
            _is.read(iStepLevel, 2, true);
            _is.read(iLevel, 3, true);
            _is.read(ihp, 4, true);
            _is.read(iMaxHp, 5, true);
            _is.read(iIsGodAniaml, 6, true);
            _is.read(bNotMonster, 7, false);
            _is.read(iQuality, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iPos,"iPos");
            _ds.display(iBaseId,"iBaseId");
            _ds.display(iStepLevel,"iStepLevel");
            _ds.display(iLevel,"iLevel");
            _ds.display(ihp,"ihp");
            _ds.display(iMaxHp,"iMaxHp");
            _ds.display(iIsGodAniaml,"iIsGodAniaml");
            _ds.display(bNotMonster,"bNotMonster");
            _ds.display(iQuality,"iQuality");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iPos, true);
            _ds.displaySimple(iBaseId, true);
            _ds.displaySimple(iStepLevel, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(ihp, true);
            _ds.displaySimple(iMaxHp, true);
            _ds.displaySimple(iIsGodAniaml, true);
            _ds.displaySimple(bNotMonster, true);
            _ds.displaySimple(iQuality, false);
            return _os;
        }
    public:
        taf::Int32 iPos;
        taf::Int32 iBaseId;
        taf::Int32 iStepLevel;
        taf::Int32 iLevel;
        taf::Int32 ihp;
        taf::Int32 iMaxHp;
        taf::Int32 iIsGodAniaml;
        taf::Bool bNotMonster;
        taf::Int32 iQuality;
    };
    inline bool operator==(const DreamLandGuardFormation&l, const DreamLandGuardFormation&r)
    {
        return l.iPos == r.iPos && l.iBaseId == r.iBaseId && l.iStepLevel == r.iStepLevel && l.iLevel == r.iLevel && l.ihp == r.ihp && l.iMaxHp == r.iMaxHp && l.iIsGodAniaml == r.iIsGodAniaml && l.bNotMonster == r.bNotMonster && l.iQuality == r.iQuality;
    }
    inline bool operator!=(const DreamLandGuardFormation&l, const DreamLandGuardFormation&r)
    {
        return !(l == r);
    }

    struct DreamLandGuardData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandGuardData";
        }
        static string MD5()
        {
            return "f25add0daa63cf56ae58d1a4c24d655a";
        }
        DreamLandGuardData()
        :actorName(""),iTotalFightValue(0),iActorHead(0),iActorLevel(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorName, 0);
            _os.write(formation, 1);
            _os.write(iTotalFightValue, 2);
            _os.write(iActorHead, 3);
            _os.write(iActorLevel, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(actorName, 0, true);
            _is.read(formation, 1, true);
            _is.read(iTotalFightValue, 2, true);
            _is.read(iActorHead, 3, false);
            _is.read(iActorLevel, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorName,"actorName");
            _ds.display(formation,"formation");
            _ds.display(iTotalFightValue,"iTotalFightValue");
            _ds.display(iActorHead,"iActorHead");
            _ds.display(iActorLevel,"iActorLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorName, true);
            _ds.displaySimple(formation, true);
            _ds.displaySimple(iTotalFightValue, true);
            _ds.displaySimple(iActorHead, true);
            _ds.displaySimple(iActorLevel, false);
            return _os;
        }
    public:
        std::string actorName;
        vector<ServerEngine::DreamLandGuardFormation> formation;
        taf::Int32 iTotalFightValue;
        taf::Int32 iActorHead;
        taf::Int32 iActorLevel;
    };
    inline bool operator==(const DreamLandGuardData&l, const DreamLandGuardData&r)
    {
        return l.actorName == r.actorName && l.formation == r.formation && l.iTotalFightValue == r.iTotalFightValue && l.iActorHead == r.iActorHead && l.iActorLevel == r.iActorLevel;
    }
    inline bool operator!=(const DreamLandGuardData&l, const DreamLandGuardData&r)
    {
        return !(l == r);
    }

    struct DreamLandSceneRecord : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandSceneRecord";
        }
        static string MD5()
        {
            return "3dadadbc812b1ed58388b36c40c5583c";
        }
        DreamLandSceneRecord()
        :iSceneId(0),sceneState(0),iHaveGetBox(0),iHaveGuard(0),bFirstFight(true),iMonsterHp(0),iMonsterAttValue(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iSceneId, 0);
            _os.write(sceneState, 1);
            _os.write(iHaveGetBox, 2);
            _os.write(iHaveGuard, 3);
            _os.write(bFirstFight, 4);
            _os.write(targethpMap, 5);
            _os.write(iMonsterHp, 6);
            _os.write(iMonsterAttValue, 7);
            _os.write(Guarddata, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iSceneId, 0, true);
            _is.read(sceneState, 1, true);
            _is.read(iHaveGetBox, 2, true);
            _is.read(iHaveGuard, 3, true);
            _is.read(bFirstFight, 4, true);
            _is.read(targethpMap, 5, true);
            _is.read(iMonsterHp, 6, true);
            _is.read(iMonsterAttValue, 7, true);
            _is.read(Guarddata, 8, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iSceneId,"iSceneId");
            _ds.display(sceneState,"sceneState");
            _ds.display(iHaveGetBox,"iHaveGetBox");
            _ds.display(iHaveGuard,"iHaveGuard");
            _ds.display(bFirstFight,"bFirstFight");
            _ds.display(targethpMap,"targethpMap");
            _ds.display(iMonsterHp,"iMonsterHp");
            _ds.display(iMonsterAttValue,"iMonsterAttValue");
            _ds.display(Guarddata,"Guarddata");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iSceneId, true);
            _ds.displaySimple(sceneState, true);
            _ds.displaySimple(iHaveGetBox, true);
            _ds.displaySimple(iHaveGuard, true);
            _ds.displaySimple(bFirstFight, true);
            _ds.displaySimple(targethpMap, true);
            _ds.displaySimple(iMonsterHp, true);
            _ds.displaySimple(iMonsterAttValue, true);
            _ds.displaySimple(Guarddata, false);
            return _os;
        }
    public:
        taf::Int32 iSceneId;
        taf::Int32 sceneState;
        taf::Char iHaveGetBox;
        taf::Char iHaveGuard;
        taf::Bool bFirstFight;
        map<taf::Int32, taf::Int32> targethpMap;
        taf::Int32 iMonsterHp;
        taf::Int32 iMonsterAttValue;
        ServerEngine::DreamLandGuardData Guarddata;
    };
    inline bool operator==(const DreamLandSceneRecord&l, const DreamLandSceneRecord&r)
    {
        return l.iSceneId == r.iSceneId && l.sceneState == r.sceneState && l.iHaveGetBox == r.iHaveGetBox && l.iHaveGuard == r.iHaveGuard && l.bFirstFight == r.bFirstFight && l.targethpMap == r.targethpMap && l.iMonsterHp == r.iMonsterHp && l.iMonsterAttValue == r.iMonsterAttValue && l.Guarddata == r.Guarddata;
    }
    inline bool operator!=(const DreamLandSceneRecord&l, const DreamLandSceneRecord&r)
    {
        return !(l == r);
    }

    struct DreamLandSceneActor : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandSceneActor";
        }
        static string MD5()
        {
            return "b27d8ecc3da20472b0541db2b9f9df18";
        }
        DreamLandSceneActor()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(roleKey, 0);
            _os.write(actorContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(roleKey, 0, true);
            _is.read(actorContext, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(roleKey,"roleKey");
            _ds.display(actorContext,"actorContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(roleKey, true);
            _ds.displaySimple(actorContext, false);
            return _os;
        }
    public:
        ServerEngine::PKRole roleKey;
        ServerEngine::ActorCreateContext actorContext;
    };
    inline bool operator==(const DreamLandSceneActor&l, const DreamLandSceneActor&r)
    {
        return l.roleKey == r.roleKey && l.actorContext == r.actorContext;
    }
    inline bool operator!=(const DreamLandSceneActor&l, const DreamLandSceneActor&r)
    {
        return !(l == r);
    }

    struct DreamLandData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandData";
        }
        static string MD5()
        {
            return "464d81e4845f9fe2f464f2e50dac7c12";
        }
        DreamLandData()
        :dwTimeChg(0),ihaveUseTimes(0),unLockSectionId(0),iHaveUseResetTime(0),iItemCount(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sectionList, 0);
            _os.write(sectionProcessVec, 1);
            _os.write(FormationMap, 2);
            _os.write(dwTimeChg, 3);
            _os.write(ihaveUseTimes, 4);
            _os.write(unLockSectionId, 5);
            _os.write(sceneActor, 6);
            _os.write(iHaveUseResetTime, 7);
            _os.write(actorHpMap, 8);
            _os.write(iItemCount, 9);
            _os.write(guardNamesVec, 10);
            _os.write(sectionGuardPlayerMap, 11);
            _os.write(deadHeroList, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(sectionList, 0, true);
            _is.read(sectionProcessVec, 1, true);
            _is.read(FormationMap, 2, true);
            _is.read(dwTimeChg, 3, true);
            _is.read(ihaveUseTimes, 4, true);
            _is.read(unLockSectionId, 5, true);
            _is.read(sceneActor, 6, true);
            _is.read(iHaveUseResetTime, 7, true);
            _is.read(actorHpMap, 8, true);
            _is.read(iItemCount, 9, true);
            _is.read(guardNamesVec, 10, false);
            _is.read(sectionGuardPlayerMap, 11, false);
            _is.read(deadHeroList, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sectionList,"sectionList");
            _ds.display(sectionProcessVec,"sectionProcessVec");
            _ds.display(FormationMap,"FormationMap");
            _ds.display(dwTimeChg,"dwTimeChg");
            _ds.display(ihaveUseTimes,"ihaveUseTimes");
            _ds.display(unLockSectionId,"unLockSectionId");
            _ds.display(sceneActor,"sceneActor");
            _ds.display(iHaveUseResetTime,"iHaveUseResetTime");
            _ds.display(actorHpMap,"actorHpMap");
            _ds.display(iItemCount,"iItemCount");
            _ds.display(guardNamesVec,"guardNamesVec");
            _ds.display(sectionGuardPlayerMap,"sectionGuardPlayerMap");
            _ds.display(deadHeroList,"deadHeroList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sectionList, true);
            _ds.displaySimple(sectionProcessVec, true);
            _ds.displaySimple(FormationMap, true);
            _ds.displaySimple(dwTimeChg, true);
            _ds.displaySimple(ihaveUseTimes, true);
            _ds.displaySimple(unLockSectionId, true);
            _ds.displaySimple(sceneActor, true);
            _ds.displaySimple(iHaveUseResetTime, true);
            _ds.displaySimple(actorHpMap, true);
            _ds.displaySimple(iItemCount, true);
            _ds.displaySimple(guardNamesVec, true);
            _ds.displaySimple(sectionGuardPlayerMap, true);
            _ds.displaySimple(deadHeroList, false);
            return _os;
        }
    public:
        vector<taf::Int32> sectionList;
        vector<ServerEngine::DreamLandSceneRecord> sectionProcessVec;
        map<taf::Int32, std::string> FormationMap;
        taf::UInt32 dwTimeChg;
        taf::Int32 ihaveUseTimes;
        taf::Int32 unLockSectionId;
        ServerEngine::DreamLandSceneActor sceneActor;
        taf::Int32 iHaveUseResetTime;
        map<std::string, taf::Int32> actorHpMap;
        taf::Int32 iItemCount;
        vector<ServerEngine::ArenaSavePlayer> guardNamesVec;
        map<taf::Int32, vector<ServerEngine::ArenaSavePlayer> > sectionGuardPlayerMap;
        vector<std::string> deadHeroList;
    };
    inline bool operator==(const DreamLandData&l, const DreamLandData&r)
    {
        return l.sectionList == r.sectionList && l.sectionProcessVec == r.sectionProcessVec && l.FormationMap == r.FormationMap && l.dwTimeChg == r.dwTimeChg && l.ihaveUseTimes == r.ihaveUseTimes && l.unLockSectionId == r.unLockSectionId && l.sceneActor == r.sceneActor && l.iHaveUseResetTime == r.iHaveUseResetTime && l.actorHpMap == r.actorHpMap && l.iItemCount == r.iItemCount && l.guardNamesVec == r.guardNamesVec && l.sectionGuardPlayerMap == r.sectionGuardPlayerMap && l.deadHeroList == r.deadHeroList;
    }
    inline bool operator!=(const DreamLandData&l, const DreamLandData&r)
    {
        return !(l == r);
    }

    struct DreamLandSideCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandSideCtx";
        }
        static string MD5()
        {
            return "abb3f910c6ed6b0d9108469c35f67f52";
        }
        DreamLandSideCtx()
        :bFixHP(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bFixHP, 0);
            _os.write(fixHPMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(bFixHP, 0, true);
            _is.read(fixHPMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bFixHP,"bFixHP");
            _ds.display(fixHPMap,"fixHPMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bFixHP, true);
            _ds.displaySimple(fixHPMap, false);
            return _os;
        }
    public:
        taf::Bool bFixHP;
        map<taf::Int32, taf::Int32> fixHPMap;
    };
    inline bool operator==(const DreamLandSideCtx&l, const DreamLandSideCtx&r)
    {
        return l.bFixHP == r.bFixHP && l.fixHPMap == r.fixHPMap;
    }
    inline bool operator!=(const DreamLandSideCtx&l, const DreamLandSideCtx&r)
    {
        return !(l == r);
    }

    struct DreamLandFightCtx : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DreamLandFightCtx";
        }
        static string MD5()
        {
            return "2d9a2dfc93dc0a4b9be13c5518864833";
        }
        DreamLandFightCtx()
        :iItemCount(0),iMonsterHp(0),iMonsterAttValue(0),strHerolistData(""),strFormationData("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attCtx, 0);
            _os.write(targetCtx, 1);
            _os.write(iItemCount, 2);
            _os.write(iMonsterHp, 3);
            _os.write(iMonsterAttValue, 4);
            _os.write(properyMap, 6);
            _os.write(strHerolistData, 7);
            _os.write(strFormationData, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(attCtx, 0, true);
            _is.read(targetCtx, 1, true);
            _is.read(iItemCount, 2, true);
            _is.read(iMonsterHp, 3, true);
            _is.read(iMonsterAttValue, 4, true);
            _is.read(properyMap, 6, true);
            _is.read(strHerolistData, 7, true);
            _is.read(strFormationData, 8, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attCtx,"attCtx");
            _ds.display(targetCtx,"targetCtx");
            _ds.display(iItemCount,"iItemCount");
            _ds.display(iMonsterHp,"iMonsterHp");
            _ds.display(iMonsterAttValue,"iMonsterAttValue");
            _ds.display(properyMap,"properyMap");
            _ds.display(strHerolistData,"strHerolistData");
            _ds.display(strFormationData,"strFormationData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attCtx, true);
            _ds.displaySimple(targetCtx, true);
            _ds.displaySimple(iItemCount, true);
            _ds.displaySimple(iMonsterHp, true);
            _ds.displaySimple(iMonsterAttValue, true);
            _ds.displaySimple(properyMap, true);
            _ds.displaySimple(strHerolistData, true);
            _ds.displaySimple(strFormationData, false);
            return _os;
        }
    public:
        ServerEngine::DreamLandSideCtx attCtx;
        ServerEngine::DreamLandSideCtx targetCtx;
        taf::Int32 iItemCount;
        taf::Int32 iMonsterHp;
        taf::Int32 iMonsterAttValue;
        map<taf::Int32, taf::Int32> properyMap;
        std::string strHerolistData;
        std::string strFormationData;
    };
    inline bool operator==(const DreamLandFightCtx&l, const DreamLandFightCtx&r)
    {
        return l.attCtx == r.attCtx && l.targetCtx == r.targetCtx && l.iItemCount == r.iItemCount && l.iMonsterHp == r.iMonsterHp && l.iMonsterAttValue == r.iMonsterAttValue && l.properyMap == r.properyMap && l.strHerolistData == r.strHerolistData && l.strFormationData == r.strFormationData;
    }
    inline bool operator!=(const DreamLandFightCtx&l, const DreamLandFightCtx&r)
    {
        return !(l == r);
    }

    struct MailData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.MailData";
        }
        static string MD5()
        {
            return "b11ee5ff8e91f192a5906be723b61c3f";
        }
        MailData()
        :strUUID(""),strTitle(""),strSender(""),strContent(""),iState(0),strAwardInfo(""),dwSenderTime(0),iKeepDay(0),iMailType(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strUUID, 0);
            _os.write(strTitle, 1);
            _os.write(strSender, 2);
            _os.write(strContent, 3);
            _os.write(iState, 4);
            _os.write(strAwardInfo, 5);
            _os.write(dwSenderTime, 6);
            _os.write(iKeepDay, 7);
            _os.write(iMailType, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strUUID, 0, true);
            _is.read(strTitle, 1, true);
            _is.read(strSender, 2, true);
            _is.read(strContent, 3, true);
            _is.read(iState, 4, true);
            _is.read(strAwardInfo, 5, true);
            _is.read(dwSenderTime, 6, true);
            _is.read(iKeepDay, 7, true);
            _is.read(iMailType, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strUUID,"strUUID");
            _ds.display(strTitle,"strTitle");
            _ds.display(strSender,"strSender");
            _ds.display(strContent,"strContent");
            _ds.display(iState,"iState");
            _ds.display(strAwardInfo,"strAwardInfo");
            _ds.display(dwSenderTime,"dwSenderTime");
            _ds.display(iKeepDay,"iKeepDay");
            _ds.display(iMailType,"iMailType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strUUID, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strSender, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(iState, true);
            _ds.displaySimple(strAwardInfo, true);
            _ds.displaySimple(dwSenderTime, true);
            _ds.displaySimple(iKeepDay, true);
            _ds.displaySimple(iMailType, false);
            return _os;
        }
    public:
        std::string strUUID;
        std::string strTitle;
        std::string strSender;
        std::string strContent;
        taf::Int32 iState;
        std::string strAwardInfo;
        taf::UInt32 dwSenderTime;
        taf::Int32 iKeepDay;
        taf::Int32 iMailType;
    };
    inline bool operator==(const MailData&l, const MailData&r)
    {
        return l.strUUID == r.strUUID && l.strTitle == r.strTitle && l.strSender == r.strSender && l.strContent == r.strContent && l.iState == r.iState && l.strAwardInfo == r.strAwardInfo && l.dwSenderTime == r.dwSenderTime && l.iKeepDay == r.iKeepDay && l.iMailType == r.iMailType;
    }
    inline bool operator!=(const MailData&l, const MailData&r)
    {
        return !(l == r);
    }

    struct MailSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.MailSystemData";
        }
        static string MD5()
        {
            return "ef2a0b9e7a380f06ea5aad535dd5ed0d";
        }
        MailSystemData()
        :dwChgSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mailDataList, 0);
            _os.write(usedBroadcastIDList, 1);
            _os.write(dwChgSecond, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(mailDataList, 0, true);
            _is.read(usedBroadcastIDList, 1, true);
            _is.read(dwChgSecond, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mailDataList,"mailDataList");
            _ds.display(usedBroadcastIDList,"usedBroadcastIDList");
            _ds.display(dwChgSecond,"dwChgSecond");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mailDataList, true);
            _ds.displaySimple(usedBroadcastIDList, true);
            _ds.displaySimple(dwChgSecond, false);
            return _os;
        }
    public:
        vector<ServerEngine::MailData> mailDataList;
        vector<taf::Int32> usedBroadcastIDList;
        taf::UInt32 dwChgSecond;
    };
    inline bool operator==(const MailSystemData&l, const MailSystemData&r)
    {
        return l.mailDataList == r.mailDataList && l.usedBroadcastIDList == r.usedBroadcastIDList && l.dwChgSecond == r.dwChgSecond;
    }
    inline bool operator!=(const MailSystemData&l, const MailSystemData&r)
    {
        return !(l == r);
    }

    struct ManorResData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ManorResData";
        }
        static string MD5()
        {
            return "f613b2257f6d1fbf1deee7ea1f826973";
        }
        ManorResData()
        :ResId(0),iResLevel(0),beginProductSecond(0),beginLevelUpSecond(0),bResIsBuild(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ResId, 0);
            _os.write(iResLevel, 1);
            _os.write(beginProductSecond, 2);
            _os.write(beginLevelUpSecond, 3);
            _os.write(bResIsBuild, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(ResId, 0, true);
            _is.read(iResLevel, 1, true);
            _is.read(beginProductSecond, 2, true);
            _is.read(beginLevelUpSecond, 3, true);
            _is.read(bResIsBuild, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ResId,"ResId");
            _ds.display(iResLevel,"iResLevel");
            _ds.display(beginProductSecond,"beginProductSecond");
            _ds.display(beginLevelUpSecond,"beginLevelUpSecond");
            _ds.display(bResIsBuild,"bResIsBuild");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ResId, true);
            _ds.displaySimple(iResLevel, true);
            _ds.displaySimple(beginProductSecond, true);
            _ds.displaySimple(beginLevelUpSecond, true);
            _ds.displaySimple(bResIsBuild, false);
            return _os;
        }
    public:
        taf::Int32 ResId;
        taf::Int32 iResLevel;
        taf::Int32 beginProductSecond;
        taf::Int32 beginLevelUpSecond;
        taf::Bool bResIsBuild;
    };
    inline bool operator==(const ManorResData&l, const ManorResData&r)
    {
        return l.ResId == r.ResId && l.iResLevel == r.iResLevel && l.beginProductSecond == r.beginProductSecond && l.beginLevelUpSecond == r.beginLevelUpSecond && l.bResIsBuild == r.bResIsBuild;
    }
    inline bool operator!=(const ManorResData&l, const ManorResData&r)
    {
        return !(l == r);
    }

    struct ManorWuHunAndItemUnit : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ManorWuHunAndItemUnit";
        }
        static string MD5()
        {
            return "0ba497fe64c2ef49f9542bbd426dc02f";
        }
        ManorWuHunAndItemUnit()
        :id(0),bWuXieKeji(true),bHaveBeLoot(true),iCount(0),iBeLootCount(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(bWuXieKeji, 1);
            _os.write(bHaveBeLoot, 2);
            _os.write(iCount, 3);
            _os.write(iBeLootCount, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(id, 0, true);
            _is.read(bWuXieKeji, 1, true);
            _is.read(bHaveBeLoot, 2, false);
            _is.read(iCount, 3, true);
            _is.read(iBeLootCount, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(bWuXieKeji,"bWuXieKeji");
            _ds.display(bHaveBeLoot,"bHaveBeLoot");
            _ds.display(iCount,"iCount");
            _ds.display(iBeLootCount,"iBeLootCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(bWuXieKeji, true);
            _ds.displaySimple(bHaveBeLoot, true);
            _ds.displaySimple(iCount, true);
            _ds.displaySimple(iBeLootCount, false);
            return _os;
        }
    public:
        taf::Int32 id;
        taf::Bool bWuXieKeji;
        taf::Bool bHaveBeLoot;
        taf::Int32 iCount;
        taf::Int32 iBeLootCount;
    };
    inline bool operator==(const ManorWuHunAndItemUnit&l, const ManorWuHunAndItemUnit&r)
    {
        return l.id == r.id && l.bWuXieKeji == r.bWuXieKeji && l.bHaveBeLoot == r.bHaveBeLoot && l.iCount == r.iCount && l.iBeLootCount == r.iBeLootCount;
    }
    inline bool operator!=(const ManorWuHunAndItemUnit&l, const ManorWuHunAndItemUnit&r)
    {
        return !(l == r);
    }

    struct ManorWuHunAndItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ManorWuHunAndItemData";
        }
        static string MD5()
        {
            return "7dccbbd73ba733171e6f09dd13aca0f9";
        }
        ManorWuHunAndItemData()
        :level(0),beginProductSecond(0),beginLevelUpSecond(0),bResIsBuild(true),bIsProduct(true),iHaveRefreshTimes(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(level, 1);
            _os.write(beginProductSecond, 2);
            _os.write(beginLevelUpSecond, 3);
            _os.write(bResIsBuild, 4);
            _os.write(wuHunAndItemList, 5);
            _os.write(bIsProduct, 6);
            _os.write(iHaveRefreshTimes, 7);
            _os.write(befroreProductCache, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(level, 1, true);
            _is.read(beginProductSecond, 2, true);
            _is.read(beginLevelUpSecond, 3, true);
            _is.read(bResIsBuild, 4, true);
            _is.read(wuHunAndItemList, 5, true);
            _is.read(bIsProduct, 6, true);
            _is.read(iHaveRefreshTimes, 7, true);
            _is.read(befroreProductCache, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(level,"level");
            _ds.display(beginProductSecond,"beginProductSecond");
            _ds.display(beginLevelUpSecond,"beginLevelUpSecond");
            _ds.display(bResIsBuild,"bResIsBuild");
            _ds.display(wuHunAndItemList,"wuHunAndItemList");
            _ds.display(bIsProduct,"bIsProduct");
            _ds.display(iHaveRefreshTimes,"iHaveRefreshTimes");
            _ds.display(befroreProductCache,"befroreProductCache");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(level, true);
            _ds.displaySimple(beginProductSecond, true);
            _ds.displaySimple(beginLevelUpSecond, true);
            _ds.displaySimple(bResIsBuild, true);
            _ds.displaySimple(wuHunAndItemList, true);
            _ds.displaySimple(bIsProduct, true);
            _ds.displaySimple(iHaveRefreshTimes, true);
            _ds.displaySimple(befroreProductCache, false);
            return _os;
        }
    public:
        taf::Int32 level;
        taf::Int32 beginProductSecond;
        taf::Int32 beginLevelUpSecond;
        taf::Bool bResIsBuild;
        vector<ServerEngine::ManorWuHunAndItemUnit> wuHunAndItemList;
        taf::Bool bIsProduct;
        taf::Int32 iHaveRefreshTimes;
        vector<ServerEngine::ManorWuHunAndItemUnit> befroreProductCache;
    };
    inline bool operator==(const ManorWuHunAndItemData&l, const ManorWuHunAndItemData&r)
    {
        return l.level == r.level && l.beginProductSecond == r.beginProductSecond && l.beginLevelUpSecond == r.beginLevelUpSecond && l.bResIsBuild == r.bResIsBuild && l.wuHunAndItemList == r.wuHunAndItemList && l.bIsProduct == r.bIsProduct && l.iHaveRefreshTimes == r.iHaveRefreshTimes && l.befroreProductCache == r.befroreProductCache;
    }
    inline bool operator!=(const ManorWuHunAndItemData&l, const ManorWuHunAndItemData&r)
    {
        return !(l == r);
    }

    struct ManorProtectData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ManorProtectData";
        }
        static string MD5()
        {
            return "93276160f9783ade29b3ce885337f25d";
        }
        ManorProtectData()
        :iBeginProtectSecond(0),iHaveBuyProtectSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iBeginProtectSecond, 1);
            _os.write(iHaveBuyProtectSecond, 2);
            _os.write(haveBuyProtectList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iBeginProtectSecond, 1, true);
            _is.read(iHaveBuyProtectSecond, 2, true);
            _is.read(haveBuyProtectList, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iBeginProtectSecond,"iBeginProtectSecond");
            _ds.display(iHaveBuyProtectSecond,"iHaveBuyProtectSecond");
            _ds.display(haveBuyProtectList,"haveBuyProtectList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iBeginProtectSecond, true);
            _ds.displaySimple(iHaveBuyProtectSecond, true);
            _ds.displaySimple(haveBuyProtectList, false);
            return _os;
        }
    public:
        taf::Int32 iBeginProtectSecond;
        taf::Int32 iHaveBuyProtectSecond;
        vector<ServerEngine::TimeResetValue> haveBuyProtectList;
    };
    inline bool operator==(const ManorProtectData&l, const ManorProtectData&r)
    {
        return l.iBeginProtectSecond == r.iBeginProtectSecond && l.iHaveBuyProtectSecond == r.iHaveBuyProtectSecond && l.haveBuyProtectList == r.haveBuyProtectList;
    }
    inline bool operator!=(const ManorProtectData&l, const ManorProtectData&r)
    {
        return !(l == r);
    }

    struct ManorSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ManorSystemData";
        }
        static string MD5()
        {
            return "d48dea5e67899d46fa0554d2a08ad8c1";
        }
        ManorSystemData()
        :iResHarvestTimes(0),iProductSivlerBeforLevelUp(0),iProductHeroExpBeforLevelUp(0),iLostBeLootSecond(0),bIsBeLoot(0),dwHarvestSecond(0),iVigorLastSecond(0),bIsBattle(true),iBeLootSilver(0),iBeLootHeroExp(0),bHaveNewLog(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(silverResVec, 0);
            _os.write(heroExpResVec, 1);
            _os.write(iResHarvestTimes, 2);
            _os.write(iProductSivlerBeforLevelUp, 3);
            _os.write(iProductHeroExpBeforLevelUp, 4);
            _os.write(wuHunDianData, 5);
            _os.write(tieJiangPuData, 6);
            _os.write(manorLogVec, 7);
            _os.write(iLostBeLootSecond, 8);
            _os.write(bIsBeLoot, 9);
            _os.write(dwHarvestSecond, 10);
            _os.write(iVigorLastSecond, 11);
            _os.write(bIsBattle, 12);
            _os.write(iBeLootSilver, 13);
            _os.write(iBeLootHeroExp, 14);
            _os.write(bHaveNewLog, 15);
            _os.write(protectData, 16);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(silverResVec, 0, true);
            _is.read(heroExpResVec, 1, true);
            _is.read(iResHarvestTimes, 2, true);
            _is.read(iProductSivlerBeforLevelUp, 3, true);
            _is.read(iProductHeroExpBeforLevelUp, 4, true);
            _is.read(wuHunDianData, 5, true);
            _is.read(tieJiangPuData, 6, true);
            _is.read(manorLogVec, 7, true);
            _is.read(iLostBeLootSecond, 8, true);
            _is.read(bIsBeLoot, 9, true);
            _is.read(dwHarvestSecond, 10, false);
            _is.read(iVigorLastSecond, 11, true);
            _is.read(bIsBattle, 12, false);
            _is.read(iBeLootSilver, 13, false);
            _is.read(iBeLootHeroExp, 14, false);
            _is.read(bHaveNewLog, 15, false);
            _is.read(protectData, 16, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(silverResVec,"silverResVec");
            _ds.display(heroExpResVec,"heroExpResVec");
            _ds.display(iResHarvestTimes,"iResHarvestTimes");
            _ds.display(iProductSivlerBeforLevelUp,"iProductSivlerBeforLevelUp");
            _ds.display(iProductHeroExpBeforLevelUp,"iProductHeroExpBeforLevelUp");
            _ds.display(wuHunDianData,"wuHunDianData");
            _ds.display(tieJiangPuData,"tieJiangPuData");
            _ds.display(manorLogVec,"manorLogVec");
            _ds.display(iLostBeLootSecond,"iLostBeLootSecond");
            _ds.display(bIsBeLoot,"bIsBeLoot");
            _ds.display(dwHarvestSecond,"dwHarvestSecond");
            _ds.display(iVigorLastSecond,"iVigorLastSecond");
            _ds.display(bIsBattle,"bIsBattle");
            _ds.display(iBeLootSilver,"iBeLootSilver");
            _ds.display(iBeLootHeroExp,"iBeLootHeroExp");
            _ds.display(bHaveNewLog,"bHaveNewLog");
            _ds.display(protectData,"protectData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(silverResVec, true);
            _ds.displaySimple(heroExpResVec, true);
            _ds.displaySimple(iResHarvestTimes, true);
            _ds.displaySimple(iProductSivlerBeforLevelUp, true);
            _ds.displaySimple(iProductHeroExpBeforLevelUp, true);
            _ds.displaySimple(wuHunDianData, true);
            _ds.displaySimple(tieJiangPuData, true);
            _ds.displaySimple(manorLogVec, true);
            _ds.displaySimple(iLostBeLootSecond, true);
            _ds.displaySimple(bIsBeLoot, true);
            _ds.displaySimple(dwHarvestSecond, true);
            _ds.displaySimple(iVigorLastSecond, true);
            _ds.displaySimple(bIsBattle, true);
            _ds.displaySimple(iBeLootSilver, true);
            _ds.displaySimple(iBeLootHeroExp, true);
            _ds.displaySimple(bHaveNewLog, true);
            _ds.displaySimple(protectData, false);
            return _os;
        }
    public:
        vector<ServerEngine::ManorResData> silverResVec;
        vector<ServerEngine::ManorResData> heroExpResVec;
        taf::Int32 iResHarvestTimes;
        taf::Int32 iProductSivlerBeforLevelUp;
        taf::Int32 iProductHeroExpBeforLevelUp;
        ServerEngine::ManorWuHunAndItemData wuHunDianData;
        ServerEngine::ManorWuHunAndItemData tieJiangPuData;
        vector<std::string> manorLogVec;
        taf::Int32 iLostBeLootSecond;
        taf::Int32 bIsBeLoot;
        taf::UInt32 dwHarvestSecond;
        taf::Int32 iVigorLastSecond;
        taf::Bool bIsBattle;
        taf::Int32 iBeLootSilver;
        taf::Int32 iBeLootHeroExp;
        taf::Bool bHaveNewLog;
        ServerEngine::ManorProtectData protectData;
    };
    inline bool operator==(const ManorSystemData&l, const ManorSystemData&r)
    {
        return l.silverResVec == r.silverResVec && l.heroExpResVec == r.heroExpResVec && l.iResHarvestTimes == r.iResHarvestTimes && l.iProductSivlerBeforLevelUp == r.iProductSivlerBeforLevelUp && l.iProductHeroExpBeforLevelUp == r.iProductHeroExpBeforLevelUp && l.wuHunDianData == r.wuHunDianData && l.tieJiangPuData == r.tieJiangPuData && l.manorLogVec == r.manorLogVec && l.iLostBeLootSecond == r.iLostBeLootSecond && l.bIsBeLoot == r.bIsBeLoot && l.dwHarvestSecond == r.dwHarvestSecond && l.iVigorLastSecond == r.iVigorLastSecond && l.bIsBattle == r.bIsBattle && l.iBeLootSilver == r.iBeLootSilver && l.iBeLootHeroExp == r.iBeLootHeroExp && l.bHaveNewLog == r.bHaveNewLog && l.protectData == r.protectData;
    }
    inline bool operator!=(const ManorSystemData&l, const ManorSystemData&r)
    {
        return !(l == r);
    }

    struct CheckInData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.CheckInData";
        }
        static string MD5()
        {
            return "1f323b88764fd96bb235bec225fdc4fe";
        }
        CheckInData()
        :dwLastSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(checkInList, 0);
            _os.write(dwLastSecond, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(checkInList, 0, true);
            _is.read(dwLastSecond, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(checkInList,"checkInList");
            _ds.display(dwLastSecond,"dwLastSecond");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(checkInList, true);
            _ds.displaySimple(dwLastSecond, false);
            return _os;
        }
    public:
        vector<ServerEngine::TimeResetValue> checkInList;
        taf::UInt32 dwLastSecond;
    };
    inline bool operator==(const CheckInData&l, const CheckInData&r)
    {
        return l.checkInList == r.checkInList && l.dwLastSecond == r.dwLastSecond;
    }
    inline bool operator!=(const CheckInData&l, const CheckInData&r)
    {
        return !(l == r);
    }

    struct GrowUpData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.GrowUpData";
        }
        static string MD5()
        {
            return "abb3f910c6ed6b0d9108469c35f67f52";
        }
        GrowUpData()
        :bHavebuyGrowUp(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bHavebuyGrowUp, 0);
            _os.write(haveGetReward, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(bHavebuyGrowUp, 0, true);
            _is.read(haveGetReward, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bHavebuyGrowUp,"bHavebuyGrowUp");
            _ds.display(haveGetReward,"haveGetReward");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bHavebuyGrowUp, true);
            _ds.displaySimple(haveGetReward, false);
            return _os;
        }
    public:
        taf::Bool bHavebuyGrowUp;
        map<taf::Int32, taf::Int32> haveGetReward;
    };
    inline bool operator==(const GrowUpData&l, const GrowUpData&r)
    {
        return l.bHavebuyGrowUp == r.bHavebuyGrowUp && l.haveGetReward == r.haveGetReward;
    }
    inline bool operator!=(const GrowUpData&l, const GrowUpData&r)
    {
        return !(l == r);
    }

    struct AccPayMentData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.AccPayMentData";
        }
        static string MD5()
        {
            return "0e0fd6a0aa16c7b8f7dacb635d4be203";
        }
        AccPayMentData()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(paymentGetRewardMap, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(paymentGetRewardMap, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(paymentGetRewardMap,"paymentGetRewardMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(paymentGetRewardMap, false);
            return _os;
        }
    public:
        map<taf::Int32, taf::Int32> paymentGetRewardMap;
    };
    inline bool operator==(const AccPayMentData&l, const AccPayMentData&r)
    {
        return l.paymentGetRewardMap == r.paymentGetRewardMap;
    }
    inline bool operator!=(const AccPayMentData&l, const AccPayMentData&r)
    {
        return !(l == r);
    }

    struct ActorLoginData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.ActorLoginData";
        }
        static string MD5()
        {
            return "7c9963cfb9b126788201dc64c62866db";
        }
        ActorLoginData()
        :iLoginDays(0),dwLoginSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iLoginDays, 0);
            _os.write(haveRewardDays, 1);
            _os.write(dwLoginSecond, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(iLoginDays, 0, true);
            _is.read(haveRewardDays, 1, true);
            _is.read(dwLoginSecond, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iLoginDays,"iLoginDays");
            _ds.display(haveRewardDays,"haveRewardDays");
            _ds.display(dwLoginSecond,"dwLoginSecond");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iLoginDays, true);
            _ds.displaySimple(haveRewardDays, true);
            _ds.displaySimple(dwLoginSecond, false);
            return _os;
        }
    public:
        taf::Int32 iLoginDays;
        map<taf::Int32, taf::Int32> haveRewardDays;
        taf::UInt32 dwLoginSecond;
    };
    inline bool operator==(const ActorLoginData&l, const ActorLoginData&r)
    {
        return l.iLoginDays == r.iLoginDays && l.haveRewardDays == r.haveRewardDays && l.dwLoginSecond == r.dwLoginSecond;
    }
    inline bool operator!=(const ActorLoginData&l, const ActorLoginData&r)
    {
        return !(l == r);
    }

    struct DayPaymentData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.DayPaymentData";
        }
        static string MD5()
        {
            return "185187527a19e541197d64bc56405e99";
        }
        DayPaymentData()
        :operateId(0),paied(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operateId, 0);
            _os.write(paied, 1);
            _os.write(fetched, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(operateId, 0, false);
            _is.read(paied, 1, false);
            _is.read(fetched, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operateId,"operateId");
            _ds.display(paied,"paied");
            _ds.display(fetched,"fetched");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operateId, true);
            _ds.displaySimple(paied, true);
            _ds.displaySimple(fetched, false);
            return _os;
        }
    public:
        taf::Int32 operateId;
        taf::Int32 paied;
        map<taf::Int32, taf::Bool> fetched;
    };
    inline bool operator==(const DayPaymentData&l, const DayPaymentData&r)
    {
        return l.operateId == r.operateId && l.paied == r.paied && l.fetched == r.fetched;
    }
    inline bool operator!=(const DayPaymentData&l, const DayPaymentData&r)
    {
        return !(l == r);
    }

    struct OperateSystemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.OperateSystemData";
        }
        static string MD5()
        {
            return "c4df8d54acc270577c49218734e3d8e5";
        }
        OperateSystemData()
        :bHaveGetTelphoneSteam(true)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(checkInData, 0);
            _os.write(growUpdata, 1);
            _os.write(accPayMentData, 2);
            _os.write(bHaveGetTelphoneSteam, 3);
            _os.write(actorLoginData, 4);
            _os.write(dayPaymentData, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(checkInData, 0, true);
            _is.read(growUpdata, 1, false);
            _is.read(accPayMentData, 2, false);
            _is.read(bHaveGetTelphoneSteam, 3, false);
            _is.read(actorLoginData, 4, false);
            _is.read(dayPaymentData, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(checkInData,"checkInData");
            _ds.display(growUpdata,"growUpdata");
            _ds.display(accPayMentData,"accPayMentData");
            _ds.display(bHaveGetTelphoneSteam,"bHaveGetTelphoneSteam");
            _ds.display(actorLoginData,"actorLoginData");
            _ds.display(dayPaymentData,"dayPaymentData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(checkInData, true);
            _ds.displaySimple(growUpdata, true);
            _ds.displaySimple(accPayMentData, true);
            _ds.displaySimple(bHaveGetTelphoneSteam, true);
            _ds.displaySimple(actorLoginData, true);
            _ds.displaySimple(dayPaymentData, false);
            return _os;
        }
    public:
        ServerEngine::CheckInData checkInData;
        ServerEngine::GrowUpData growUpdata;
        ServerEngine::AccPayMentData accPayMentData;
        taf::Bool bHaveGetTelphoneSteam;
        ServerEngine::ActorLoginData actorLoginData;
        ServerEngine::DayPaymentData dayPaymentData;
    };
    inline bool operator==(const OperateSystemData&l, const OperateSystemData&r)
    {
        return l.checkInData == r.checkInData && l.growUpdata == r.growUpdata && l.accPayMentData == r.accPayMentData && l.bHaveGetTelphoneSteam == r.bHaveGetTelphoneSteam && l.actorLoginData == r.actorLoginData && l.dayPaymentData == r.dayPaymentData;
    }
    inline bool operator!=(const OperateSystemData&l, const OperateSystemData&r)
    {
        return !(l == r);
    }

    struct OpenServerSecond : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.OpenServerSecond";
        }
        static string MD5()
        {
            return "256dddf7d3f47a709b126d25e34aac44";
        }
        OpenServerSecond()
        :dwOpenServerSecond(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwOpenServerSecond, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(dwOpenServerSecond, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwOpenServerSecond,"dwOpenServerSecond");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwOpenServerSecond, false);
            return _os;
        }
    public:
        taf::UInt32 dwOpenServerSecond;
    };
    inline bool operator==(const OpenServerSecond&l, const OpenServerSecond&r)
    {
        return l.dwOpenServerSecond == r.dwOpenServerSecond;
    }
    inline bool operator!=(const OpenServerSecond&l, const OpenServerSecond&r)
    {
        return !(l == r);
    }


}

#define ServerEngine_RoleBase_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.roleIntPropset,b.roleIntPropset);jce_copy_struct(a.roleStringPropset,b.roleStringPropset);jce_copy_struct(a.roleFloatPropset,b.roleFloatPropset);

#define ServerEngine_RoleSaveData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.basePropData,b.basePropData);jce_copy_struct(a.subsystemData,b.subsystemData);

#define ServerEngine_ActorCreateContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strAccount,b.strAccount);jce_copy_struct(a.strRsAddress,b.strRsAddress);jce_copy_struct(a.ddCon,b.ddCon);jce_copy_struct(a.data,b.data);

#define ServerEngine_MNCreateContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nBaseId,b.nBaseId);jce_copy_struct(a.dwEntityID,b.dwEntityID);jce_copy_struct(a.iFixLevel,b.iFixLevel);

#define ServerEngine_NpcCreateContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nBaseId,b.nBaseId);

#define ServerEngine_TimeResetValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwLastChgTime,b.dwLastChgTime);jce_copy_struct(a.iValue,b.iValue);

#define ServerEngine_HeroSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.heroList,b.heroList);jce_copy_struct(a.heroConvertData,b.heroConvertData);

#define ServerEngine_TallentData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTallentID,b.iTallentID);jce_copy_struct(a.iLevel,b.iLevel);

#define ServerEngine_HeroTallentSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tallentList,b.tallentList);jce_copy_struct(a.favoriteIDList,b.favoriteIDList);

#define ServerEngine_FormationItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strUUID,b.strUUID);

#define ServerEngine_FormationSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.formationList,b.formationList);jce_copy_struct(a.iVisibleHeroId,b.iVisibleHeroId);

#define ServerEngine_XilianPropItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.propId,b.propId);jce_copy_struct(a.value,b.value);

#define ServerEngine_EquipData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.iEnhanceMoney,b.iEnhanceMoney);jce_copy_struct(a.iRandomPropID,b.iRandomPropID);jce_copy_struct(a.iRandomValue,b.iRandomValue);jce_copy_struct(a.xilianPropList,b.xilianPropList);

#define ServerEngine_ItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iItemID,b.iItemID);jce_copy_struct(a.iStackCount,b.iStackCount);jce_copy_struct(a.strEquipData,b.strEquipData);

#define ServerEngine_ItemSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.buyPhyStengthCount,b.buyPhyStengthCount);jce_copy_struct(a.iChatResetVal,b.iChatResetVal);jce_copy_struct(a.convertMap,b.convertMap);

#define ServerEngine_EquipBagSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.equipList,b.equipList);

#define ServerEngine_HeroRealEquipSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.equipList,b.equipList);

#define ServerEngine_FightUseItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iActionIndex,b.iActionIndex);jce_copy_struct(a.iResultsetIndex,b.iResultsetIndex);jce_copy_struct(a.iPost,b.iPost);jce_copy_struct(a.iActorSkillID,b.iActorSkillID);

#define ServerEngine_BattleData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bAttackerWin,b.bAttackerWin);jce_copy_struct(a.FightKey,b.FightKey);jce_copy_struct(a.strBattleBody,b.strBattleBody);jce_copy_struct(a.iStar,b.iStar);jce_copy_struct(a.randValueList,b.randValueList);jce_copy_struct(a.useItemList,b.useItemList);jce_copy_struct(a.bQuit,b.bQuit);jce_copy_struct(a.bQuitSuccess,b.bQuitSuccess);

#define ServerEngine_FightContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iFightType,b.iFightType);jce_copy_struct(a.iSceneID,b.iSceneID);jce_copy_struct(a.context,b.context);jce_copy_struct(a.randValueList,b.randValueList);jce_copy_struct(a.useItemActionList,b.useItemActionList);jce_copy_struct(a.dlgList,b.dlgList);jce_copy_struct(a.bBeginDlg,b.bBeginDlg);

#define ServerEngine_SceneRecord_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iSceneID,b.iSceneID);jce_copy_struct(a.iStarLevel,b.iStarLevel);jce_copy_struct(a.passTimes,b.passTimes);

#define ServerEngine_DungeonSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sectionList,b.sectionList);jce_copy_struct(a.m_mapSceneRecord,b.m_mapSceneRecord);jce_copy_struct(a.noUse,b.noUse);jce_copy_struct(a.perfectPassSectionMap,b.perfectPassSectionMap);jce_copy_struct(a.newSceneList,b.newSceneList);

#define ServerEngine_FightSoulItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iBaseID,b.iBaseID);jce_copy_struct(a.iExp,b.iExp);jce_copy_struct(a.bLocked,b.bLocked);

#define ServerEngine_FightSoulPractice_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iBaseGrade,b.iBaseGrade);jce_copy_struct(a.bMode,b.bMode);jce_copy_struct(a.iAdvanceGrade,b.iAdvanceGrade);

#define ServerEngine_FightSoulSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fightSoulMap,b.fightSoulMap);jce_copy_struct(a.practiceStatus,b.practiceStatus);jce_copy_struct(a.callAdvanceCount,b.callAdvanceCount);jce_copy_struct(a.bUsedPracticeFightSoul,b.bUsedPracticeFightSoul);

#define ServerEngine_HeroEquipSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.equipList,b.equipList);

#define ServerEngine_GodAnimalSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.godAnimalList,b.godAnimalList);jce_copy_struct(a.strActiveUUID,b.strActiveUUID);

#define ServerEngine_LegionBase_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strLegionName,b.strLegionName);jce_copy_struct(a.iLegionLevel,b.iLegionLevel);jce_copy_struct(a.iLegionExp,b.iLegionExp);jce_copy_struct(a.strLeaderName,b.strLeaderName);jce_copy_struct(a.strAnnouce,b.strAnnouce);jce_copy_struct(a.dwCreateTime,b.dwCreateTime);jce_copy_struct(a.strBroadcast,b.strBroadcast);jce_copy_struct(a.dwLevelUpTime,b.dwLevelUpTime);jce_copy_struct(a.dwLastLoginTime,b.dwLastLoginTime);jce_copy_struct(a.iLegionIconId,b.iLegionIconId);jce_copy_struct(a.iLegionTotalContribute,b.iLegionTotalContribute);jce_copy_struct(a.iLegionMoney,b.iLegionMoney);jce_copy_struct(a.noUseData1,b.noUseData1);jce_copy_struct(a.noUseData2,b.noUseData2);

#define ServerEngine_LegionMemberItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.roleKey,b.roleKey);jce_copy_struct(a.iSumContribute,b.iSumContribute);jce_copy_struct(a.noUseiCurContribute,b.noUseiCurContribute);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.dayContribute,b.dayContribute);jce_copy_struct(a.noUseDatae1,b.noUseDatae1);jce_copy_struct(a.noUseData2,b.noUseData2);jce_copy_struct(a.noUseData3,b.noUseData3);jce_copy_struct(a.contributeVec,b.contributeVec);jce_copy_struct(a.dwLogionOutTime,b.dwLogionOutTime);jce_copy_struct(a.bIsOutLine,b.bIsOutLine);jce_copy_struct(a.iOccupation,b.iOccupation);jce_copy_struct(a.nouseuseWorshipTimes,b.nouseuseWorshipTimes);jce_copy_struct(a.beWorshipGetContribute,b.beWorshipGetContribute);jce_copy_struct(a.iFightValue,b.iFightValue);jce_copy_struct(a.iHeadIcon,b.iHeadIcon);

#define ServerEngine_LegionMemberInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.memberList,b.memberList);jce_copy_struct(a.saveContributeVecValue,b.saveContributeVecValue);

#define ServerEngine_LegionAppItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.roleKey,b.roleKey);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.iActorHeadIcon,b.iActorHeadIcon);

#define ServerEngine_LegionAppInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.applyList,b.applyList);

#define ServerEngine_LegionBoss_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwLastBossTime,b.dwLastBossTime);jce_copy_struct(a.iBossLevel,b.iBossLevel);

#define ServerEngine_LegionFightReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTargetTerritoryID,b.iTargetTerritoryID);jce_copy_struct(a.iDeclareTime,b.iDeclareTime);jce_copy_struct(a.joinMemList,b.joinMemList);

#define ServerEngine_LegionData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.baseInfo,b.baseInfo);jce_copy_struct(a.memberInfo,b.memberInfo);jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.bossInfo,b.bossInfo);

#define ServerEngine_CustomGiftData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.propAward,b.propAward);jce_copy_struct(a.itemAward,b.itemAward);jce_copy_struct(a.iAwardedContibute,b.iAwardedContibute);

#define ServerEngine_GiftData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iGiftID,b.iGiftID);jce_copy_struct(a.dwGetTime,b.dwGetTime);jce_copy_struct(a.bCustomGift,b.bCustomGift);jce_copy_struct(a.customGiftData,b.customGiftData);

#define ServerEngine_LegionShopItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iIndex,b.iIndex);jce_copy_struct(a.iShopID,b.iShopID);jce_copy_struct(a.bBuy,b.bBuy);

#define ServerEngine_LegionSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.noUse,b.noUse);jce_copy_struct(a.noUse2,b.noUse2);jce_copy_struct(a.giftList,b.giftList);jce_copy_struct(a.shopItemList,b.shopItemList);jce_copy_struct(a.blessData,b.blessData);jce_copy_struct(a.dayAwardFlag,b.dayAwardFlag);jce_copy_struct(a.weekAwardFlag,b.weekAwardFlag);jce_copy_struct(a.dwLastRefreshSecond,b.dwLastRefreshSecond);jce_copy_struct(a.contributeShopRefreshTimes,b.contributeShopRefreshTimes);jce_copy_struct(a.actorHaveAddLegionList,b.actorHaveAddLegionList);jce_copy_struct(a.actorWeekAddLegionTimes,b.actorWeekAddLegionTimes);jce_copy_struct(a.useWorshipTimes,b.useWorshipTimes);jce_copy_struct(a.nousebeWorshipGetContribute,b.nousebeWorshipGetContribute);jce_copy_struct(a.actorHaveWorship,b.actorHaveWorship);jce_copy_struct(a.contributeTimes,b.contributeTimes);

#define ServerEngine_CityBattleItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.roleKey,b.roleKey);jce_copy_struct(a.starList,b.starList);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.iHeadIcon,b.iHeadIcon);jce_copy_struct(a.iFightValue,b.iFightValue);

#define ServerEngine_LegionReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strLegionName,b.strLegionName);jce_copy_struct(a.reportMemberList,b.reportMemberList);

#define ServerEngine_LegionHonorItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strLegionName,b.strLegionName);jce_copy_struct(a.strMemberName,b.strMemberName);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.iKillNum,b.iKillNum);jce_copy_struct(a.iContribute,b.iContribute);jce_copy_struct(a.iHonor,b.iHonor);

#define ServerEngine_CityBattleLegionData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strLegionName,b.strLegionName);jce_copy_struct(a.dwGetStarTime,b.dwGetStarTime);jce_copy_struct(a.iGetStarCount,b.iGetStarCount);jce_copy_struct(a.memberList,b.memberList);jce_copy_struct(a.iHoldCityCount,b.iHoldCityCount);

#define ServerEngine_LegionBattle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attLegion,b.attLegion);jce_copy_struct(a.guardLegion,b.guardLegion);

#define ServerEngine_LegionCity_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCityID,b.iCityID);jce_copy_struct(a.strOwnerLegion,b.strOwnerLegion);jce_copy_struct(a.reportList,b.reportList);jce_copy_struct(a.iChineseDayNO,b.iChineseDayNO);jce_copy_struct(a.strWinLegion,b.strWinLegion);jce_copy_struct(a.bNpcHold,b.bNpcHold);jce_copy_struct(a.owerLogion,b.owerLogion);jce_copy_struct(a.legionBattleList,b.legionBattleList);jce_copy_struct(a.m_legion2BattleId,b.m_legion2BattleId);

#define ServerEngine_LegionFightRecord_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.guardFightLog,b.guardFightLog);jce_copy_struct(a.attFightLog,b.attFightLog);jce_copy_struct(a.strVsLegion,b.strVsLegion);

#define ServerEngine_LegionFightDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strGuardName,b.strGuardName);jce_copy_struct(a.battleBaseLog,b.battleBaseLog);jce_copy_struct(a.m_fightDetail,b.m_fightDetail);

#define ServerEngine_CityCampFightLog_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lastFightLogMap,b.lastFightLogMap);jce_copy_struct(a.lastFightLogDetail,b.lastFightLogDetail);

#define ServerEngine_GlobalLegionCityData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.curLegionCityData,b.curLegionCityData);jce_copy_struct(a.lastLegionCityData,b.lastLegionCityData);jce_copy_struct(a.iLastDayNO,b.iLastDayNO);jce_copy_struct(a.iRoportCampMap,b.iRoportCampMap);jce_copy_struct(a.cityCampFightLog,b.cityCampFightLog);jce_copy_struct(a.curCityFightLog,b.curCityFightLog);

#define ServerEngine_CreateBossCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iFixMaxHP,b.iFixMaxHP);jce_copy_struct(a.iFixLevel,b.iFixLevel);jce_copy_struct(a.iHP,b.iHP);jce_copy_struct(a.iDef,b.iDef);

#define ServerEngine_ClimbTowerSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iHightestLayer,b.iHightestLayer);jce_copy_struct(a.iCurrentLayer,b.iCurrentLayer);jce_copy_struct(a.iTotalCultivation,b.iTotalCultivation);jce_copy_struct(a.iClimbResetCount,b.iClimbResetCount);jce_copy_struct(a.dayRestFlag,b.dayRestFlag);jce_copy_struct(a.iCurHaveBuyTimes,b.iCurHaveBuyTimes);jce_copy_struct(a.iTotalBuyTimes,b.iTotalBuyTimes);

#define ServerEngine_AttackBossCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iAttAddPercent,b.iAttAddPercent);

#define ServerEngine_HonorGoodDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iGoodId,b.iGoodId);jce_copy_struct(a.bIsSale,b.bIsSale);

#define ServerEngine_ShopSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.szGoodmap,b.szGoodmap);jce_copy_struct(a.iGoldRandOnceCount,b.iGoldRandOnceCount);jce_copy_struct(a.iTokenRandOnceCount,b.iTokenRandOnceCount);jce_copy_struct(a.dwRefreshSecond,b.dwRefreshSecond);jce_copy_struct(a.iRefreshTimes,b.iRefreshTimes);jce_copy_struct(a.bHaveFirstRand,b.bHaveFirstRand);jce_copy_struct(a.shakeTimes,b.shakeTimes);jce_copy_struct(a.tokenFreeValue,b.tokenFreeValue);jce_copy_struct(a.dwLastTokenFreeSecond,b.dwLastTokenFreeSecond);jce_copy_struct(a.dwLastGoldFreeSecond,b.dwLastGoldFreeSecond);jce_copy_struct(a.bHaveFirstRandTen,b.bHaveFirstRandTen);jce_copy_struct(a.paymentMap,b.paymentMap);jce_copy_struct(a.actorPayOrderMap,b.actorPayOrderMap);jce_copy_struct(a.lastNormalShopRefreshSecond,b.lastNormalShopRefreshSecond);jce_copy_struct(a.normalShopGoods,b.normalShopGoods);jce_copy_struct(a.normalShopRefreshTimes,b.normalShopRefreshTimes);

#define ServerEngine_LegionFightSideCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iAddPercent,b.iAddPercent);

#define ServerEngine_LegionCityFightCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attCtx,b.attCtx);jce_copy_struct(a.targetCtx,b.targetCtx);

#define ServerEngine_FemailHeroDesc_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iHeroID,b.iHeroID);jce_copy_struct(a.iFightValue,b.iFightValue);

#define ServerEngine_ArenaSavePlayer_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bMonster,b.bMonster);jce_copy_struct(a.iMonsterGrpID,b.iMonsterGrpID);jce_copy_struct(a.iShowHeroID,b.iShowHeroID);jce_copy_struct(a.roleKey,b.roleKey);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.iFightValue,b.iFightValue);jce_copy_struct(a.femaleHeroList,b.femaleHeroList);jce_copy_struct(a.iLastBeLootSecond,b.iLastBeLootSecond);

#define ServerEngine_ArenaSaveAwardItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.iRank,b.iRank);jce_copy_struct(a.strUUID,b.strUUID);

#define ServerEngine_GlobalArenaData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankList,b.rankList);jce_copy_struct(a.awardMap,b.awardMap);jce_copy_struct(a.dwLastAwardTime,b.dwLastAwardTime);

#define ServerEngine_ArenaAppendData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iNowChallengeCount,b.iNowChallengeCount);jce_copy_struct(a.iBuyChallengeCount,b.iBuyChallengeCount);jce_copy_struct(a.iLastChgTime,b.iLastChgTime);jce_copy_struct(a.iBeginCDSecond,b.iBeginCDSecond);

#define ServerEngine_ArenaSystemSaveData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.m_addChallengeCount,b.m_addChallengeCount);jce_copy_struct(a.m_challengeCount,b.m_challengeCount);jce_copy_struct(a.m_arenaLogList,b.m_arenaLogList);jce_copy_struct(a.bHaveNewLog,b.bHaveNewLog);jce_copy_struct(a.appendData,b.appendData);

#define ServerEngine_GlobalWorldBossData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.m_worldBossLevelMap,b.m_worldBossLevelMap);jce_copy_struct(a.m_bossLastFightDayMap,b.m_bossLastFightDayMap);

#define ServerEngine_CampBattleSideCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bFixHP,b.bFixHP);jce_copy_struct(a.fixHPMap,b.fixHPMap);jce_copy_struct(a.werckAddPercent,b.werckAddPercent);jce_copy_struct(a.attAddPercent,b.attAddPercent);

#define ServerEngine_CampBattleFightCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attCtx,b.attCtx);jce_copy_struct(a.targetCtx,b.targetCtx);

#define ServerEngine_FriendNode_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strFriendName,b.strFriendName);jce_copy_struct(a.roleKey,b.roleKey);jce_copy_struct(a.iGetType,b.iGetType);jce_copy_struct(a.bHaveGive,b.bHaveGive);jce_copy_struct(a.dwLastChgTime,b.dwLastChgTime);

#define ServerEngine_FriendSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iGivePhyStrengthTimes,b.iGivePhyStrengthTimes);jce_copy_struct(a.iGetPhyStrengthTimes,b.iGetPhyStrengthTimes);jce_copy_struct(a.m_FriendMap,b.m_FriendMap);jce_copy_struct(a.m_RequestMap,b.m_RequestMap);jce_copy_struct(a.dwLastChgTime,b.dwLastChgTime);jce_copy_struct(a.m_haveGetActorMap,b.m_haveGetActorMap);jce_copy_struct(a.m_haveGiveActorMap,b.m_haveGiveActorMap);

#define ServerEngine_TaskDBUnit_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTaskId,b.iTaskId);jce_copy_struct(a.iTaskProcess,b.iTaskProcess);jce_copy_struct(a.chgTime,b.chgTime);jce_copy_struct(a.enTaskState,b.enTaskState);jce_copy_struct(a.iHaveFinishedTimes,b.iHaveFinishedTimes);jce_copy_struct(a.iTaskType,b.iTaskType);

#define ServerEngine_MonthCardData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCanGetTimes,b.iCanGetTimes);jce_copy_struct(a.lastChgTime,b.lastChgTime);

#define ServerEngine_TaskSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dbTaskFinishMap,b.dbTaskFinishMap);jce_copy_struct(a.vigorValue,b.vigorValue);jce_copy_struct(a.monthCardData,b.monthCardData);

#define ServerEngine_GuideSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.finishedList,b.finishedList);jce_copy_struct(a.openedList,b.openedList);

#define ServerEngine_DreamLandGuardFormation_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iPos,b.iPos);jce_copy_struct(a.iBaseId,b.iBaseId);jce_copy_struct(a.iStepLevel,b.iStepLevel);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.ihp,b.ihp);jce_copy_struct(a.iMaxHp,b.iMaxHp);jce_copy_struct(a.iIsGodAniaml,b.iIsGodAniaml);jce_copy_struct(a.bNotMonster,b.bNotMonster);jce_copy_struct(a.iQuality,b.iQuality);

#define ServerEngine_DreamLandGuardData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorName,b.actorName);jce_copy_struct(a.formation,b.formation);jce_copy_struct(a.iTotalFightValue,b.iTotalFightValue);jce_copy_struct(a.iActorHead,b.iActorHead);jce_copy_struct(a.iActorLevel,b.iActorLevel);

#define ServerEngine_DreamLandSceneRecord_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iSceneId,b.iSceneId);jce_copy_struct(a.sceneState,b.sceneState);jce_copy_struct(a.iHaveGetBox,b.iHaveGetBox);jce_copy_struct(a.iHaveGuard,b.iHaveGuard);jce_copy_struct(a.bFirstFight,b.bFirstFight);jce_copy_struct(a.targethpMap,b.targethpMap);jce_copy_struct(a.iMonsterHp,b.iMonsterHp);jce_copy_struct(a.iMonsterAttValue,b.iMonsterAttValue);jce_copy_struct(a.Guarddata,b.Guarddata);

#define ServerEngine_DreamLandSceneActor_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.roleKey,b.roleKey);jce_copy_struct(a.actorContext,b.actorContext);

#define ServerEngine_DreamLandData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sectionList,b.sectionList);jce_copy_struct(a.sectionProcessVec,b.sectionProcessVec);jce_copy_struct(a.FormationMap,b.FormationMap);jce_copy_struct(a.dwTimeChg,b.dwTimeChg);jce_copy_struct(a.ihaveUseTimes,b.ihaveUseTimes);jce_copy_struct(a.unLockSectionId,b.unLockSectionId);jce_copy_struct(a.sceneActor,b.sceneActor);jce_copy_struct(a.iHaveUseResetTime,b.iHaveUseResetTime);jce_copy_struct(a.actorHpMap,b.actorHpMap);jce_copy_struct(a.iItemCount,b.iItemCount);jce_copy_struct(a.guardNamesVec,b.guardNamesVec);jce_copy_struct(a.sectionGuardPlayerMap,b.sectionGuardPlayerMap);jce_copy_struct(a.deadHeroList,b.deadHeroList);

#define ServerEngine_DreamLandSideCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bFixHP,b.bFixHP);jce_copy_struct(a.fixHPMap,b.fixHPMap);

#define ServerEngine_DreamLandFightCtx_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attCtx,b.attCtx);jce_copy_struct(a.targetCtx,b.targetCtx);jce_copy_struct(a.iItemCount,b.iItemCount);jce_copy_struct(a.iMonsterHp,b.iMonsterHp);jce_copy_struct(a.iMonsterAttValue,b.iMonsterAttValue);jce_copy_struct(a.properyMap,b.properyMap);jce_copy_struct(a.strHerolistData,b.strHerolistData);jce_copy_struct(a.strFormationData,b.strFormationData);

#define ServerEngine_MailData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strUUID,b.strUUID);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strSender,b.strSender);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.iState,b.iState);jce_copy_struct(a.strAwardInfo,b.strAwardInfo);jce_copy_struct(a.dwSenderTime,b.dwSenderTime);jce_copy_struct(a.iKeepDay,b.iKeepDay);jce_copy_struct(a.iMailType,b.iMailType);

#define ServerEngine_MailSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mailDataList,b.mailDataList);jce_copy_struct(a.usedBroadcastIDList,b.usedBroadcastIDList);jce_copy_struct(a.dwChgSecond,b.dwChgSecond);

#define ServerEngine_ManorResData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ResId,b.ResId);jce_copy_struct(a.iResLevel,b.iResLevel);jce_copy_struct(a.beginProductSecond,b.beginProductSecond);jce_copy_struct(a.beginLevelUpSecond,b.beginLevelUpSecond);jce_copy_struct(a.bResIsBuild,b.bResIsBuild);

#define ServerEngine_ManorWuHunAndItemUnit_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.bWuXieKeji,b.bWuXieKeji);jce_copy_struct(a.bHaveBeLoot,b.bHaveBeLoot);jce_copy_struct(a.iCount,b.iCount);jce_copy_struct(a.iBeLootCount,b.iBeLootCount);

#define ServerEngine_ManorWuHunAndItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.level,b.level);jce_copy_struct(a.beginProductSecond,b.beginProductSecond);jce_copy_struct(a.beginLevelUpSecond,b.beginLevelUpSecond);jce_copy_struct(a.bResIsBuild,b.bResIsBuild);jce_copy_struct(a.wuHunAndItemList,b.wuHunAndItemList);jce_copy_struct(a.bIsProduct,b.bIsProduct);jce_copy_struct(a.iHaveRefreshTimes,b.iHaveRefreshTimes);jce_copy_struct(a.befroreProductCache,b.befroreProductCache);

#define ServerEngine_ManorProtectData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iBeginProtectSecond,b.iBeginProtectSecond);jce_copy_struct(a.iHaveBuyProtectSecond,b.iHaveBuyProtectSecond);jce_copy_struct(a.haveBuyProtectList,b.haveBuyProtectList);

#define ServerEngine_ManorSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.silverResVec,b.silverResVec);jce_copy_struct(a.heroExpResVec,b.heroExpResVec);jce_copy_struct(a.iResHarvestTimes,b.iResHarvestTimes);jce_copy_struct(a.iProductSivlerBeforLevelUp,b.iProductSivlerBeforLevelUp);jce_copy_struct(a.iProductHeroExpBeforLevelUp,b.iProductHeroExpBeforLevelUp);jce_copy_struct(a.wuHunDianData,b.wuHunDianData);jce_copy_struct(a.tieJiangPuData,b.tieJiangPuData);jce_copy_struct(a.manorLogVec,b.manorLogVec);jce_copy_struct(a.iLostBeLootSecond,b.iLostBeLootSecond);jce_copy_struct(a.bIsBeLoot,b.bIsBeLoot);jce_copy_struct(a.dwHarvestSecond,b.dwHarvestSecond);jce_copy_struct(a.iVigorLastSecond,b.iVigorLastSecond);jce_copy_struct(a.bIsBattle,b.bIsBattle);jce_copy_struct(a.iBeLootSilver,b.iBeLootSilver);jce_copy_struct(a.iBeLootHeroExp,b.iBeLootHeroExp);jce_copy_struct(a.bHaveNewLog,b.bHaveNewLog);jce_copy_struct(a.protectData,b.protectData);

#define ServerEngine_CheckInData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.checkInList,b.checkInList);jce_copy_struct(a.dwLastSecond,b.dwLastSecond);

#define ServerEngine_GrowUpData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bHavebuyGrowUp,b.bHavebuyGrowUp);jce_copy_struct(a.haveGetReward,b.haveGetReward);

#define ServerEngine_AccPayMentData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.paymentGetRewardMap,b.paymentGetRewardMap);

#define ServerEngine_ActorLoginData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iLoginDays,b.iLoginDays);jce_copy_struct(a.haveRewardDays,b.haveRewardDays);jce_copy_struct(a.dwLoginSecond,b.dwLoginSecond);

#define ServerEngine_DayPaymentData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operateId,b.operateId);jce_copy_struct(a.paied,b.paied);jce_copy_struct(a.fetched,b.fetched);

#define ServerEngine_OperateSystemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.checkInData,b.checkInData);jce_copy_struct(a.growUpdata,b.growUpdata);jce_copy_struct(a.accPayMentData,b.accPayMentData);jce_copy_struct(a.bHaveGetTelphoneSteam,b.bHaveGetTelphoneSteam);jce_copy_struct(a.actorLoginData,b.actorLoginData);jce_copy_struct(a.dayPaymentData,b.dayPaymentData);

#define ServerEngine_OpenServerSecond_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwOpenServerSecond,b.dwOpenServerSecond);



#endif

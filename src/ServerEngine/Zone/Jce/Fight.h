// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Fight.jce'
// **********************************************************************

#ifndef __FIGHT_H_
#define __FIGHT_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "RoleData.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum eFightRetCode
    {
        en_FightRet_OK = 0,
        en_FightRet_SysError = 1,
    };
    inline string etos(const eFightRetCode & e)
    {
        switch(e)
        {
            case en_FightRet_OK: return "en_FightRet_OK";
            case en_FightRet_SysError: return "en_FightRet_SysError";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, eFightRetCode & e)
    {
        if(s == "en_FightRet_OK")  { e=en_FightRet_OK; return 0;}
        if(s == "en_FightRet_SysError")  { e=en_FightRet_SysError; return 0;}

        return -1;
    }


    /* callback of async proxy for client */
    class FightPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~FightPrxCallback(){}
        virtual void callback_doPVEFight(taf::Int32 ret,  const ServerEngine::BattleData& battleInfo)
        { throw std::runtime_error("callback_doPVEFight() overloading incorrect."); }
        virtual void callback_doPVEFight_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_doPVEFight_exception() overloading incorrect."); }

        virtual void callback_doPVPFight(taf::Int32 ret,  const ServerEngine::BattleData& battleInfo)
        { throw std::runtime_error("callback_doPVPFight() overloading incorrect."); }
        virtual void callback_doPVPFight_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_doPVPFight_exception() overloading incorrect."); }

        virtual void callback_doMultiPVEFight(taf::Int32 ret,  const ServerEngine::BattleData& battleInfo)
        { throw std::runtime_error("callback_doMultiPVEFight() overloading incorrect."); }
        virtual void callback_doMultiPVEFight_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_doMultiPVEFight_exception() overloading incorrect."); }

        virtual void callback_continuePVEFight(taf::Int32 ret,  const ServerEngine::BattleData& battleInfo)
        { throw std::runtime_error("callback_continuePVEFight() overloading incorrect."); }
        virtual void callback_continuePVEFight_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_continuePVEFight_exception() overloading incorrect."); }

        virtual void callback_continueMultiPVEFight(taf::Int32 ret,  const ServerEngine::BattleData& battleInfo)
        { throw std::runtime_error("callback_continueMultiPVEFight() overloading incorrect."); }
        virtual void callback_continueMultiPVEFight_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_continueMultiPVEFight_exception() overloading incorrect."); }

        virtual void callback_continuePVPFight(taf::Int32 ret,  const ServerEngine::BattleData& battleInfo)
        { throw std::runtime_error("callback_continuePVPFight() overloading incorrect."); }
        virtual void callback_continuePVPFight_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_continuePVPFight_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<FightPrxCallback> FightPrxCallbackPtr;

    /* proxy for client */
    class FightProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 doPVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());
        void async_doPVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext & roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 doPVPFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & attRoleInfo,const ServerEngine::ActorCreateContext & targetRileInfo,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());
        void async_doPVPFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext & attRoleInfo,const ServerEngine::ActorCreateContext & targetRileInfo,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 doMultiPVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,const vector<taf::Int32> & monsterGrpList,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());
        void async_doMultiPVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext & roleInfo,const vector<taf::Int32> & monsterGrpList,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 continuePVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());
        void async_continuePVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext & roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 continueMultiPVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,const vector<taf::Int32> & monsterGrpList,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());
        void async_continueMultiPVEFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext & roleInfo,const vector<taf::Int32> & monsterGrpList,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 continuePVPFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & attRoleInfo,const ServerEngine::ActorCreateContext & targetRileInfo,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());
        void async_continuePVPFight(FightPrxCallbackPtr callback,const ServerEngine::ActorCreateContext & attRoleInfo,const ServerEngine::ActorCreateContext & targetRileInfo,const ServerEngine::FightContext & ctx,const map<string, string> &context = TAF_CONTEXT());

        FightProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<FightProxy> FightPrx;

    /* servant for server */
    class Fight : public taf::Servant
    {
    public:
        virtual ~Fight(){}
        virtual taf::Int32 doPVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext & ctx,taf::JceCurrentPtr current) = 0;
        static void async_response_doPVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo);

        virtual taf::Int32 doPVPFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & attRoleInfo,const ServerEngine::ActorCreateContext & targetRileInfo,const ServerEngine::FightContext & ctx,taf::JceCurrentPtr current) = 0;
        static void async_response_doPVPFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo);

        virtual taf::Int32 doMultiPVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,const vector<taf::Int32> & monsterGrpList,const ServerEngine::FightContext & ctx,taf::JceCurrentPtr current) = 0;
        static void async_response_doMultiPVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo);

        virtual taf::Int32 continuePVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,taf::Int32 iMonsterGrpID,const ServerEngine::FightContext & ctx,taf::JceCurrentPtr current) = 0;
        static void async_response_continuePVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo);

        virtual taf::Int32 continueMultiPVEFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & roleInfo,const vector<taf::Int32> & monsterGrpList,const ServerEngine::FightContext & ctx,taf::JceCurrentPtr current) = 0;
        static void async_response_continueMultiPVEFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo);

        virtual taf::Int32 continuePVPFight(ServerEngine::BattleData &battleInfo,const ServerEngine::ActorCreateContext & attRoleInfo,const ServerEngine::ActorCreateContext & targetRileInfo,const ServerEngine::FightContext & ctx,taf::JceCurrentPtr current) = 0;
        static void async_response_continuePVPFight(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::BattleData &battleInfo);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif

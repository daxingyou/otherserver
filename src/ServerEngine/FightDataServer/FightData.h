// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.5.0 by WSRD Tencent.
// Generated from `FightData.jce'
// **********************************************************************

#ifndef __FIGHTDATA_H_
#define __FIGHTDATA_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "DalMoDef.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum enFightDataRetCode
    {
        en_FightDataRet_OK,
        en_FightDataRet_NotExist,
        en_FightDataRet_SysError,
    };
    inline string etos(const enFightDataRetCode & e)
    {
        switch(e)
        {
            case en_FightDataRet_OK: return "en_FightDataRet_OK";
            case en_FightDataRet_NotExist: return "en_FightDataRet_NotExist";
            case en_FightDataRet_SysError: return "en_FightDataRet_SysError";
            default: return "";
        }
    }
    inline int stoe(const string & s, enFightDataRetCode & e)
    {
        if(s == "en_FightDataRet_OK")  { e=en_FightDataRet_OK; return 0;}
        if(s == "en_FightDataRet_NotExist")  { e=en_FightDataRet_NotExist; return 0;}
        if(s == "en_FightDataRet_SysError")  { e=en_FightDataRet_SysError; return 0;}

        return -1;
    }


    /* callback of async proxy for client */
    class FightDataPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~FightDataPrxCallback(){}
        virtual void callback_saveFightData(taf::Int32 ret)
        { throw std::runtime_error("callback_saveFightData() overloading incorrect."); }
        virtual void callback_saveFightData_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_saveFightData_exception() overloading incorrect."); }

        virtual void callback_getFightData(taf::Int32 ret,  const std::string& strBattleData)
        { throw std::runtime_error("callback_getFightData() overloading incorrect."); }
        virtual void callback_getFightData_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getFightData_exception() overloading incorrect."); }

        virtual void callback_delFightData(taf::Int32 ret)
        { throw std::runtime_error("callback_delFightData() overloading incorrect."); }
        virtual void callback_delFightData_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_delFightData_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<FightDataPrxCallback> FightDataPrxCallbackPtr;

    /* proxy for client */
    class FightDataProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 saveFightData(const ServerEngine::PKFight & keyData,const std::string & strBattleData,const map<string, string> &context = TAF_CONTEXT());
        void async_saveFightData(FightDataPrxCallbackPtr callback,const ServerEngine::PKFight & keyData,const std::string & strBattleData,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getFightData(const ServerEngine::PKFight & keyData,std::string &strBattleData,const map<string, string> &context = TAF_CONTEXT());
        void async_getFightData(FightDataPrxCallbackPtr callback,const ServerEngine::PKFight & keyData,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 delFightData(const ServerEngine::PKFight & keyData,const map<string, string> &context = TAF_CONTEXT());
        void async_delFightData(FightDataPrxCallbackPtr callback,const ServerEngine::PKFight & keyData,const map<string, string> &context = TAF_CONTEXT());

        FightDataProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<FightDataProxy> FightDataPrx;

    /* servant for server */
    class FightData : public taf::Servant
    {
    public:
        virtual ~FightData(){}
        virtual taf::Int32 saveFightData(const ServerEngine::PKFight & keyData,const std::string & strBattleData,taf::JceCurrentPtr current) = 0;
        static void async_response_saveFightData(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getFightData(const ServerEngine::PKFight & keyData,std::string &strBattleData,taf::JceCurrentPtr current) = 0;
        static void async_response_getFightData(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &strBattleData);

        virtual taf::Int32 delFightData(const ServerEngine::PKFight & keyData,taf::JceCurrentPtr current) = 0;
        static void async_response_delFightData(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif

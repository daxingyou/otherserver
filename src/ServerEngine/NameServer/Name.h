// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Name.jce'
// **********************************************************************

#ifndef __NAME_H_
#define __NAME_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum NameRetCode
    {
        en_NameRet_OK = 0,
        en_NameRet_Duplicate = 1,
        en_NameRet_NameNotExist = 2,
        en_NameRet_SysError = 3,
    };
    inline string etos(const NameRetCode & e)
    {
        switch(e)
        {
            case en_NameRet_OK: return "en_NameRet_OK";
            case en_NameRet_Duplicate: return "en_NameRet_Duplicate";
            case en_NameRet_NameNotExist: return "en_NameRet_NameNotExist";
            case en_NameRet_SysError: return "en_NameRet_SysError";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, NameRetCode & e)
    {
        if(s == "en_NameRet_OK")  { e=en_NameRet_OK; return 0;}
        if(s == "en_NameRet_Duplicate")  { e=en_NameRet_Duplicate; return 0;}
        if(s == "en_NameRet_NameNotExist")  { e=en_NameRet_NameNotExist; return 0;}
        if(s == "en_NameRet_SysError")  { e=en_NameRet_SysError; return 0;}

        return -1;
    }

    struct NameDesc : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.NameDesc";
        }
        static string MD5()
        {
            return "49c8405260ac7d293e4c5455274af4e1";
        }
        NameDesc()
        :wWolrdID(0),sAccount(""),iRolePos(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wWolrdID, 0);
            _os.write(sAccount, 1);
            _os.write(iRolePos, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(wWolrdID, 0, true);
            _is.read(sAccount, 1, true);
            _is.read(iRolePos, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wWolrdID,"wWolrdID");
            _ds.display(sAccount,"sAccount");
            _ds.display(iRolePos,"iRolePos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wWolrdID, true);
            _ds.displaySimple(sAccount, true);
            _ds.displaySimple(iRolePos, false);
            return _os;
        }
    public:
        taf::UInt16 wWolrdID;
        std::string sAccount;
        taf::Int32 iRolePos;
    };
    inline bool operator==(const NameDesc&l, const NameDesc&r)
    {
        return l.wWolrdID == r.wWolrdID && l.sAccount == r.sAccount && l.iRolePos == r.iRolePos;
    }
    inline bool operator!=(const NameDesc&l, const NameDesc&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class NamePrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~NamePrxCallback(){}
        virtual void callback_doAddWorldName(taf::Int32 ret)
        { throw std::runtime_error("callback_doAddWorldName() overloading incorrect."); }
        virtual void callback_doAddWorldName_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_doAddWorldName_exception() overloading incorrect."); }

        virtual void callback_delWorldName(taf::Int32 ret)
        { throw std::runtime_error("callback_delWorldName() overloading incorrect."); }
        virtual void callback_delWorldName_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_delWorldName_exception() overloading incorrect."); }

        virtual void callback_getNameDesc(taf::Int32 ret,  const ServerEngine::NameDesc& descInfo)
        { throw std::runtime_error("callback_getNameDesc() overloading incorrect."); }
        virtual void callback_getNameDesc_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getNameDesc_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<NamePrxCallback> NamePrxCallbackPtr;

    /* proxy for client */
    class NameProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 doAddWorldName(const std::string & strName,taf::Int32 iWorldID,const std::string & strAccount,taf::Int32 iRolsPos,const map<string, string> &context = TAF_CONTEXT());
        void async_doAddWorldName(NamePrxCallbackPtr callback,const std::string & strName,taf::Int32 iWorldID,const std::string & strAccount,taf::Int32 iRolsPos,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 delWorldName(const std::string & strName,const map<string, string> &context = TAF_CONTEXT());
        void async_delWorldName(NamePrxCallbackPtr callback,const std::string & strName,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getNameDesc(const std::string & strName,ServerEngine::NameDesc &descInfo,const map<string, string> &context = TAF_CONTEXT());
        void async_getNameDesc(NamePrxCallbackPtr callback,const std::string & strName,const map<string, string> &context = TAF_CONTEXT());

        NameProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<NameProxy> NamePrx;

    /* servant for server */
    class Name : public taf::Servant
    {
    public:
        virtual ~Name(){}
        virtual taf::Int32 doAddWorldName(const std::string & strName,taf::Int32 iWorldID,const std::string & strAccount,taf::Int32 iRolsPos,taf::JceCurrentPtr current) = 0;
        static void async_response_doAddWorldName(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 delWorldName(const std::string & strName,taf::JceCurrentPtr current) = 0;
        static void async_response_delWorldName(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getNameDesc(const std::string & strName,ServerEngine::NameDesc &descInfo,taf::JceCurrentPtr current) = 0;
        static void async_response_getNameDesc(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::NameDesc &descInfo);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define ServerEngine_NameDesc_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wWolrdID,b.wWolrdID);jce_copy_struct(a.sAccount,b.sAccount);jce_copy_struct(a.iRolePos,b.iRolePos);



#endif

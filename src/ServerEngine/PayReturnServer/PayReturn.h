// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.5.0 by WSRD Tencent.
// Generated from `PayReturn.jce'
// **********************************************************************

#ifndef __PAYRETURN_H_
#define __PAYRETURN_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum PayReturnState
    {
        en_PayReturnState_None = 0,
        en_PayReturnState_OK = 1,
        en_PayReturnState_Fail = 2,
    };
    inline string etos(const PayReturnState & e)
    {
        switch(e)
        {
            case en_PayReturnState_None: return "en_PayReturnState_None";
            case en_PayReturnState_OK: return "en_PayReturnState_OK";
            case en_PayReturnState_Fail: return "en_PayReturnState_Fail";
            default: return "";
        }
    }
    inline int stoe(const string & s, PayReturnState & e)
    {
        if(s == "en_PayReturnState_None")  { e=en_PayReturnState_None; return 0;}
        if(s == "en_PayReturnState_OK")  { e=en_PayReturnState_OK; return 0;}
        if(s == "en_PayReturnState_Fail")  { e=en_PayReturnState_Fail; return 0;}

        return -1;
    }


    /* callback of async proxy for client */
    class PayReturnPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PayReturnPrxCallback(){}
        virtual void callback_payReturnMoneyAddVIP(taf::Int32 ret, taf::Int32 state, taf::Int32 iMoney, taf::Int32 VipLevel)
        { throw std::runtime_error("callback_payReturnMoneyAddVIP() overloading incorrect."); }
        virtual void callback_payReturnMoneyAddVIP_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_payReturnMoneyAddVIP_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PayReturnPrxCallback> PayReturnPrxCallbackPtr;

    /* proxy for client */
    class PayReturnProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 payReturnMoneyAddVIP(const std::string & strAccount,taf::Int32 &state,taf::Int32 &iMoney,taf::Int32 &VipLevel,const map<string, string> &context = TAF_CONTEXT());
        void async_payReturnMoneyAddVIP(PayReturnPrxCallbackPtr callback,const std::string & strAccount,const map<string, string> &context = TAF_CONTEXT());

        PayReturnProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<PayReturnProxy> PayReturnPrx;

    /* servant for server */
    class PayReturn : public taf::Servant
    {
    public:
        virtual ~PayReturn(){}
        virtual taf::Int32 payReturnMoneyAddVIP(const std::string & strAccount,taf::Int32 &state,taf::Int32 &iMoney,taf::Int32 &VipLevel,taf::JceCurrentPtr current) = 0;
        static void async_response_payReturnMoneyAddVIP(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int32 state, taf::Int32 iMoney, taf::Int32 VipLevel);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif

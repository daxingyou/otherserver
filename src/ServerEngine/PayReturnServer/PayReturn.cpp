// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.5.0 by WSRD Tencent.
// Generated from `PayReturn.jce'
// **********************************************************************

#include "PayReturn.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace ServerEngine
{

    taf::Int32 PayReturnProxy::payReturnMoneyAddVIP(const std::string &strAccount, taf::Int32 &state, taf::Int32 &iMoney, taf::Int32 &VipLevel, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(strAccount, 1);
        _os.write(state, 2);
        _os.write(iMoney, 3);
        _os.write(VipLevel, 4);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"payReturnMoneyAddVIP", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(state, 2, true);
        _is.read(iMoney, 3, true);
        _is.read(VipLevel, 4, true);
        return _ret;
    }

    void PayReturn::async_response_payReturnMoneyAddVIP(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int32 state, taf::Int32 iMoney, taf::Int32 VipLevel)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("state", state);
            tafAttr.put("iMoney", iMoney);
            tafAttr.put("VipLevel", VipLevel);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(state, 2);

            _os.write(iMoney, 3);

            _os.write(VipLevel, 4);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PayReturnProxy::async_payReturnMoneyAddVIP(PayReturnPrxCallbackPtr callback,const std::string &strAccount,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(strAccount, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"payReturnMoneyAddVIP", _os.getByteBuffer(), context, _mStatus, callback);
    }

    PayReturnProxy* PayReturnProxy::taf_hash(int64_t key)
    {
        return (PayReturnProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __ServerEngine__PayReturn_all[]=
    {
        "payReturnMoneyAddVIP"
    };

    int PayReturnPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__ServerEngine__PayReturn_all, __ServerEngine__PayReturn_all+1, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __ServerEngine__PayReturn_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_payReturnMoneyAddVIP_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::Int32 state;
                _is.read(state, 2, true);
                taf::Int32 iMoney;
                _is.read(iMoney, 3, true);
                taf::Int32 VipLevel;
                _is.read(VipLevel, 4, true);
                callback_payReturnMoneyAddVIP(_ret, state, iMoney, VipLevel);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int PayReturn::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__ServerEngine__PayReturn_all, __ServerEngine__PayReturn_all+1, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __ServerEngine__PayReturn_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                std::string strAccount;
                taf::Int32 state;
                taf::Int32 iMoney;
                taf::Int32 VipLevel;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("strAccount", strAccount);
                    tafAttr.getByDefault("state", state, state);
                    tafAttr.getByDefault("iMoney", iMoney, iMoney);
                    tafAttr.getByDefault("VipLevel", VipLevel, VipLevel);
                }
                else
                {
                    _is.read(strAccount, 1, true);
                    _is.read(state, 2, false);
                    _is.read(iMoney, 3, false);
                    _is.read(VipLevel, 4, false);
                }
                taf::Int32 _ret = payReturnMoneyAddVIP(strAccount,state,iMoney,VipLevel, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("state", state);
                        tafAttr.put("iMoney", iMoney);
                        tafAttr.put("VipLevel", VipLevel);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(state, 2);
                        _os.write(iMoney, 3);
                        _os.write(VipLevel, 4);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}


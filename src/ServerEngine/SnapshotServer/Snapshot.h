// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Snapshot.jce'
// **********************************************************************

#ifndef __SNAPSHOT_H_
#define __SNAPSHOT_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum SnapshotRet
    {
        en_SnapshotRet_OK = 0,
        en_SnapshotRet_NoData = 1,
        en_SnapshotRet_Fail = 2,
    };
    inline string etos(const SnapshotRet & e)
    {
        switch(e)
        {
            case en_SnapshotRet_OK: return "en_SnapshotRet_OK";
            case en_SnapshotRet_NoData: return "en_SnapshotRet_NoData";
            case en_SnapshotRet_Fail: return "en_SnapshotRet_Fail";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, SnapshotRet & e)
    {
        if(s == "en_SnapshotRet_OK")  { e=en_SnapshotRet_OK; return 0;}
        if(s == "en_SnapshotRet_NoData")  { e=en_SnapshotRet_NoData; return 0;}
        if(s == "en_SnapshotRet_Fail")  { e=en_SnapshotRet_Fail; return 0;}

        return -1;
    }

    struct RoleSnapshot : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.RoleSnapshot";
        }
        static string MD5()
        {
            return "6f2038bfeafdb7c352c8060ce30b157f";
        }
        RoleSnapshot()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(worldList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(worldList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(worldList,"worldList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(worldList, false);
            return _os;
        }
    public:
        vector<taf::Int32> worldList;
    };
    inline bool operator==(const RoleSnapshot&l, const RoleSnapshot&r)
    {
        return l.worldList == r.worldList;
    }
    inline bool operator!=(const RoleSnapshot&l, const RoleSnapshot&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class SnapshotPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~SnapshotPrxCallback(){}
        virtual void callback_addWorld(taf::Int32 ret)
        { throw std::runtime_error("callback_addWorld() overloading incorrect."); }
        virtual void callback_addWorld_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_addWorld_exception() overloading incorrect."); }

        virtual void callback_getRoleWorldDesc(taf::Int32 ret,  const ServerEngine::RoleSnapshot& snapDesc)
        { throw std::runtime_error("callback_getRoleWorldDesc() overloading incorrect."); }
        virtual void callback_getRoleWorldDesc_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getRoleWorldDesc_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<SnapshotPrxCallback> SnapshotPrxCallbackPtr;

    /* proxy for client */
    class SnapshotProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 addWorld(const std::string & strAccount,taf::Int32 iWorldID,const map<string, string> &context = TAF_CONTEXT());
        void async_addWorld(SnapshotPrxCallbackPtr callback,const std::string & strAccount,taf::Int32 iWorldID,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 getRoleWorldDesc(const std::string & strAccount,ServerEngine::RoleSnapshot &snapDesc,const map<string, string> &context = TAF_CONTEXT());
        void async_getRoleWorldDesc(SnapshotPrxCallbackPtr callback,const std::string & strAccount,const map<string, string> &context = TAF_CONTEXT());

        SnapshotProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<SnapshotProxy> SnapshotPrx;

    /* servant for server */
    class Snapshot : public taf::Servant
    {
    public:
        virtual ~Snapshot(){}
        virtual taf::Int32 addWorld(const std::string & strAccount,taf::Int32 iWorldID,taf::JceCurrentPtr current) = 0;
        static void async_response_addWorld(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getRoleWorldDesc(const std::string & strAccount,ServerEngine::RoleSnapshot &snapDesc,taf::JceCurrentPtr current) = 0;
        static void async_response_getRoleWorldDesc(taf::JceCurrentPtr current, taf::Int32 _ret, const ServerEngine::RoleSnapshot &snapDesc);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define ServerEngine_RoleSnapshot_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.worldList,b.worldList);



#endif

// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `QQYYBPay.jce'
// **********************************************************************

#include "QQYYBPay.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace ServerEngine
{

    taf::Int32 QQYYBPayProxy::payYuanBao(const ServerEngine::QQYYBPayQueryKey &queryKey, taf::Int32 iCostNum, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(queryKey, 1);
        _os.write(iCostNum, 2);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"payYuanBao", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void QQYYBPay::async_response_payYuanBao(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void QQYYBPayProxy::async_payYuanBao(QQYYBPayPrxCallbackPtr callback,const ServerEngine::QQYYBPayQueryKey &queryKey,taf::Int32 iCostNum,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(queryKey, 1);
        _os.write(iCostNum, 2);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"payYuanBao", _os.getByteBuffer(), context, status, callback);
    }

    taf::Int32 QQYYBPayProxy::queryYuanBao(const ServerEngine::QQYYBPayQueryKey &queryKey, taf::Int32 &iCurCoin, taf::Int32 &iSendCoin, taf::Bool &bFirstSave, taf::Int32 &iSumCoin, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(queryKey, 1);
        _os.write(iCurCoin, 2);
        _os.write(iSendCoin, 3);
        _os.write(bFirstSave, 4);
        _os.write(iSumCoin, 5);
        taf::ResponsePacket rep;
        std::map<string, string> status;
        taf_invoke(taf::JCENORMAL,"queryYuanBao", _os.getByteBuffer(), context, status, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(iCurCoin, 2, true);
        _is.read(iSendCoin, 3, true);
        _is.read(bFirstSave, 4, true);
        _is.read(iSumCoin, 5, true);
        return _ret;
    }

    void QQYYBPay::async_response_queryYuanBao(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int32 iCurCoin, taf::Int32 iSendCoin, taf::Bool bFirstSave, taf::Int32 iSumCoin)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("iCurCoin", iCurCoin);
            tafAttr.put("iSendCoin", iSendCoin);
            tafAttr.put("bFirstSave", bFirstSave);
            tafAttr.put("iSumCoin", iSumCoin);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(iCurCoin, 2);

            _os.write(iSendCoin, 3);

            _os.write(bFirstSave, 4);

            _os.write(iSumCoin, 5);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void QQYYBPayProxy::async_queryYuanBao(QQYYBPayPrxCallbackPtr callback,const ServerEngine::QQYYBPayQueryKey &queryKey,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(queryKey, 1);
        std::map<string, string> status;
        taf_invoke_async(taf::JCENORMAL,"queryYuanBao", _os.getByteBuffer(), context, status, callback);
    }

    QQYYBPayProxy* QQYYBPayProxy::taf_hash(int64_t key)
    {
        return (QQYYBPayProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __ServerEngine__QQYYBPay_all[]=
    {
        "payYuanBao",
        "queryYuanBao"
    };

    int QQYYBPayPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__ServerEngine__QQYYBPay_all, __ServerEngine__QQYYBPay_all+2, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __ServerEngine__QQYYBPay_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_payYuanBao_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_payYuanBao(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_queryYuanBao_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                taf::Int32 iCurCoin;
                _is.read(iCurCoin, 2, true);
                taf::Int32 iSendCoin;
                _is.read(iSendCoin, 3, true);
                taf::Bool bFirstSave;
                _is.read(bFirstSave, 4, true);
                taf::Int32 iSumCoin;
                _is.read(iSumCoin, 5, true);
                callback_queryYuanBao(_ret, iCurCoin, iSendCoin, bFirstSave, iSumCoin);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int QQYYBPay::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__ServerEngine__QQYYBPay_all, __ServerEngine__QQYYBPay_all+2, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __ServerEngine__QQYYBPay_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::QQYYBPayQueryKey queryKey;
                taf::Int32 iCostNum;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("queryKey", queryKey);
                    tafAttr.get("iCostNum", iCostNum);
                }
                else
                {
                    _is.read(queryKey, 1, true);
                    _is.read(iCostNum, 2, true);
                }
                taf::Int32 _ret = payYuanBao(queryKey,iCostNum, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                ServerEngine::QQYYBPayQueryKey queryKey;
                taf::Int32 iCurCoin;
                taf::Int32 iSendCoin;
                taf::Bool bFirstSave;
                taf::Int32 iSumCoin;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("queryKey", queryKey);
                    tafAttr.getByDefault("iCurCoin", iCurCoin, iCurCoin);
                    tafAttr.getByDefault("iSendCoin", iSendCoin, iSendCoin);
                    tafAttr.getByDefault("bFirstSave", bFirstSave, bFirstSave);
                    tafAttr.getByDefault("iSumCoin", iSumCoin, iSumCoin);
                }
                else
                {
                    _is.read(queryKey, 1, true);
                    _is.read(iCurCoin, 2, false);
                    _is.read(iSendCoin, 3, false);
                    _is.read(bFirstSave, 4, false);
                    _is.read(iSumCoin, 5, false);
                }
                taf::Int32 _ret = queryYuanBao(queryKey,iCurCoin,iSendCoin,bFirstSave,iSumCoin, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("iCurCoin", iCurCoin);
                        tafAttr.put("iSendCoin", iSendCoin);
                        tafAttr.put("bFirstSave", bFirstSave);
                        tafAttr.put("iSumCoin", iSumCoin);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(iCurCoin, 2);
                        _os.write(iSendCoin, 3);
                        _os.write(bFirstSave, 4);
                        _os.write(iSumCoin, 5);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}


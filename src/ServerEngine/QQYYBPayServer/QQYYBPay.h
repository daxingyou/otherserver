// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `QQYYBPay.jce'
// **********************************************************************

#ifndef __QQYYBPAY_H_
#define __QQYYBPAY_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{
    enum QQYYBPayRetCode
    {
        en_QQYYBPayRet_OK = 0,
        en_QQYYBPayRet_ERROR = 1,
        en_QQYYBPayRet_EXCEPTION = 2,
        en_QQYYBPayRet_NEEDCOIN = 3,
        en_QQYYBPayRet_INVALIDLOGIN = 4,
        en_QQYYBPatRet_INVALIDCHANNEL = 5,
    };
    inline string etos(const QQYYBPayRetCode & e)
    {
        switch(e)
        {
            case en_QQYYBPayRet_OK: return "en_QQYYBPayRet_OK";
            case en_QQYYBPayRet_ERROR: return "en_QQYYBPayRet_ERROR";
            case en_QQYYBPayRet_EXCEPTION: return "en_QQYYBPayRet_EXCEPTION";
            case en_QQYYBPayRet_NEEDCOIN: return "en_QQYYBPayRet_NEEDCOIN";
            case en_QQYYBPayRet_INVALIDLOGIN: return "en_QQYYBPayRet_INVALIDLOGIN";
            case en_QQYYBPatRet_INVALIDCHANNEL: return "en_QQYYBPatRet_INVALIDCHANNEL";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, QQYYBPayRetCode & e)
    {
        if(s == "en_QQYYBPayRet_OK")  { e=en_QQYYBPayRet_OK; return 0;}
        if(s == "en_QQYYBPayRet_ERROR")  { e=en_QQYYBPayRet_ERROR; return 0;}
        if(s == "en_QQYYBPayRet_EXCEPTION")  { e=en_QQYYBPayRet_EXCEPTION; return 0;}
        if(s == "en_QQYYBPayRet_NEEDCOIN")  { e=en_QQYYBPayRet_NEEDCOIN; return 0;}
        if(s == "en_QQYYBPayRet_INVALIDLOGIN")  { e=en_QQYYBPayRet_INVALIDLOGIN; return 0;}
        if(s == "en_QQYYBPatRet_INVALIDCHANNEL")  { e=en_QQYYBPatRet_INVALIDCHANNEL; return 0;}

        return -1;
    }

    struct QQYYBPayQueryKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "ServerEngine.QQYYBPayQueryKey";
        }
        static string MD5()
        {
            return "6ac50052c429bbcb942a6030da92201e";
        }
        QQYYBPayQueryKey()
        :strOpenID(""),strOpenKey(""),strPayToken(""),strPf(""),strPfKey(""),iZoneID(0),strChannel("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strOpenID, 0);
            _os.write(strOpenKey, 1);
            _os.write(strPayToken, 2);
            _os.write(strPf, 3);
            _os.write(strPfKey, 4);
            _os.write(iZoneID, 5);
            _os.write(strChannel, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(strOpenID, 0, true);
            _is.read(strOpenKey, 1, true);
            _is.read(strPayToken, 2, true);
            _is.read(strPf, 3, true);
            _is.read(strPfKey, 4, true);
            _is.read(iZoneID, 5, true);
            _is.read(strChannel, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strOpenID,"strOpenID");
            _ds.display(strOpenKey,"strOpenKey");
            _ds.display(strPayToken,"strPayToken");
            _ds.display(strPf,"strPf");
            _ds.display(strPfKey,"strPfKey");
            _ds.display(iZoneID,"iZoneID");
            _ds.display(strChannel,"strChannel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strOpenID, true);
            _ds.displaySimple(strOpenKey, true);
            _ds.displaySimple(strPayToken, true);
            _ds.displaySimple(strPf, true);
            _ds.displaySimple(strPfKey, true);
            _ds.displaySimple(iZoneID, true);
            _ds.displaySimple(strChannel, false);
            return _os;
        }
    public:
        std::string strOpenID;
        std::string strOpenKey;
        std::string strPayToken;
        std::string strPf;
        std::string strPfKey;
        taf::Int32 iZoneID;
        std::string strChannel;
    };
    inline bool operator==(const QQYYBPayQueryKey&l, const QQYYBPayQueryKey&r)
    {
        return l.strOpenID == r.strOpenID && l.strOpenKey == r.strOpenKey && l.strPayToken == r.strPayToken && l.strPf == r.strPf && l.strPfKey == r.strPfKey && l.iZoneID == r.iZoneID && l.strChannel == r.strChannel;
    }
    inline bool operator!=(const QQYYBPayQueryKey&l, const QQYYBPayQueryKey&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class QQYYBPayPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~QQYYBPayPrxCallback(){}
        virtual void callback_queryYuanBao(taf::Int32 ret, taf::Int32 iCurCoin, taf::Int32 iSendCoin, taf::Bool bFirstSave, taf::Int32 iSumCoin)
        { throw std::runtime_error("callback_queryYuanBao() overloading incorrect."); }
        virtual void callback_queryYuanBao_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_queryYuanBao_exception() overloading incorrect."); }

        virtual void callback_payYuanBao(taf::Int32 ret)
        { throw std::runtime_error("callback_payYuanBao() overloading incorrect."); }
        virtual void callback_payYuanBao_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_payYuanBao_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<QQYYBPayPrxCallback> QQYYBPayPrxCallbackPtr;

    /* proxy for client */
    class QQYYBPayProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 queryYuanBao(const ServerEngine::QQYYBPayQueryKey & queryKey,taf::Int32 &iCurCoin,taf::Int32 &iSendCoin,taf::Bool &bFirstSave,taf::Int32 &iSumCoin,const map<string, string> &context = TAF_CONTEXT());
        void async_queryYuanBao(QQYYBPayPrxCallbackPtr callback,const ServerEngine::QQYYBPayQueryKey & queryKey,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 payYuanBao(const ServerEngine::QQYYBPayQueryKey & queryKey,taf::Int32 iCostNum,const map<string, string> &context = TAF_CONTEXT());
        void async_payYuanBao(QQYYBPayPrxCallbackPtr callback,const ServerEngine::QQYYBPayQueryKey & queryKey,taf::Int32 iCostNum,const map<string, string> &context = TAF_CONTEXT());

        QQYYBPayProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<QQYYBPayProxy> QQYYBPayPrx;

    /* servant for server */
    class QQYYBPay : public taf::Servant
    {
    public:
        virtual ~QQYYBPay(){}
        virtual taf::Int32 queryYuanBao(const ServerEngine::QQYYBPayQueryKey & queryKey,taf::Int32 &iCurCoin,taf::Int32 &iSendCoin,taf::Bool &bFirstSave,taf::Int32 &iSumCoin,taf::JceCurrentPtr current) = 0;
        static void async_response_queryYuanBao(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int32 iCurCoin, taf::Int32 iSendCoin, taf::Bool bFirstSave, taf::Int32 iSumCoin);

        virtual taf::Int32 payYuanBao(const ServerEngine::QQYYBPayQueryKey & queryKey,taf::Int32 iCostNum,taf::JceCurrentPtr current) = 0;
        static void async_response_payYuanBao(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define ServerEngine_QQYYBPayQueryKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strOpenID,b.strOpenID);jce_copy_struct(a.strOpenKey,b.strOpenKey);jce_copy_struct(a.strPayToken,b.strPayToken);jce_copy_struct(a.strPf,b.strPf);jce_copy_struct(a.strPfKey,b.strPfKey);jce_copy_struct(a.iZoneID,b.iZoneID);jce_copy_struct(a.strChannel,b.strChannel);



#endif

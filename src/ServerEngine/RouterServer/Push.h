// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.6.0 by WSRD Tencent.
// Generated from `Push.jce'
// **********************************************************************

#ifndef __PUSH_H_
#define __PUSH_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace ServerEngine
{

    /* callback of async proxy for client */
    class PushPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PushPrxCallback(){}
        virtual void callback_doPush(taf::Int32 ret)
        { throw std::runtime_error("callback_doPush() overloading incorrect."); }
        virtual void callback_doPush_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_doPush_exception() overloading incorrect."); }

        virtual void callback_doNotifyLoginOff(taf::Int32 ret)
        { throw std::runtime_error("callback_doNotifyLoginOff() overloading incorrect."); }
        virtual void callback_doNotifyLoginOff_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_doNotifyLoginOff_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PushPrxCallback> PushPrxCallbackPtr;

    /* proxy for client */
    class PushProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 doPush(taf::Int64 iConnId,const std::string & sMsgPack,const map<string, string> &context = TAF_CONTEXT());
        void async_doPush(PushPrxCallbackPtr callback,taf::Int64 iConnId,const std::string & sMsgPack,const map<string, string> &context = TAF_CONTEXT());

        taf::Int32 doNotifyLoginOff(taf::Int64 iConnId,const std::string & sMsgPack,const map<string, string> &context = TAF_CONTEXT());
        void async_doNotifyLoginOff(PushPrxCallbackPtr callback,taf::Int64 iConnId,const std::string & sMsgPack,const map<string, string> &context = TAF_CONTEXT());

        PushProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<PushProxy> PushPrx;

    /* servant for server */
    class Push : public taf::Servant
    {
    public:
        virtual ~Push(){}
        virtual taf::Int32 doPush(taf::Int64 iConnId,const std::string & sMsgPack,taf::JceCurrentPtr current) = 0;
        static void async_response_doPush(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 doNotifyLoginOff(taf::Int64 iConnId,const std::string & sMsgPack,taf::JceCurrentPtr current) = 0;
        static void async_response_doNotifyLoginOff(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RouterServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RouterServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerEngine {

namespace {

const ::google::protobuf::Descriptor* SCMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_RS_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_RS_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_RS_Auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_RS_Auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_RS_Auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_RS_Auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_RS_WorldList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_RS_WorldList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RS_ROUTER_VERSION_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RS_ROUTER_VERSION_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_RS_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_RS_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_RS_ALogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_RS_ALogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enBusyStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RouterServerCMD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RSAuthCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RouterServer_2eproto() {
  protobuf_AddDesc_RouterServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RouterServer.proto");
  GOOGLE_CHECK(file != NULL);
  SCMessage_descriptor_ = file->message_type(0);
  static const int SCMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMessage, icmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMessage, strmsgbody_),
  };
  SCMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMessage_descriptor_,
      SCMessage::default_instance_,
      SCMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMessage));
  CSMessage_descriptor_ = file->message_type(1);
  static const int CSMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessage, icmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessage, strmsgbody_),
  };
  CSMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMessage_descriptor_,
      CSMessage::default_instance_,
      CSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMessage));
  CS_RS_Version_descriptor_ = file->message_type(2);
  static const int CS_RS_Version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Version, codeversion_),
  };
  CS_RS_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_RS_Version_descriptor_,
      CS_RS_Version::default_instance_,
      CS_RS_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_RS_Version));
  CS_RS_Auth_descriptor_ = file->message_type(3);
  static const int CS_RS_Auth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Auth, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Auth, strmd5passwd_),
  };
  CS_RS_Auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_RS_Auth_descriptor_,
      CS_RS_Auth::default_instance_,
      CS_RS_Auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_Auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_RS_Auth));
  SC_RS_Auth_descriptor_ = file->message_type(4);
  static const int SC_RS_Auth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Auth, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Auth, iretcode_),
  };
  SC_RS_Auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_RS_Auth_descriptor_,
      SC_RS_Auth::default_instance_,
      SC_RS_Auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_RS_Auth));
  RSWorld_descriptor_ = file->message_type(5);
  static const int RSWorld_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, strworldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, iatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, ionlinestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, ibusystatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, bhaverole_),
  };
  RSWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSWorld_descriptor_,
      RSWorld::default_instance_,
      RSWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSWorld));
  SC_RS_WorldList_descriptor_ = file->message_type(6);
  static const int SC_RS_WorldList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_WorldList, worldlist_),
  };
  SC_RS_WorldList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_RS_WorldList_descriptor_,
      SC_RS_WorldList::default_instance_,
      SC_RS_WorldList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_WorldList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_WorldList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_RS_WorldList));
  RS_ROUTER_VERSION_SC_descriptor_ = file->message_type(7);
  static const int RS_ROUTER_VERSION_SC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RS_ROUTER_VERSION_SC, strurldir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RS_ROUTER_VERSION_SC, strversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RS_ROUTER_VERSION_SC, strminversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RS_ROUTER_VERSION_SC, noresupdate_),
  };
  RS_ROUTER_VERSION_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RS_ROUTER_VERSION_SC_descriptor_,
      RS_ROUTER_VERSION_SC::default_instance_,
      RS_ROUTER_VERSION_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RS_ROUTER_VERSION_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RS_ROUTER_VERSION_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RS_ROUTER_VERSION_SC));
  SC_RS_Error_descriptor_ = file->message_type(8);
  static const int SC_RS_Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Error, strerrormsg_),
  };
  SC_RS_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_RS_Error_descriptor_,
      SC_RS_Error::default_instance_,
      SC_RS_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RS_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_RS_Error));
  CS_RS_ALogin_descriptor_ = file->message_type(9);
  static const int CS_RS_ALogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_ALogin, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_ALogin, strtransmsg_),
  };
  CS_RS_ALogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_RS_ALogin_descriptor_,
      CS_RS_ALogin::default_instance_,
      CS_RS_ALogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_ALogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_RS_ALogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_RS_ALogin));
  enBusyStatus_descriptor_ = file->enum_type(0);
  RouterServerCMD_descriptor_ = file->enum_type(1);
  RSAuthCode_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RouterServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMessage_descriptor_, &SCMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMessage_descriptor_, &CSMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_RS_Version_descriptor_, &CS_RS_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_RS_Auth_descriptor_, &CS_RS_Auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_RS_Auth_descriptor_, &SC_RS_Auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSWorld_descriptor_, &RSWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_RS_WorldList_descriptor_, &SC_RS_WorldList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RS_ROUTER_VERSION_SC_descriptor_, &RS_ROUTER_VERSION_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_RS_Error_descriptor_, &SC_RS_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_RS_ALogin_descriptor_, &CS_RS_ALogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RouterServer_2eproto() {
  delete SCMessage::default_instance_;
  delete SCMessage_reflection_;
  delete CSMessage::default_instance_;
  delete CSMessage_reflection_;
  delete CS_RS_Version::default_instance_;
  delete CS_RS_Version_reflection_;
  delete CS_RS_Auth::default_instance_;
  delete CS_RS_Auth_reflection_;
  delete SC_RS_Auth::default_instance_;
  delete SC_RS_Auth_reflection_;
  delete RSWorld::default_instance_;
  delete RSWorld_reflection_;
  delete SC_RS_WorldList::default_instance_;
  delete SC_RS_WorldList_reflection_;
  delete RS_ROUTER_VERSION_SC::default_instance_;
  delete RS_ROUTER_VERSION_SC_reflection_;
  delete SC_RS_Error::default_instance_;
  delete SC_RS_Error_reflection_;
  delete CS_RS_ALogin::default_instance_;
  delete CS_RS_ALogin_reflection_;
}

void protobuf_AddDesc_RouterServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RouterServer.proto\022\014ServerEngine\"-\n\tSC"
    "Message\022\014\n\004iCmd\030\001 \002(\005\022\022\n\nstrMsgBody\030\002 \001("
    "\014\"-\n\tCSMessage\022\014\n\004iCmd\030\001 \002(\005\022\022\n\nstrMsgBo"
    "dy\030\002 \001(\014\"$\n\rCS_RS_Version\022\023\n\013codeVersion"
    "\030\001 \001(\t\"6\n\nCS_RS_Auth\022\022\n\nstrAccount\030\001 \002(\t"
    "\022\024\n\014strMd5Passwd\030\002 \002(\014\"2\n\nSC_RS_Auth\022\022\n\n"
    "strAccount\030\001 \002(\t\022\020\n\010iRetCode\030\002 \002(\005\"~\n\007RS"
    "World\022\020\n\010iWorldID\030\001 \002(\005\022\024\n\014strWorldName\030"
    "\002 \002(\t\022\014\n\004iAtt\030\003 \002(\005\022\025\n\riOnlineStatus\030\004 \002"
    "(\005\022\023\n\013iBusyStatus\030\005 \002(\005\022\021\n\tbHaveRole\030\006 \001"
    "(\010\";\n\017SC_RS_WorldList\022(\n\tworldList\030\001 \003(\013"
    "2\025.ServerEngine.RSWorld\"i\n\024RS_ROUTER_VER"
    "SION_SC\022\021\n\tstrUrlDir\030\001 \002(\t\022\022\n\nstrVersion"
    "\030\002 \002(\t\022\025\n\rstrMinVersion\030\003 \001(\t\022\023\n\013noResUp"
    "date\030\004 \001(\010\"\"\n\013SC_RS_Error\022\023\n\013strErrorMsg"
    "\030\001 \001(\t\"5\n\014CS_RS_ALogin\022\020\n\010iWorldID\030\001 \002(\005"
    "\022\023\n\013strTransMsg\030\002 \002(\014*\204\001\n\014enBusyStatus\022\026"
    "\n\022en_BusyStatus_Free\020\000\022\026\n\022en_BusyStatus_"
    "Good\020\001\022\025\n\021en_BusyStatus_Hot\020\002\022\026\n\022en_Busy"
    "Status_Full\020\003\022\025\n\021en_BusyStatus_End\020\004*\205\001\n"
    "\017RouterServerCMD\022\023\n\016RS_ROUTER_AUTH\020\350\007\022\030\n"
    "\023RS_ROUTER_WORLDLIST\020\351\007\022\025\n\020RS_ROUTER_ALO"
    "GIN\020\352\007\022\024\n\017RS_ROUTER_ERROR\020\353\007\022\026\n\021RS_ROUTE"
    "R_VERSION\020\354\007*0\n\nRSAuthCode\022\016\n\nRS_AUTU_OK"
    "\020\000\022\022\n\016RS_AUTU_PASSWD\020\001", 982);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RouterServer.proto", &protobuf_RegisterTypes);
  SCMessage::default_instance_ = new SCMessage();
  CSMessage::default_instance_ = new CSMessage();
  CS_RS_Version::default_instance_ = new CS_RS_Version();
  CS_RS_Auth::default_instance_ = new CS_RS_Auth();
  SC_RS_Auth::default_instance_ = new SC_RS_Auth();
  RSWorld::default_instance_ = new RSWorld();
  SC_RS_WorldList::default_instance_ = new SC_RS_WorldList();
  RS_ROUTER_VERSION_SC::default_instance_ = new RS_ROUTER_VERSION_SC();
  SC_RS_Error::default_instance_ = new SC_RS_Error();
  CS_RS_ALogin::default_instance_ = new CS_RS_ALogin();
  SCMessage::default_instance_->InitAsDefaultInstance();
  CSMessage::default_instance_->InitAsDefaultInstance();
  CS_RS_Version::default_instance_->InitAsDefaultInstance();
  CS_RS_Auth::default_instance_->InitAsDefaultInstance();
  SC_RS_Auth::default_instance_->InitAsDefaultInstance();
  RSWorld::default_instance_->InitAsDefaultInstance();
  SC_RS_WorldList::default_instance_->InitAsDefaultInstance();
  RS_ROUTER_VERSION_SC::default_instance_->InitAsDefaultInstance();
  SC_RS_Error::default_instance_->InitAsDefaultInstance();
  CS_RS_ALogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RouterServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RouterServer_2eproto {
  StaticDescriptorInitializer_RouterServer_2eproto() {
    protobuf_AddDesc_RouterServer_2eproto();
  }
} static_descriptor_initializer_RouterServer_2eproto_;
const ::google::protobuf::EnumDescriptor* enBusyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enBusyStatus_descriptor_;
}
bool enBusyStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RouterServerCMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterServerCMD_descriptor_;
}
bool RouterServerCMD_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RSAuthCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSAuthCode_descriptor_;
}
bool RSAuthCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SCMessage::kICmdFieldNumber;
const int SCMessage::kStrMsgBodyFieldNumber;
#endif  // !_MSC_VER

SCMessage::SCMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMessage::InitAsDefaultInstance() {
}

SCMessage::SCMessage(const SCMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMessage::SharedCtor() {
  _cached_size_ = 0;
  icmd_ = 0;
  strmsgbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMessage::~SCMessage() {
  SharedDtor();
}

void SCMessage::SharedDtor() {
  if (strmsgbody_ != &::google::protobuf::internal::kEmptyString) {
    delete strmsgbody_;
  }
  if (this != default_instance_) {
  }
}

void SCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMessage_descriptor_;
}

const SCMessage& SCMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

SCMessage* SCMessage::default_instance_ = NULL;

SCMessage* SCMessage::New() const {
  return new SCMessage;
}

void SCMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icmd_ = 0;
    if (has_strmsgbody()) {
      if (strmsgbody_ != &::google::protobuf::internal::kEmptyString) {
        strmsgbody_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icmd_)));
          set_has_icmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strMsgBody;
        break;
      }

      // optional bytes strMsgBody = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMsgBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmsgbody()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCmd = 1;
  if (has_icmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icmd(), output);
  }

  // optional bytes strMsgBody = 2;
  if (has_strmsgbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strmsgbody(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCmd = 1;
  if (has_icmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icmd(), target);
  }

  // optional bytes strMsgBody = 2;
  if (has_strmsgbody()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strmsgbody(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCmd = 1;
    if (has_icmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icmd());
    }

    // optional bytes strMsgBody = 2;
    if (has_strmsgbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmsgbody());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMessage::MergeFrom(const SCMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icmd()) {
      set_icmd(from.icmd());
    }
    if (from.has_strmsgbody()) {
      set_strmsgbody(from.strmsgbody());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMessage::CopyFrom(const SCMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMessage::Swap(SCMessage* other) {
  if (other != this) {
    std::swap(icmd_, other->icmd_);
    std::swap(strmsgbody_, other->strmsgbody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMessage_descriptor_;
  metadata.reflection = SCMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMessage::kICmdFieldNumber;
const int CSMessage::kStrMsgBodyFieldNumber;
#endif  // !_MSC_VER

CSMessage::CSMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMessage::InitAsDefaultInstance() {
}

CSMessage::CSMessage(const CSMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMessage::SharedCtor() {
  _cached_size_ = 0;
  icmd_ = 0;
  strmsgbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMessage::~CSMessage() {
  SharedDtor();
}

void CSMessage::SharedDtor() {
  if (strmsgbody_ != &::google::protobuf::internal::kEmptyString) {
    delete strmsgbody_;
  }
  if (this != default_instance_) {
  }
}

void CSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMessage_descriptor_;
}

const CSMessage& CSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

CSMessage* CSMessage::default_instance_ = NULL;

CSMessage* CSMessage::New() const {
  return new CSMessage;
}

void CSMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icmd_ = 0;
    if (has_strmsgbody()) {
      if (strmsgbody_ != &::google::protobuf::internal::kEmptyString) {
        strmsgbody_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iCmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icmd_)));
          set_has_icmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strMsgBody;
        break;
      }

      // optional bytes strMsgBody = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMsgBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmsgbody()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iCmd = 1;
  if (has_icmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->icmd(), output);
  }

  // optional bytes strMsgBody = 2;
  if (has_strmsgbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strmsgbody(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iCmd = 1;
  if (has_icmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->icmd(), target);
  }

  // optional bytes strMsgBody = 2;
  if (has_strmsgbody()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strmsgbody(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iCmd = 1;
    if (has_icmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icmd());
    }

    // optional bytes strMsgBody = 2;
    if (has_strmsgbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmsgbody());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMessage::MergeFrom(const CSMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icmd()) {
      set_icmd(from.icmd());
    }
    if (from.has_strmsgbody()) {
      set_strmsgbody(from.strmsgbody());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMessage::CopyFrom(const CSMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSMessage::Swap(CSMessage* other) {
  if (other != this) {
    std::swap(icmd_, other->icmd_);
    std::swap(strmsgbody_, other->strmsgbody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMessage_descriptor_;
  metadata.reflection = CSMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_RS_Version::kCodeVersionFieldNumber;
#endif  // !_MSC_VER

CS_RS_Version::CS_RS_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_RS_Version::InitAsDefaultInstance() {
}

CS_RS_Version::CS_RS_Version(const CS_RS_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_RS_Version::SharedCtor() {
  _cached_size_ = 0;
  codeversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_RS_Version::~CS_RS_Version() {
  SharedDtor();
}

void CS_RS_Version::SharedDtor() {
  if (codeversion_ != &::google::protobuf::internal::kEmptyString) {
    delete codeversion_;
  }
  if (this != default_instance_) {
  }
}

void CS_RS_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_RS_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_RS_Version_descriptor_;
}

const CS_RS_Version& CS_RS_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

CS_RS_Version* CS_RS_Version::default_instance_ = NULL;

CS_RS_Version* CS_RS_Version::New() const {
  return new CS_RS_Version;
}

void CS_RS_Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_codeversion()) {
      if (codeversion_ != &::google::protobuf::internal::kEmptyString) {
        codeversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_RS_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string codeVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codeversion().data(), this->codeversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_RS_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string codeVersion = 1;
  if (has_codeversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codeversion().data(), this->codeversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->codeversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_RS_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string codeVersion = 1;
  if (has_codeversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codeversion().data(), this->codeversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_RS_Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string codeVersion = 1;
    if (has_codeversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_RS_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_RS_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_RS_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_RS_Version::MergeFrom(const CS_RS_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeversion()) {
      set_codeversion(from.codeversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_RS_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_RS_Version::CopyFrom(const CS_RS_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_RS_Version::IsInitialized() const {

  return true;
}

void CS_RS_Version::Swap(CS_RS_Version* other) {
  if (other != this) {
    std::swap(codeversion_, other->codeversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_RS_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_RS_Version_descriptor_;
  metadata.reflection = CS_RS_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_RS_Auth::kStrAccountFieldNumber;
const int CS_RS_Auth::kStrMd5PasswdFieldNumber;
#endif  // !_MSC_VER

CS_RS_Auth::CS_RS_Auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_RS_Auth::InitAsDefaultInstance() {
}

CS_RS_Auth::CS_RS_Auth(const CS_RS_Auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_RS_Auth::SharedCtor() {
  _cached_size_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strmd5passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_RS_Auth::~CS_RS_Auth() {
  SharedDtor();
}

void CS_RS_Auth::SharedDtor() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (strmd5passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete strmd5passwd_;
  }
  if (this != default_instance_) {
  }
}

void CS_RS_Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_RS_Auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_RS_Auth_descriptor_;
}

const CS_RS_Auth& CS_RS_Auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

CS_RS_Auth* CS_RS_Auth::default_instance_ = NULL;

CS_RS_Auth* CS_RS_Auth::New() const {
  return new CS_RS_Auth;
}

void CS_RS_Auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
    if (has_strmd5passwd()) {
      if (strmd5passwd_ != &::google::protobuf::internal::kEmptyString) {
        strmd5passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_RS_Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strMd5Passwd;
        break;
      }

      // required bytes strMd5Passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMd5Passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmd5passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_RS_Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccount(), output);
  }

  // required bytes strMd5Passwd = 2;
  if (has_strmd5passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strmd5passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_RS_Auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccount(), target);
  }

  // required bytes strMd5Passwd = 2;
  if (has_strmd5passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strmd5passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_RS_Auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccount = 1;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

    // required bytes strMd5Passwd = 2;
    if (has_strmd5passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmd5passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_RS_Auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_RS_Auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_RS_Auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_RS_Auth::MergeFrom(const CS_RS_Auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
    if (from.has_strmd5passwd()) {
      set_strmd5passwd(from.strmd5passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_RS_Auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_RS_Auth::CopyFrom(const CS_RS_Auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_RS_Auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_RS_Auth::Swap(CS_RS_Auth* other) {
  if (other != this) {
    std::swap(straccount_, other->straccount_);
    std::swap(strmd5passwd_, other->strmd5passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_RS_Auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_RS_Auth_descriptor_;
  metadata.reflection = CS_RS_Auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_RS_Auth::kStrAccountFieldNumber;
const int SC_RS_Auth::kIRetCodeFieldNumber;
#endif  // !_MSC_VER

SC_RS_Auth::SC_RS_Auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_RS_Auth::InitAsDefaultInstance() {
}

SC_RS_Auth::SC_RS_Auth(const SC_RS_Auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_RS_Auth::SharedCtor() {
  _cached_size_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iretcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_RS_Auth::~SC_RS_Auth() {
  SharedDtor();
}

void SC_RS_Auth::SharedDtor() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (this != default_instance_) {
  }
}

void SC_RS_Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RS_Auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_RS_Auth_descriptor_;
}

const SC_RS_Auth& SC_RS_Auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

SC_RS_Auth* SC_RS_Auth::default_instance_ = NULL;

SC_RS_Auth* SC_RS_Auth::New() const {
  return new SC_RS_Auth;
}

void SC_RS_Auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
    iretcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_RS_Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iRetCode;
        break;
      }

      // required int32 iRetCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRetCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iretcode_)));
          set_has_iretcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_RS_Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccount(), output);
  }

  // required int32 iRetCode = 2;
  if (has_iretcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iretcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_RS_Auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccount(), target);
  }

  // required int32 iRetCode = 2;
  if (has_iretcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iretcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_RS_Auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccount = 1;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

    // required int32 iRetCode = 2;
    if (has_iretcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iretcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RS_Auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_RS_Auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_RS_Auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_RS_Auth::MergeFrom(const SC_RS_Auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
    if (from.has_iretcode()) {
      set_iretcode(from.iretcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_RS_Auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RS_Auth::CopyFrom(const SC_RS_Auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RS_Auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_RS_Auth::Swap(SC_RS_Auth* other) {
  if (other != this) {
    std::swap(straccount_, other->straccount_);
    std::swap(iretcode_, other->iretcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_RS_Auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_RS_Auth_descriptor_;
  metadata.reflection = SC_RS_Auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSWorld::kIWorldIDFieldNumber;
const int RSWorld::kStrWorldNameFieldNumber;
const int RSWorld::kIAttFieldNumber;
const int RSWorld::kIOnlineStatusFieldNumber;
const int RSWorld::kIBusyStatusFieldNumber;
const int RSWorld::kBHaveRoleFieldNumber;
#endif  // !_MSC_VER

RSWorld::RSWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RSWorld::InitAsDefaultInstance() {
}

RSWorld::RSWorld(const RSWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RSWorld::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  strworldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iatt_ = 0;
  ionlinestatus_ = 0;
  ibusystatus_ = 0;
  bhaverole_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSWorld::~RSWorld() {
  SharedDtor();
}

void RSWorld::SharedDtor() {
  if (strworldname_ != &::google::protobuf::internal::kEmptyString) {
    delete strworldname_;
  }
  if (this != default_instance_) {
  }
}

void RSWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSWorld_descriptor_;
}

const RSWorld& RSWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

RSWorld* RSWorld::default_instance_ = NULL;

RSWorld* RSWorld::New() const {
  return new RSWorld;
}

void RSWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    if (has_strworldname()) {
      if (strworldname_ != &::google::protobuf::internal::kEmptyString) {
        strworldname_->clear();
      }
    }
    iatt_ = 0;
    ionlinestatus_ = 0;
    ibusystatus_ = 0;
    bhaverole_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strWorldName;
        break;
      }

      // required string strWorldName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strWorldName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strworldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strworldname().data(), this->strworldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAtt;
        break;
      }

      // required int32 iAtt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iatt_)));
          set_has_iatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iOnlineStatus;
        break;
      }

      // required int32 iOnlineStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOnlineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionlinestatus_)));
          set_has_ionlinestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iBusyStatus;
        break;
      }

      // required int32 iBusyStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iBusyStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibusystatus_)));
          set_has_ibusystatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bHaveRole;
        break;
      }

      // optional bool bHaveRole = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHaveRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhaverole_)));
          set_has_bhaverole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RSWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // required string strWorldName = 2;
  if (has_strworldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strworldname().data(), this->strworldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strworldname(), output);
  }

  // required int32 iAtt = 3;
  if (has_iatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iatt(), output);
  }

  // required int32 iOnlineStatus = 4;
  if (has_ionlinestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ionlinestatus(), output);
  }

  // required int32 iBusyStatus = 5;
  if (has_ibusystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ibusystatus(), output);
  }

  // optional bool bHaveRole = 6;
  if (has_bhaverole()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bhaverole(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RSWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // required string strWorldName = 2;
  if (has_strworldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strworldname().data(), this->strworldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strworldname(), target);
  }

  // required int32 iAtt = 3;
  if (has_iatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iatt(), target);
  }

  // required int32 iOnlineStatus = 4;
  if (has_ionlinestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ionlinestatus(), target);
  }

  // required int32 iBusyStatus = 5;
  if (has_ibusystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ibusystatus(), target);
  }

  // optional bool bHaveRole = 6;
  if (has_bhaverole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bhaverole(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RSWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // required string strWorldName = 2;
    if (has_strworldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strworldname());
    }

    // required int32 iAtt = 3;
    if (has_iatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iatt());
    }

    // required int32 iOnlineStatus = 4;
    if (has_ionlinestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionlinestatus());
    }

    // required int32 iBusyStatus = 5;
    if (has_ibusystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibusystatus());
    }

    // optional bool bHaveRole = 6;
    if (has_bhaverole()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSWorld::MergeFrom(const RSWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_strworldname()) {
      set_strworldname(from.strworldname());
    }
    if (from.has_iatt()) {
      set_iatt(from.iatt());
    }
    if (from.has_ionlinestatus()) {
      set_ionlinestatus(from.ionlinestatus());
    }
    if (from.has_ibusystatus()) {
      set_ibusystatus(from.ibusystatus());
    }
    if (from.has_bhaverole()) {
      set_bhaverole(from.bhaverole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSWorld::CopyFrom(const RSWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RSWorld::Swap(RSWorld* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(strworldname_, other->strworldname_);
    std::swap(iatt_, other->iatt_);
    std::swap(ionlinestatus_, other->ionlinestatus_);
    std::swap(ibusystatus_, other->ibusystatus_);
    std::swap(bhaverole_, other->bhaverole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSWorld_descriptor_;
  metadata.reflection = RSWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_RS_WorldList::kWorldListFieldNumber;
#endif  // !_MSC_VER

SC_RS_WorldList::SC_RS_WorldList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_RS_WorldList::InitAsDefaultInstance() {
}

SC_RS_WorldList::SC_RS_WorldList(const SC_RS_WorldList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_RS_WorldList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_RS_WorldList::~SC_RS_WorldList() {
  SharedDtor();
}

void SC_RS_WorldList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_RS_WorldList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RS_WorldList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_RS_WorldList_descriptor_;
}

const SC_RS_WorldList& SC_RS_WorldList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

SC_RS_WorldList* SC_RS_WorldList::default_instance_ = NULL;

SC_RS_WorldList* SC_RS_WorldList::New() const {
  return new SC_RS_WorldList;
}

void SC_RS_WorldList::Clear() {
  worldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_RS_WorldList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerEngine.RSWorld worldList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worldList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_RS_WorldList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerEngine.RSWorld worldList = 1;
  for (int i = 0; i < this->worldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worldlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_RS_WorldList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerEngine.RSWorld worldList = 1;
  for (int i = 0; i < this->worldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worldlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_RS_WorldList::ByteSize() const {
  int total_size = 0;

  // repeated .ServerEngine.RSWorld worldList = 1;
  total_size += 1 * this->worldlist_size();
  for (int i = 0; i < this->worldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RS_WorldList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_RS_WorldList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_RS_WorldList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_RS_WorldList::MergeFrom(const SC_RS_WorldList& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldlist_.MergeFrom(from.worldlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_RS_WorldList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RS_WorldList::CopyFrom(const SC_RS_WorldList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RS_WorldList::IsInitialized() const {

  for (int i = 0; i < worldlist_size(); i++) {
    if (!this->worldlist(i).IsInitialized()) return false;
  }
  return true;
}

void SC_RS_WorldList::Swap(SC_RS_WorldList* other) {
  if (other != this) {
    worldlist_.Swap(&other->worldlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_RS_WorldList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_RS_WorldList_descriptor_;
  metadata.reflection = SC_RS_WorldList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RS_ROUTER_VERSION_SC::kStrUrlDirFieldNumber;
const int RS_ROUTER_VERSION_SC::kStrVersionFieldNumber;
const int RS_ROUTER_VERSION_SC::kStrMinVersionFieldNumber;
const int RS_ROUTER_VERSION_SC::kNoResUpdateFieldNumber;
#endif  // !_MSC_VER

RS_ROUTER_VERSION_SC::RS_ROUTER_VERSION_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RS_ROUTER_VERSION_SC::InitAsDefaultInstance() {
}

RS_ROUTER_VERSION_SC::RS_ROUTER_VERSION_SC(const RS_ROUTER_VERSION_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RS_ROUTER_VERSION_SC::SharedCtor() {
  _cached_size_ = 0;
  strurldir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strminversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noresupdate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RS_ROUTER_VERSION_SC::~RS_ROUTER_VERSION_SC() {
  SharedDtor();
}

void RS_ROUTER_VERSION_SC::SharedDtor() {
  if (strurldir_ != &::google::protobuf::internal::kEmptyString) {
    delete strurldir_;
  }
  if (strversion_ != &::google::protobuf::internal::kEmptyString) {
    delete strversion_;
  }
  if (strminversion_ != &::google::protobuf::internal::kEmptyString) {
    delete strminversion_;
  }
  if (this != default_instance_) {
  }
}

void RS_ROUTER_VERSION_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RS_ROUTER_VERSION_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RS_ROUTER_VERSION_SC_descriptor_;
}

const RS_ROUTER_VERSION_SC& RS_ROUTER_VERSION_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

RS_ROUTER_VERSION_SC* RS_ROUTER_VERSION_SC::default_instance_ = NULL;

RS_ROUTER_VERSION_SC* RS_ROUTER_VERSION_SC::New() const {
  return new RS_ROUTER_VERSION_SC;
}

void RS_ROUTER_VERSION_SC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strurldir()) {
      if (strurldir_ != &::google::protobuf::internal::kEmptyString) {
        strurldir_->clear();
      }
    }
    if (has_strversion()) {
      if (strversion_ != &::google::protobuf::internal::kEmptyString) {
        strversion_->clear();
      }
    }
    if (has_strminversion()) {
      if (strminversion_ != &::google::protobuf::internal::kEmptyString) {
        strminversion_->clear();
      }
    }
    noresupdate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RS_ROUTER_VERSION_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strUrlDir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurldir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strurldir().data(), this->strurldir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strVersion;
        break;
      }

      // required string strVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strversion().data(), this->strversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strMinVersion;
        break;
      }

      // optional string strMinVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMinVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strminversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strminversion().data(), this->strminversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_noResUpdate;
        break;
      }

      // optional bool noResUpdate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noResUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noresupdate_)));
          set_has_noresupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RS_ROUTER_VERSION_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strUrlDir = 1;
  if (has_strurldir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurldir().data(), this->strurldir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strurldir(), output);
  }

  // required string strVersion = 2;
  if (has_strversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strversion().data(), this->strversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strversion(), output);
  }

  // optional string strMinVersion = 3;
  if (has_strminversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strminversion().data(), this->strminversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strminversion(), output);
  }

  // optional bool noResUpdate = 4;
  if (has_noresupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->noresupdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RS_ROUTER_VERSION_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strUrlDir = 1;
  if (has_strurldir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strurldir().data(), this->strurldir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strurldir(), target);
  }

  // required string strVersion = 2;
  if (has_strversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strversion().data(), this->strversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strversion(), target);
  }

  // optional string strMinVersion = 3;
  if (has_strminversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strminversion().data(), this->strminversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strminversion(), target);
  }

  // optional bool noResUpdate = 4;
  if (has_noresupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->noresupdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RS_ROUTER_VERSION_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strUrlDir = 1;
    if (has_strurldir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strurldir());
    }

    // required string strVersion = 2;
    if (has_strversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strversion());
    }

    // optional string strMinVersion = 3;
    if (has_strminversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strminversion());
    }

    // optional bool noResUpdate = 4;
    if (has_noresupdate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RS_ROUTER_VERSION_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RS_ROUTER_VERSION_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RS_ROUTER_VERSION_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RS_ROUTER_VERSION_SC::MergeFrom(const RS_ROUTER_VERSION_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strurldir()) {
      set_strurldir(from.strurldir());
    }
    if (from.has_strversion()) {
      set_strversion(from.strversion());
    }
    if (from.has_strminversion()) {
      set_strminversion(from.strminversion());
    }
    if (from.has_noresupdate()) {
      set_noresupdate(from.noresupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RS_ROUTER_VERSION_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RS_ROUTER_VERSION_SC::CopyFrom(const RS_ROUTER_VERSION_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RS_ROUTER_VERSION_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RS_ROUTER_VERSION_SC::Swap(RS_ROUTER_VERSION_SC* other) {
  if (other != this) {
    std::swap(strurldir_, other->strurldir_);
    std::swap(strversion_, other->strversion_);
    std::swap(strminversion_, other->strminversion_);
    std::swap(noresupdate_, other->noresupdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RS_ROUTER_VERSION_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RS_ROUTER_VERSION_SC_descriptor_;
  metadata.reflection = RS_ROUTER_VERSION_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_RS_Error::kStrErrorMsgFieldNumber;
#endif  // !_MSC_VER

SC_RS_Error::SC_RS_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_RS_Error::InitAsDefaultInstance() {
}

SC_RS_Error::SC_RS_Error(const SC_RS_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_RS_Error::SharedCtor() {
  _cached_size_ = 0;
  strerrormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_RS_Error::~SC_RS_Error() {
  SharedDtor();
}

void SC_RS_Error::SharedDtor() {
  if (strerrormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete strerrormsg_;
  }
  if (this != default_instance_) {
  }
}

void SC_RS_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RS_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_RS_Error_descriptor_;
}

const SC_RS_Error& SC_RS_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

SC_RS_Error* SC_RS_Error::default_instance_ = NULL;

SC_RS_Error* SC_RS_Error::New() const {
  return new SC_RS_Error;
}

void SC_RS_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strerrormsg()) {
      if (strerrormsg_ != &::google::protobuf::internal::kEmptyString) {
        strerrormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_RS_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strErrorMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strerrormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strerrormsg().data(), this->strerrormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_RS_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strErrorMsg = 1;
  if (has_strerrormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strerrormsg().data(), this->strerrormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strerrormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_RS_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strErrorMsg = 1;
  if (has_strerrormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strerrormsg().data(), this->strerrormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strerrormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_RS_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strErrorMsg = 1;
    if (has_strerrormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strerrormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RS_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_RS_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_RS_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_RS_Error::MergeFrom(const SC_RS_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strerrormsg()) {
      set_strerrormsg(from.strerrormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_RS_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RS_Error::CopyFrom(const SC_RS_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RS_Error::IsInitialized() const {

  return true;
}

void SC_RS_Error::Swap(SC_RS_Error* other) {
  if (other != this) {
    std::swap(strerrormsg_, other->strerrormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_RS_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_RS_Error_descriptor_;
  metadata.reflection = SC_RS_Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_RS_ALogin::kIWorldIDFieldNumber;
const int CS_RS_ALogin::kStrTransMsgFieldNumber;
#endif  // !_MSC_VER

CS_RS_ALogin::CS_RS_ALogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_RS_ALogin::InitAsDefaultInstance() {
}

CS_RS_ALogin::CS_RS_ALogin(const CS_RS_ALogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_RS_ALogin::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  strtransmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_RS_ALogin::~CS_RS_ALogin() {
  SharedDtor();
}

void CS_RS_ALogin::SharedDtor() {
  if (strtransmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete strtransmsg_;
  }
  if (this != default_instance_) {
  }
}

void CS_RS_ALogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_RS_ALogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_RS_ALogin_descriptor_;
}

const CS_RS_ALogin& CS_RS_ALogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RouterServer_2eproto();
  return *default_instance_;
}

CS_RS_ALogin* CS_RS_ALogin::default_instance_ = NULL;

CS_RS_ALogin* CS_RS_ALogin::New() const {
  return new CS_RS_ALogin;
}

void CS_RS_ALogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    if (has_strtransmsg()) {
      if (strtransmsg_ != &::google::protobuf::internal::kEmptyString) {
        strtransmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_RS_ALogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strTransMsg;
        break;
      }

      // required bytes strTransMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strTransMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strtransmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_RS_ALogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // required bytes strTransMsg = 2;
  if (has_strtransmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strtransmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_RS_ALogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // required bytes strTransMsg = 2;
  if (has_strtransmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strtransmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_RS_ALogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // required bytes strTransMsg = 2;
    if (has_strtransmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strtransmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_RS_ALogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_RS_ALogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_RS_ALogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_RS_ALogin::MergeFrom(const CS_RS_ALogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_strtransmsg()) {
      set_strtransmsg(from.strtransmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_RS_ALogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_RS_ALogin::CopyFrom(const CS_RS_ALogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_RS_ALogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_RS_ALogin::Swap(CS_RS_ALogin* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(strtransmsg_, other->strtransmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_RS_ALogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_RS_ALogin_descriptor_;
  metadata.reflection = CS_RS_ALogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerEngine

// @@protoc_insertion_point(global_scope)
